

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sat May 06 16:25:09 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og9 
     1                           	processor	16F1509
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	stringtext1,global,class=STRCODE,delta=2,noexec
     6                           	psect	stringtext2,global,class=STRCODE,delta=2,noexec
     7                           	psect	stringtext3,global,class=STRCODE,delta=2,noexec
     8                           	psect	stringtext4,global,class=STRCODE,delta=2,noexec
     9                           	psect	stringtext5,global,class=STRCODE,delta=2,noexec
    10                           	psect	stringtext6,global,class=STRCODE,delta=2,noexec
    11                           	psect	stringtext7,global,class=STRCODE,delta=2,noexec
    12                           	psect	_HEFregion_text,global,class=STRCODE,delta=2,noexec
    13                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	nvBANK3,global,class=BANK3,space=1,delta=1,noexec
    16                           	psect	nvBANK4,global,class=BANK4,space=1,delta=1,noexec
    17                           	psect	nvBANK5,global,class=BANK5,space=1,delta=1,noexec
    18                           	psect	cinit,global,class=CODE,merge=1,delta=2
    19                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,noexec
    22                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    23                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,noexec
    24                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1,noexec
    25                           	psect	clrtext,global,class=CODE,delta=2
    26                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    27                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    28                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    29                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    30                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    31                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    32                           	psect	text1,local,class=CODE,merge=1,delta=2
    33                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    34                           	psect	text3,local,class=CODE,merge=1,delta=2
    35                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    36                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    37                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    40                           	psect	text9,local,class=CODE,merge=1,delta=2
    41                           	psect	text10,local,class=CODE,merge=1,delta=2
    42                           	psect	text11,local,class=CODE,merge=1,delta=2
    43                           	psect	text12,local,class=CODE,merge=1,delta=2
    44                           	psect	text13,local,class=CODE,merge=1,delta=2
    45                           	psect	text14,local,class=CODE,merge=1,delta=2
    46                           	psect	text15,local,class=CODE,merge=1,delta=2
    47                           	psect	text16,local,class=CODE,merge=1,delta=2
    48                           	psect	text17,local,class=CODE,merge=1,delta=2
    49                           	psect	text18,local,class=CODE,merge=1,delta=2
    50                           	psect	text19,local,class=CODE,merge=1,delta=2
    51                           	psect	text20,local,class=CODE,merge=1,delta=2
    52                           	psect	text21,local,class=CODE,merge=1,delta=2
    53                           	psect	text22,local,class=CODE,merge=1,delta=2
    54                           	psect	text23,local,class=CODE,merge=1,delta=2
    55                           	psect	text24,local,class=CODE,merge=1,delta=2
    56                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    57                           	psect	text26,local,class=CODE,merge=1,delta=2,group=1
    58                           	psect	text27,local,class=CODE,merge=1,delta=2,group=1
    59                           	psect	text28,local,class=CODE,merge=1,delta=2
    60                           	psect	text29,local,class=CODE,merge=1,delta=2
    61                           	psect	text30,local,class=CODE,merge=1,delta=2
    62                           	psect	text31,local,class=CODE,merge=1,delta=2
    63                           	psect	text32,local,class=CODE,merge=1,delta=2
    64                           	psect	text33,local,class=CODE,merge=1,delta=2
    65                           	psect	text34,local,class=CODE,merge=1,delta=2
    66                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    67                           	psect	text36,local,class=CODE,merge=1,delta=2
    68                           	psect	text37,local,class=CODE,merge=1,delta=2
    69                           	psect	text38,local,class=CODE,merge=1,delta=2
    70                           	psect	text39,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text41,local,class=CODE,merge=1,delta=2
    73                           	psect	text42,local,class=CODE,merge=1,delta=2
    74                           	psect	text43,local,class=CODE,merge=1,delta=2
    75                           	psect	text44,local,class=CODE,merge=1,delta=2
    76                           	psect	text45,local,class=CODE,merge=1,delta=2
    77                           	psect	text46,local,class=CODE,merge=1,delta=2
    78                           	psect	text47,local,class=CODE,merge=1,delta=2
    79                           	psect	text48,local,class=CODE,merge=1,delta=2
    80                           	psect	text49,local,class=CODE,merge=1,delta=2
    81                           	psect	text50,local,class=CODE,merge=1,delta=2
    82                           	psect	text51,local,class=CODE,merge=1,delta=2
    83                           	psect	text52,local,class=CODE,merge=1,delta=2
    84                           	psect	text53,local,class=CODE,merge=1,delta=2
    85                           	psect	text54,local,class=CODE,merge=1,delta=2
    86                           	psect	text55,local,class=CODE,merge=1,delta=2
    87                           	psect	text56,local,class=CODE,merge=1,delta=2
    88                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text60,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text64,local,class=CODE,merge=1,delta=2
    96                           	psect	text65,local,class=CODE,merge=1,delta=2
    97                           	psect	text66,local,class=CODE,merge=1,delta=2
    98                           	psect	text67,local,class=CODE,merge=1,delta=2
    99                           	psect	text68,local,class=CODE,merge=1,delta=2
   100                           	psect	text69,local,class=CODE,merge=1,delta=2
   101                           	psect	text70,local,class=CODE,merge=1,delta=2
   102                           	psect	text71,local,class=CODE,merge=1,delta=2
   103                           	psect	text72,local,class=CODE,merge=1,delta=2
   104                           	psect	text73,local,class=CODE,merge=1,delta=2
   105                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
   106                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
   107                           	psect	text76,local,class=CODE,merge=1,inline,delta=2
   108                           	psect	text77,local,class=CODE,merge=1,delta=2
   109                           	psect	text78,local,class=CODE,merge=1,inline,delta=2
   110                           	psect	text79,local,class=CODE,merge=1,inline,delta=2
   111                           	psect	text80,local,class=CODE,merge=1,inline,delta=2
   112                           	psect	text81,local,class=CODE,merge=1,delta=2
   113                           	psect	text82,local,class=CODE,merge=1,delta=2
   114                           	psect	text83,local,class=CODE,merge=1,delta=2
   115                           	psect	text84,local,class=CODE,merge=1,delta=2
   116                           	psect	intentry,global,class=CODE,delta=2
   117                           	psect	text86,local,class=CODE,merge=1,delta=2
   118                           	psect	text87,local,class=CODE,merge=1,delta=2
   119                           	psect	text88,local,class=CODE,merge=1,delta=2
   120                           	psect	text89,local,class=CODE,merge=1,delta=2
   121                           	psect	text90,local,class=CODE,merge=1,delta=2
   122                           	psect	text91,local,class=CODE,merge=1,delta=2
   123                           	psect	text92,local,class=CODE,merge=1,delta=2
   124                           	psect	text93,local,class=CODE,merge=1,delta=2
   125                           	psect	text94,local,class=CODE,merge=1,delta=2
   126                           	psect	text95,local,class=CODE,merge=1,delta=2
   127                           	psect	text96,local,class=CODE,merge=1,delta=2
   128                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
   129                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
   130                           	dabs	1,0x7E,2
   131  0000                     
   132                           ; Version 2.40
   133                           ; Generated 17/11/2021 GMT
   134                           ; 
   135                           ; Copyright © 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
   136                           ; All rights reserved.
   137                           ; 
   138                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   139                           ; 
   140                           ; Redistribution and use in source and binary forms, with or without modification, are
   141                           ; permitted provided that the following conditions are met:
   142                           ; 
   143                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   144                           ;        conditions and the following disclaimer.
   145                           ; 
   146                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   147                           ;        of conditions and the following disclaimer in the documentation and/or other
   148                           ;        materials provided with the distribution. Publication is not required when
   149                           ;        this file is used in an embedded application.
   150                           ; 
   151                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   152                           ;        software without specific prior written permission.
   153                           ; 
   154                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   155                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   156                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   157                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   158                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   159                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   160                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   161                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   162                           ; 
   163                           ; 
   164                           ; Code-generator required, PIC16F1509 Definitions
   165                           ; 
   166                           ; SFR Addresses
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0091                     	;# 
   198  0092                     	;# 
   199  0093                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0111                     	;# 
   215  0112                     	;# 
   216  0113                     	;# 
   217  0114                     	;# 
   218  0115                     	;# 
   219  0116                     	;# 
   220  0117                     	;# 
   221  0118                     	;# 
   222  0119                     	;# 
   223  011D                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0197                     	;# 
   236  0199                     	;# 
   237  019A                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019C                     	;# 
   241  019D                     	;# 
   242  019E                     	;# 
   243  019F                     	;# 
   244  020C                     	;# 
   245  020D                     	;# 
   246  0211                     	;# 
   247  0211                     	;# 
   248  0212                     	;# 
   249  0212                     	;# 
   250  0213                     	;# 
   251  0213                     	;# 
   252  0214                     	;# 
   253  0214                     	;# 
   254  0215                     	;# 
   255  0215                     	;# 
   256  0215                     	;# 
   257  0216                     	;# 
   258  0216                     	;# 
   259  0217                     	;# 
   260  0217                     	;# 
   261  0391                     	;# 
   262  0392                     	;# 
   263  0393                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0498                     	;# 
   268  0498                     	;# 
   269  0499                     	;# 
   270  049A                     	;# 
   271  049B                     	;# 
   272  049B                     	;# 
   273  049C                     	;# 
   274  049D                     	;# 
   275  049E                     	;# 
   276  049F                     	;# 
   277  0611                     	;# 
   278  0612                     	;# 
   279  0613                     	;# 
   280  0613                     	;# 
   281  0614                     	;# 
   282  0615                     	;# 
   283  0616                     	;# 
   284  0616                     	;# 
   285  0617                     	;# 
   286  0618                     	;# 
   287  0619                     	;# 
   288  0619                     	;# 
   289  061A                     	;# 
   290  061B                     	;# 
   291  061C                     	;# 
   292  061C                     	;# 
   293  0691                     	;# 
   294  0692                     	;# 
   295  0693                     	;# 
   296  0694                     	;# 
   297  0695                     	;# 
   298  0F0F                     	;# 
   299  0F10                     	;# 
   300  0F11                     	;# 
   301  0F12                     	;# 
   302  0F13                     	;# 
   303  0F14                     	;# 
   304  0F15                     	;# 
   305  0F16                     	;# 
   306  0F17                     	;# 
   307  0F18                     	;# 
   308  0F19                     	;# 
   309  0F1A                     	;# 
   310  0F1B                     	;# 
   311  0F1C                     	;# 
   312  0F1D                     	;# 
   313  0F1E                     	;# 
   314  0F1F                     	;# 
   315  0F20                     	;# 
   316  0F21                     	;# 
   317  0F22                     	;# 
   318  0F23                     	;# 
   319  0F24                     	;# 
   320  0F25                     	;# 
   321  0F26                     	;# 
   322  0F27                     	;# 
   323  0F28                     	;# 
   324  0F29                     	;# 
   325  0F2A                     	;# 
   326  0F2B                     	;# 
   327  0F2C                     	;# 
   328  0F2D                     	;# 
   329  0F2E                     	;# 
   330  0F2F                     	;# 
   331  0F8C                     	;# 
   332  0F8D                     	;# 
   333  0F91                     	;# 
   334  0F95                     	;# 
   335  0F96                     	;# 
   336  0F97                     	;# 
   337  0F9C                     	;# 
   338  0F9D                     	;# 
   339  0F9E                     	;# 
   340  0FE3                     	;# 
   341  0FE4                     	;# 
   342  0FE5                     	;# 
   343  0FE6                     	;# 
   344  0FE7                     	;# 
   345  0FE8                     	;# 
   346  0FE9                     	;# 
   347  0FEA                     	;# 
   348  0FEB                     	;# 
   349  0FED                     	;# 
   350  0FEE                     	;# 
   351  0FEF                     	;# 
   352  0000                     	;# 
   353  0001                     	;# 
   354  0002                     	;# 
   355  0003                     	;# 
   356  0004                     	;# 
   357  0005                     	;# 
   358  0006                     	;# 
   359  0007                     	;# 
   360  0008                     	;# 
   361  0009                     	;# 
   362  000A                     	;# 
   363  000B                     	;# 
   364  000C                     	;# 
   365  000D                     	;# 
   366  000E                     	;# 
   367  0011                     	;# 
   368  0012                     	;# 
   369  0013                     	;# 
   370  0015                     	;# 
   371  0016                     	;# 
   372  0016                     	;# 
   373  0017                     	;# 
   374  0018                     	;# 
   375  0019                     	;# 
   376  001A                     	;# 
   377  001B                     	;# 
   378  001C                     	;# 
   379  008C                     	;# 
   380  008D                     	;# 
   381  008E                     	;# 
   382  0091                     	;# 
   383  0092                     	;# 
   384  0093                     	;# 
   385  0095                     	;# 
   386  0096                     	;# 
   387  0097                     	;# 
   388  0099                     	;# 
   389  009A                     	;# 
   390  009B                     	;# 
   391  009B                     	;# 
   392  009C                     	;# 
   393  009D                     	;# 
   394  009E                     	;# 
   395  009F                     	;# 
   396  010C                     	;# 
   397  010D                     	;# 
   398  010E                     	;# 
   399  0111                     	;# 
   400  0112                     	;# 
   401  0113                     	;# 
   402  0114                     	;# 
   403  0115                     	;# 
   404  0116                     	;# 
   405  0117                     	;# 
   406  0118                     	;# 
   407  0119                     	;# 
   408  011D                     	;# 
   409  018C                     	;# 
   410  018D                     	;# 
   411  018E                     	;# 
   412  0191                     	;# 
   413  0191                     	;# 
   414  0192                     	;# 
   415  0193                     	;# 
   416  0193                     	;# 
   417  0194                     	;# 
   418  0195                     	;# 
   419  0196                     	;# 
   420  0197                     	;# 
   421  0199                     	;# 
   422  019A                     	;# 
   423  019B                     	;# 
   424  019B                     	;# 
   425  019C                     	;# 
   426  019D                     	;# 
   427  019E                     	;# 
   428  019F                     	;# 
   429  020C                     	;# 
   430  020D                     	;# 
   431  0211                     	;# 
   432  0211                     	;# 
   433  0212                     	;# 
   434  0212                     	;# 
   435  0213                     	;# 
   436  0213                     	;# 
   437  0214                     	;# 
   438  0214                     	;# 
   439  0215                     	;# 
   440  0215                     	;# 
   441  0215                     	;# 
   442  0216                     	;# 
   443  0216                     	;# 
   444  0217                     	;# 
   445  0217                     	;# 
   446  0391                     	;# 
   447  0392                     	;# 
   448  0393                     	;# 
   449  0394                     	;# 
   450  0395                     	;# 
   451  0396                     	;# 
   452  0498                     	;# 
   453  0498                     	;# 
   454  0499                     	;# 
   455  049A                     	;# 
   456  049B                     	;# 
   457  049B                     	;# 
   458  049C                     	;# 
   459  049D                     	;# 
   460  049E                     	;# 
   461  049F                     	;# 
   462  0611                     	;# 
   463  0612                     	;# 
   464  0613                     	;# 
   465  0613                     	;# 
   466  0614                     	;# 
   467  0615                     	;# 
   468  0616                     	;# 
   469  0616                     	;# 
   470  0617                     	;# 
   471  0618                     	;# 
   472  0619                     	;# 
   473  0619                     	;# 
   474  061A                     	;# 
   475  061B                     	;# 
   476  061C                     	;# 
   477  061C                     	;# 
   478  0691                     	;# 
   479  0692                     	;# 
   480  0693                     	;# 
   481  0694                     	;# 
   482  0695                     	;# 
   483  0F0F                     	;# 
   484  0F10                     	;# 
   485  0F11                     	;# 
   486  0F12                     	;# 
   487  0F13                     	;# 
   488  0F14                     	;# 
   489  0F15                     	;# 
   490  0F16                     	;# 
   491  0F17                     	;# 
   492  0F18                     	;# 
   493  0F19                     	;# 
   494  0F1A                     	;# 
   495  0F1B                     	;# 
   496  0F1C                     	;# 
   497  0F1D                     	;# 
   498  0F1E                     	;# 
   499  0F1F                     	;# 
   500  0F20                     	;# 
   501  0F21                     	;# 
   502  0F22                     	;# 
   503  0F23                     	;# 
   504  0F24                     	;# 
   505  0F25                     	;# 
   506  0F26                     	;# 
   507  0F27                     	;# 
   508  0F28                     	;# 
   509  0F29                     	;# 
   510  0F2A                     	;# 
   511  0F2B                     	;# 
   512  0F2C                     	;# 
   513  0F2D                     	;# 
   514  0F2E                     	;# 
   515  0F2F                     	;# 
   516  0F8C                     	;# 
   517  0F8D                     	;# 
   518  0F91                     	;# 
   519  0F95                     	;# 
   520  0F96                     	;# 
   521  0F97                     	;# 
   522  0F9C                     	;# 
   523  0F9D                     	;# 
   524  0F9E                     	;# 
   525  0FE3                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0000                     	;# 
   538  0001                     	;# 
   539  0002                     	;# 
   540  0003                     	;# 
   541  0004                     	;# 
   542  0005                     	;# 
   543  0006                     	;# 
   544  0007                     	;# 
   545  0008                     	;# 
   546  0009                     	;# 
   547  000A                     	;# 
   548  000B                     	;# 
   549  000C                     	;# 
   550  000D                     	;# 
   551  000E                     	;# 
   552  0011                     	;# 
   553  0012                     	;# 
   554  0013                     	;# 
   555  0015                     	;# 
   556  0016                     	;# 
   557  0016                     	;# 
   558  0017                     	;# 
   559  0018                     	;# 
   560  0019                     	;# 
   561  001A                     	;# 
   562  001B                     	;# 
   563  001C                     	;# 
   564  008C                     	;# 
   565  008D                     	;# 
   566  008E                     	;# 
   567  0091                     	;# 
   568  0092                     	;# 
   569  0093                     	;# 
   570  0095                     	;# 
   571  0096                     	;# 
   572  0097                     	;# 
   573  0099                     	;# 
   574  009A                     	;# 
   575  009B                     	;# 
   576  009B                     	;# 
   577  009C                     	;# 
   578  009D                     	;# 
   579  009E                     	;# 
   580  009F                     	;# 
   581  010C                     	;# 
   582  010D                     	;# 
   583  010E                     	;# 
   584  0111                     	;# 
   585  0112                     	;# 
   586  0113                     	;# 
   587  0114                     	;# 
   588  0115                     	;# 
   589  0116                     	;# 
   590  0117                     	;# 
   591  0118                     	;# 
   592  0119                     	;# 
   593  011D                     	;# 
   594  018C                     	;# 
   595  018D                     	;# 
   596  018E                     	;# 
   597  0191                     	;# 
   598  0191                     	;# 
   599  0192                     	;# 
   600  0193                     	;# 
   601  0193                     	;# 
   602  0194                     	;# 
   603  0195                     	;# 
   604  0196                     	;# 
   605  0197                     	;# 
   606  0199                     	;# 
   607  019A                     	;# 
   608  019B                     	;# 
   609  019B                     	;# 
   610  019C                     	;# 
   611  019D                     	;# 
   612  019E                     	;# 
   613  019F                     	;# 
   614  020C                     	;# 
   615  020D                     	;# 
   616  0211                     	;# 
   617  0211                     	;# 
   618  0212                     	;# 
   619  0212                     	;# 
   620  0213                     	;# 
   621  0213                     	;# 
   622  0214                     	;# 
   623  0214                     	;# 
   624  0215                     	;# 
   625  0215                     	;# 
   626  0215                     	;# 
   627  0216                     	;# 
   628  0216                     	;# 
   629  0217                     	;# 
   630  0217                     	;# 
   631  0391                     	;# 
   632  0392                     	;# 
   633  0393                     	;# 
   634  0394                     	;# 
   635  0395                     	;# 
   636  0396                     	;# 
   637  0498                     	;# 
   638  0498                     	;# 
   639  0499                     	;# 
   640  049A                     	;# 
   641  049B                     	;# 
   642  049B                     	;# 
   643  049C                     	;# 
   644  049D                     	;# 
   645  049E                     	;# 
   646  049F                     	;# 
   647  0611                     	;# 
   648  0612                     	;# 
   649  0613                     	;# 
   650  0613                     	;# 
   651  0614                     	;# 
   652  0615                     	;# 
   653  0616                     	;# 
   654  0616                     	;# 
   655  0617                     	;# 
   656  0618                     	;# 
   657  0619                     	;# 
   658  0619                     	;# 
   659  061A                     	;# 
   660  061B                     	;# 
   661  061C                     	;# 
   662  061C                     	;# 
   663  0691                     	;# 
   664  0692                     	;# 
   665  0693                     	;# 
   666  0694                     	;# 
   667  0695                     	;# 
   668  0F0F                     	;# 
   669  0F10                     	;# 
   670  0F11                     	;# 
   671  0F12                     	;# 
   672  0F13                     	;# 
   673  0F14                     	;# 
   674  0F15                     	;# 
   675  0F16                     	;# 
   676  0F17                     	;# 
   677  0F18                     	;# 
   678  0F19                     	;# 
   679  0F1A                     	;# 
   680  0F1B                     	;# 
   681  0F1C                     	;# 
   682  0F1D                     	;# 
   683  0F1E                     	;# 
   684  0F1F                     	;# 
   685  0F20                     	;# 
   686  0F21                     	;# 
   687  0F22                     	;# 
   688  0F23                     	;# 
   689  0F24                     	;# 
   690  0F25                     	;# 
   691  0F26                     	;# 
   692  0F27                     	;# 
   693  0F28                     	;# 
   694  0F29                     	;# 
   695  0F2A                     	;# 
   696  0F2B                     	;# 
   697  0F2C                     	;# 
   698  0F2D                     	;# 
   699  0F2E                     	;# 
   700  0F2F                     	;# 
   701  0F8C                     	;# 
   702  0F8D                     	;# 
   703  0F91                     	;# 
   704  0F95                     	;# 
   705  0F96                     	;# 
   706  0F97                     	;# 
   707  0F9C                     	;# 
   708  0F9D                     	;# 
   709  0F9E                     	;# 
   710  0FE3                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0011                     	;# 
   738  0012                     	;# 
   739  0013                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0091                     	;# 
   753  0092                     	;# 
   754  0093                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  009F                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0111                     	;# 
   770  0112                     	;# 
   771  0113                     	;# 
   772  0114                     	;# 
   773  0115                     	;# 
   774  0116                     	;# 
   775  0117                     	;# 
   776  0118                     	;# 
   777  0119                     	;# 
   778  011D                     	;# 
   779  018C                     	;# 
   780  018D                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0197                     	;# 
   791  0199                     	;# 
   792  019A                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019C                     	;# 
   796  019D                     	;# 
   797  019E                     	;# 
   798  019F                     	;# 
   799  020C                     	;# 
   800  020D                     	;# 
   801  0211                     	;# 
   802  0211                     	;# 
   803  0212                     	;# 
   804  0212                     	;# 
   805  0213                     	;# 
   806  0213                     	;# 
   807  0214                     	;# 
   808  0214                     	;# 
   809  0215                     	;# 
   810  0215                     	;# 
   811  0215                     	;# 
   812  0216                     	;# 
   813  0216                     	;# 
   814  0217                     	;# 
   815  0217                     	;# 
   816  0391                     	;# 
   817  0392                     	;# 
   818  0393                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0498                     	;# 
   823  0498                     	;# 
   824  0499                     	;# 
   825  049A                     	;# 
   826  049B                     	;# 
   827  049B                     	;# 
   828  049C                     	;# 
   829  049D                     	;# 
   830  049E                     	;# 
   831  049F                     	;# 
   832  0611                     	;# 
   833  0612                     	;# 
   834  0613                     	;# 
   835  0613                     	;# 
   836  0614                     	;# 
   837  0615                     	;# 
   838  0616                     	;# 
   839  0616                     	;# 
   840  0617                     	;# 
   841  0618                     	;# 
   842  0619                     	;# 
   843  0619                     	;# 
   844  061A                     	;# 
   845  061B                     	;# 
   846  061C                     	;# 
   847  061C                     	;# 
   848  0691                     	;# 
   849  0692                     	;# 
   850  0693                     	;# 
   851  0694                     	;# 
   852  0695                     	;# 
   853  0F0F                     	;# 
   854  0F10                     	;# 
   855  0F11                     	;# 
   856  0F12                     	;# 
   857  0F13                     	;# 
   858  0F14                     	;# 
   859  0F15                     	;# 
   860  0F16                     	;# 
   861  0F17                     	;# 
   862  0F18                     	;# 
   863  0F19                     	;# 
   864  0F1A                     	;# 
   865  0F1B                     	;# 
   866  0F1C                     	;# 
   867  0F1D                     	;# 
   868  0F1E                     	;# 
   869  0F1F                     	;# 
   870  0F20                     	;# 
   871  0F21                     	;# 
   872  0F22                     	;# 
   873  0F23                     	;# 
   874  0F24                     	;# 
   875  0F25                     	;# 
   876  0F26                     	;# 
   877  0F27                     	;# 
   878  0F28                     	;# 
   879  0F29                     	;# 
   880  0F2A                     	;# 
   881  0F2B                     	;# 
   882  0F2C                     	;# 
   883  0F2D                     	;# 
   884  0F2E                     	;# 
   885  0F2F                     	;# 
   886  0F8C                     	;# 
   887  0F8D                     	;# 
   888  0F91                     	;# 
   889  0F95                     	;# 
   890  0F96                     	;# 
   891  0F97                     	;# 
   892  0F9C                     	;# 
   893  0F9D                     	;# 
   894  0F9E                     	;# 
   895  0FE3                     	;# 
   896  0FE4                     	;# 
   897  0FE5                     	;# 
   898  0FE6                     	;# 
   899  0FE7                     	;# 
   900  0FE8                     	;# 
   901  0FE9                     	;# 
   902  0FEA                     	;# 
   903  0FEB                     	;# 
   904  0FED                     	;# 
   905  0FEE                     	;# 
   906  0FEF                     	;# 
   907  0000                     	;# 
   908  0001                     	;# 
   909  0002                     	;# 
   910  0003                     	;# 
   911  0004                     	;# 
   912  0005                     	;# 
   913  0006                     	;# 
   914  0007                     	;# 
   915  0008                     	;# 
   916  0009                     	;# 
   917  000A                     	;# 
   918  000B                     	;# 
   919  000C                     	;# 
   920  000D                     	;# 
   921  000E                     	;# 
   922  0011                     	;# 
   923  0012                     	;# 
   924  0013                     	;# 
   925  0015                     	;# 
   926  0016                     	;# 
   927  0016                     	;# 
   928  0017                     	;# 
   929  0018                     	;# 
   930  0019                     	;# 
   931  001A                     	;# 
   932  001B                     	;# 
   933  001C                     	;# 
   934  008C                     	;# 
   935  008D                     	;# 
   936  008E                     	;# 
   937  0091                     	;# 
   938  0092                     	;# 
   939  0093                     	;# 
   940  0095                     	;# 
   941  0096                     	;# 
   942  0097                     	;# 
   943  0099                     	;# 
   944  009A                     	;# 
   945  009B                     	;# 
   946  009B                     	;# 
   947  009C                     	;# 
   948  009D                     	;# 
   949  009E                     	;# 
   950  009F                     	;# 
   951  010C                     	;# 
   952  010D                     	;# 
   953  010E                     	;# 
   954  0111                     	;# 
   955  0112                     	;# 
   956  0113                     	;# 
   957  0114                     	;# 
   958  0115                     	;# 
   959  0116                     	;# 
   960  0117                     	;# 
   961  0118                     	;# 
   962  0119                     	;# 
   963  011D                     	;# 
   964  018C                     	;# 
   965  018D                     	;# 
   966  018E                     	;# 
   967  0191                     	;# 
   968  0191                     	;# 
   969  0192                     	;# 
   970  0193                     	;# 
   971  0193                     	;# 
   972  0194                     	;# 
   973  0195                     	;# 
   974  0196                     	;# 
   975  0197                     	;# 
   976  0199                     	;# 
   977  019A                     	;# 
   978  019B                     	;# 
   979  019B                     	;# 
   980  019C                     	;# 
   981  019D                     	;# 
   982  019E                     	;# 
   983  019F                     	;# 
   984  020C                     	;# 
   985  020D                     	;# 
   986  0211                     	;# 
   987  0211                     	;# 
   988  0212                     	;# 
   989  0212                     	;# 
   990  0213                     	;# 
   991  0213                     	;# 
   992  0214                     	;# 
   993  0214                     	;# 
   994  0215                     	;# 
   995  0215                     	;# 
   996  0215                     	;# 
   997  0216                     	;# 
   998  0216                     	;# 
   999  0217                     	;# 
  1000  0217                     	;# 
  1001  0391                     	;# 
  1002  0392                     	;# 
  1003  0393                     	;# 
  1004  0394                     	;# 
  1005  0395                     	;# 
  1006  0396                     	;# 
  1007  0498                     	;# 
  1008  0498                     	;# 
  1009  0499                     	;# 
  1010  049A                     	;# 
  1011  049B                     	;# 
  1012  049B                     	;# 
  1013  049C                     	;# 
  1014  049D                     	;# 
  1015  049E                     	;# 
  1016  049F                     	;# 
  1017  0611                     	;# 
  1018  0612                     	;# 
  1019  0613                     	;# 
  1020  0613                     	;# 
  1021  0614                     	;# 
  1022  0615                     	;# 
  1023  0616                     	;# 
  1024  0616                     	;# 
  1025  0617                     	;# 
  1026  0618                     	;# 
  1027  0619                     	;# 
  1028  0619                     	;# 
  1029  061A                     	;# 
  1030  061B                     	;# 
  1031  061C                     	;# 
  1032  061C                     	;# 
  1033  0691                     	;# 
  1034  0692                     	;# 
  1035  0693                     	;# 
  1036  0694                     	;# 
  1037  0695                     	;# 
  1038  0F0F                     	;# 
  1039  0F10                     	;# 
  1040  0F11                     	;# 
  1041  0F12                     	;# 
  1042  0F13                     	;# 
  1043  0F14                     	;# 
  1044  0F15                     	;# 
  1045  0F16                     	;# 
  1046  0F17                     	;# 
  1047  0F18                     	;# 
  1048  0F19                     	;# 
  1049  0F1A                     	;# 
  1050  0F1B                     	;# 
  1051  0F1C                     	;# 
  1052  0F1D                     	;# 
  1053  0F1E                     	;# 
  1054  0F1F                     	;# 
  1055  0F20                     	;# 
  1056  0F21                     	;# 
  1057  0F22                     	;# 
  1058  0F23                     	;# 
  1059  0F24                     	;# 
  1060  0F25                     	;# 
  1061  0F26                     	;# 
  1062  0F27                     	;# 
  1063  0F28                     	;# 
  1064  0F29                     	;# 
  1065  0F2A                     	;# 
  1066  0F2B                     	;# 
  1067  0F2C                     	;# 
  1068  0F2D                     	;# 
  1069  0F2E                     	;# 
  1070  0F2F                     	;# 
  1071  0F8C                     	;# 
  1072  0F8D                     	;# 
  1073  0F91                     	;# 
  1074  0F95                     	;# 
  1075  0F96                     	;# 
  1076  0F97                     	;# 
  1077  0F9C                     	;# 
  1078  0F9D                     	;# 
  1079  0F9E                     	;# 
  1080  0FE3                     	;# 
  1081  0FE4                     	;# 
  1082  0FE5                     	;# 
  1083  0FE6                     	;# 
  1084  0FE7                     	;# 
  1085  0FE8                     	;# 
  1086  0FE9                     	;# 
  1087  0FEA                     	;# 
  1088  0FEB                     	;# 
  1089  0FED                     	;# 
  1090  0FEE                     	;# 
  1091  0FEF                     	;# 
  1092  0000                     	;# 
  1093  0001                     	;# 
  1094  0002                     	;# 
  1095  0003                     	;# 
  1096  0004                     	;# 
  1097  0005                     	;# 
  1098  0006                     	;# 
  1099  0007                     	;# 
  1100  0008                     	;# 
  1101  0009                     	;# 
  1102  000A                     	;# 
  1103  000B                     	;# 
  1104  000C                     	;# 
  1105  000D                     	;# 
  1106  000E                     	;# 
  1107  0011                     	;# 
  1108  0012                     	;# 
  1109  0013                     	;# 
  1110  0015                     	;# 
  1111  0016                     	;# 
  1112  0016                     	;# 
  1113  0017                     	;# 
  1114  0018                     	;# 
  1115  0019                     	;# 
  1116  001A                     	;# 
  1117  001B                     	;# 
  1118  001C                     	;# 
  1119  008C                     	;# 
  1120  008D                     	;# 
  1121  008E                     	;# 
  1122  0091                     	;# 
  1123  0092                     	;# 
  1124  0093                     	;# 
  1125  0095                     	;# 
  1126  0096                     	;# 
  1127  0097                     	;# 
  1128  0099                     	;# 
  1129  009A                     	;# 
  1130  009B                     	;# 
  1131  009B                     	;# 
  1132  009C                     	;# 
  1133  009D                     	;# 
  1134  009E                     	;# 
  1135  009F                     	;# 
  1136  010C                     	;# 
  1137  010D                     	;# 
  1138  010E                     	;# 
  1139  0111                     	;# 
  1140  0112                     	;# 
  1141  0113                     	;# 
  1142  0114                     	;# 
  1143  0115                     	;# 
  1144  0116                     	;# 
  1145  0117                     	;# 
  1146  0118                     	;# 
  1147  0119                     	;# 
  1148  011D                     	;# 
  1149  018C                     	;# 
  1150  018D                     	;# 
  1151  018E                     	;# 
  1152  0191                     	;# 
  1153  0191                     	;# 
  1154  0192                     	;# 
  1155  0193                     	;# 
  1156  0193                     	;# 
  1157  0194                     	;# 
  1158  0195                     	;# 
  1159  0196                     	;# 
  1160  0197                     	;# 
  1161  0199                     	;# 
  1162  019A                     	;# 
  1163  019B                     	;# 
  1164  019B                     	;# 
  1165  019C                     	;# 
  1166  019D                     	;# 
  1167  019E                     	;# 
  1168  019F                     	;# 
  1169  020C                     	;# 
  1170  020D                     	;# 
  1171  0211                     	;# 
  1172  0211                     	;# 
  1173  0212                     	;# 
  1174  0212                     	;# 
  1175  0213                     	;# 
  1176  0213                     	;# 
  1177  0214                     	;# 
  1178  0214                     	;# 
  1179  0215                     	;# 
  1180  0215                     	;# 
  1181  0215                     	;# 
  1182  0216                     	;# 
  1183  0216                     	;# 
  1184  0217                     	;# 
  1185  0217                     	;# 
  1186  0391                     	;# 
  1187  0392                     	;# 
  1188  0393                     	;# 
  1189  0394                     	;# 
  1190  0395                     	;# 
  1191  0396                     	;# 
  1192  0498                     	;# 
  1193  0498                     	;# 
  1194  0499                     	;# 
  1195  049A                     	;# 
  1196  049B                     	;# 
  1197  049B                     	;# 
  1198  049C                     	;# 
  1199  049D                     	;# 
  1200  049E                     	;# 
  1201  049F                     	;# 
  1202  0611                     	;# 
  1203  0612                     	;# 
  1204  0613                     	;# 
  1205  0613                     	;# 
  1206  0614                     	;# 
  1207  0615                     	;# 
  1208  0616                     	;# 
  1209  0616                     	;# 
  1210  0617                     	;# 
  1211  0618                     	;# 
  1212  0619                     	;# 
  1213  0619                     	;# 
  1214  061A                     	;# 
  1215  061B                     	;# 
  1216  061C                     	;# 
  1217  061C                     	;# 
  1218  0691                     	;# 
  1219  0692                     	;# 
  1220  0693                     	;# 
  1221  0694                     	;# 
  1222  0695                     	;# 
  1223  0F0F                     	;# 
  1224  0F10                     	;# 
  1225  0F11                     	;# 
  1226  0F12                     	;# 
  1227  0F13                     	;# 
  1228  0F14                     	;# 
  1229  0F15                     	;# 
  1230  0F16                     	;# 
  1231  0F17                     	;# 
  1232  0F18                     	;# 
  1233  0F19                     	;# 
  1234  0F1A                     	;# 
  1235  0F1B                     	;# 
  1236  0F1C                     	;# 
  1237  0F1D                     	;# 
  1238  0F1E                     	;# 
  1239  0F1F                     	;# 
  1240  0F20                     	;# 
  1241  0F21                     	;# 
  1242  0F22                     	;# 
  1243  0F23                     	;# 
  1244  0F24                     	;# 
  1245  0F25                     	;# 
  1246  0F26                     	;# 
  1247  0F27                     	;# 
  1248  0F28                     	;# 
  1249  0F29                     	;# 
  1250  0F2A                     	;# 
  1251  0F2B                     	;# 
  1252  0F2C                     	;# 
  1253  0F2D                     	;# 
  1254  0F2E                     	;# 
  1255  0F2F                     	;# 
  1256  0F8C                     	;# 
  1257  0F8D                     	;# 
  1258  0F91                     	;# 
  1259  0F95                     	;# 
  1260  0F96                     	;# 
  1261  0F97                     	;# 
  1262  0F9C                     	;# 
  1263  0F9D                     	;# 
  1264  0F9E                     	;# 
  1265  0FE3                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0011                     	;# 
  1293  0012                     	;# 
  1294  0013                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0091                     	;# 
  1308  0092                     	;# 
  1309  0093                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  009F                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0111                     	;# 
  1325  0112                     	;# 
  1326  0113                     	;# 
  1327  0114                     	;# 
  1328  0115                     	;# 
  1329  0116                     	;# 
  1330  0117                     	;# 
  1331  0118                     	;# 
  1332  0119                     	;# 
  1333  011D                     	;# 
  1334  018C                     	;# 
  1335  018D                     	;# 
  1336  018E                     	;# 
  1337  0191                     	;# 
  1338  0191                     	;# 
  1339  0192                     	;# 
  1340  0193                     	;# 
  1341  0193                     	;# 
  1342  0194                     	;# 
  1343  0195                     	;# 
  1344  0196                     	;# 
  1345  0197                     	;# 
  1346  0199                     	;# 
  1347  019A                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019C                     	;# 
  1351  019D                     	;# 
  1352  019E                     	;# 
  1353  019F                     	;# 
  1354  020C                     	;# 
  1355  020D                     	;# 
  1356  0211                     	;# 
  1357  0211                     	;# 
  1358  0212                     	;# 
  1359  0212                     	;# 
  1360  0213                     	;# 
  1361  0213                     	;# 
  1362  0214                     	;# 
  1363  0214                     	;# 
  1364  0215                     	;# 
  1365  0215                     	;# 
  1366  0215                     	;# 
  1367  0216                     	;# 
  1368  0216                     	;# 
  1369  0217                     	;# 
  1370  0217                     	;# 
  1371  0391                     	;# 
  1372  0392                     	;# 
  1373  0393                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0498                     	;# 
  1378  0498                     	;# 
  1379  0499                     	;# 
  1380  049A                     	;# 
  1381  049B                     	;# 
  1382  049B                     	;# 
  1383  049C                     	;# 
  1384  049D                     	;# 
  1385  049E                     	;# 
  1386  049F                     	;# 
  1387  0611                     	;# 
  1388  0612                     	;# 
  1389  0613                     	;# 
  1390  0613                     	;# 
  1391  0614                     	;# 
  1392  0615                     	;# 
  1393  0616                     	;# 
  1394  0616                     	;# 
  1395  0617                     	;# 
  1396  0618                     	;# 
  1397  0619                     	;# 
  1398  0619                     	;# 
  1399  061A                     	;# 
  1400  061B                     	;# 
  1401  061C                     	;# 
  1402  061C                     	;# 
  1403  0691                     	;# 
  1404  0692                     	;# 
  1405  0693                     	;# 
  1406  0694                     	;# 
  1407  0695                     	;# 
  1408  0F0F                     	;# 
  1409  0F10                     	;# 
  1410  0F11                     	;# 
  1411  0F12                     	;# 
  1412  0F13                     	;# 
  1413  0F14                     	;# 
  1414  0F15                     	;# 
  1415  0F16                     	;# 
  1416  0F17                     	;# 
  1417  0F18                     	;# 
  1418  0F19                     	;# 
  1419  0F1A                     	;# 
  1420  0F1B                     	;# 
  1421  0F1C                     	;# 
  1422  0F1D                     	;# 
  1423  0F1E                     	;# 
  1424  0F1F                     	;# 
  1425  0F20                     	;# 
  1426  0F21                     	;# 
  1427  0F22                     	;# 
  1428  0F23                     	;# 
  1429  0F24                     	;# 
  1430  0F25                     	;# 
  1431  0F26                     	;# 
  1432  0F27                     	;# 
  1433  0F28                     	;# 
  1434  0F29                     	;# 
  1435  0F2A                     	;# 
  1436  0F2B                     	;# 
  1437  0F2C                     	;# 
  1438  0F2D                     	;# 
  1439  0F2E                     	;# 
  1440  0F2F                     	;# 
  1441  0F8C                     	;# 
  1442  0F8D                     	;# 
  1443  0F91                     	;# 
  1444  0F95                     	;# 
  1445  0F96                     	;# 
  1446  0F97                     	;# 
  1447  0F9C                     	;# 
  1448  0F9D                     	;# 
  1449  0F9E                     	;# 
  1450  0FE3                     	;# 
  1451  0FE4                     	;# 
  1452  0FE5                     	;# 
  1453  0FE6                     	;# 
  1454  0FE7                     	;# 
  1455  0FE8                     	;# 
  1456  0FE9                     	;# 
  1457  0FEA                     	;# 
  1458  0FEB                     	;# 
  1459  0FED                     	;# 
  1460  0FEE                     	;# 
  1461  0FEF                     	;# 
  1462  0000                     	;# 
  1463  0001                     	;# 
  1464  0002                     	;# 
  1465  0003                     	;# 
  1466  0004                     	;# 
  1467  0005                     	;# 
  1468  0006                     	;# 
  1469  0007                     	;# 
  1470  0008                     	;# 
  1471  0009                     	;# 
  1472  000A                     	;# 
  1473  000B                     	;# 
  1474  000C                     	;# 
  1475  000D                     	;# 
  1476  000E                     	;# 
  1477  0011                     	;# 
  1478  0012                     	;# 
  1479  0013                     	;# 
  1480  0015                     	;# 
  1481  0016                     	;# 
  1482  0016                     	;# 
  1483  0017                     	;# 
  1484  0018                     	;# 
  1485  0019                     	;# 
  1486  001A                     	;# 
  1487  001B                     	;# 
  1488  001C                     	;# 
  1489  008C                     	;# 
  1490  008D                     	;# 
  1491  008E                     	;# 
  1492  0091                     	;# 
  1493  0092                     	;# 
  1494  0093                     	;# 
  1495  0095                     	;# 
  1496  0096                     	;# 
  1497  0097                     	;# 
  1498  0099                     	;# 
  1499  009A                     	;# 
  1500  009B                     	;# 
  1501  009B                     	;# 
  1502  009C                     	;# 
  1503  009D                     	;# 
  1504  009E                     	;# 
  1505  009F                     	;# 
  1506  010C                     	;# 
  1507  010D                     	;# 
  1508  010E                     	;# 
  1509  0111                     	;# 
  1510  0112                     	;# 
  1511  0113                     	;# 
  1512  0114                     	;# 
  1513  0115                     	;# 
  1514  0116                     	;# 
  1515  0117                     	;# 
  1516  0118                     	;# 
  1517  0119                     	;# 
  1518  011D                     	;# 
  1519  018C                     	;# 
  1520  018D                     	;# 
  1521  018E                     	;# 
  1522  0191                     	;# 
  1523  0191                     	;# 
  1524  0192                     	;# 
  1525  0193                     	;# 
  1526  0193                     	;# 
  1527  0194                     	;# 
  1528  0195                     	;# 
  1529  0196                     	;# 
  1530  0197                     	;# 
  1531  0199                     	;# 
  1532  019A                     	;# 
  1533  019B                     	;# 
  1534  019B                     	;# 
  1535  019C                     	;# 
  1536  019D                     	;# 
  1537  019E                     	;# 
  1538  019F                     	;# 
  1539  020C                     	;# 
  1540  020D                     	;# 
  1541  0211                     	;# 
  1542  0211                     	;# 
  1543  0212                     	;# 
  1544  0212                     	;# 
  1545  0213                     	;# 
  1546  0213                     	;# 
  1547  0214                     	;# 
  1548  0214                     	;# 
  1549  0215                     	;# 
  1550  0215                     	;# 
  1551  0215                     	;# 
  1552  0216                     	;# 
  1553  0216                     	;# 
  1554  0217                     	;# 
  1555  0217                     	;# 
  1556  0391                     	;# 
  1557  0392                     	;# 
  1558  0393                     	;# 
  1559  0394                     	;# 
  1560  0395                     	;# 
  1561  0396                     	;# 
  1562  0498                     	;# 
  1563  0498                     	;# 
  1564  0499                     	;# 
  1565  049A                     	;# 
  1566  049B                     	;# 
  1567  049B                     	;# 
  1568  049C                     	;# 
  1569  049D                     	;# 
  1570  049E                     	;# 
  1571  049F                     	;# 
  1572  0611                     	;# 
  1573  0612                     	;# 
  1574  0613                     	;# 
  1575  0613                     	;# 
  1576  0614                     	;# 
  1577  0615                     	;# 
  1578  0616                     	;# 
  1579  0616                     	;# 
  1580  0617                     	;# 
  1581  0618                     	;# 
  1582  0619                     	;# 
  1583  0619                     	;# 
  1584  061A                     	;# 
  1585  061B                     	;# 
  1586  061C                     	;# 
  1587  061C                     	;# 
  1588  0691                     	;# 
  1589  0692                     	;# 
  1590  0693                     	;# 
  1591  0694                     	;# 
  1592  0695                     	;# 
  1593  0F0F                     	;# 
  1594  0F10                     	;# 
  1595  0F11                     	;# 
  1596  0F12                     	;# 
  1597  0F13                     	;# 
  1598  0F14                     	;# 
  1599  0F15                     	;# 
  1600  0F16                     	;# 
  1601  0F17                     	;# 
  1602  0F18                     	;# 
  1603  0F19                     	;# 
  1604  0F1A                     	;# 
  1605  0F1B                     	;# 
  1606  0F1C                     	;# 
  1607  0F1D                     	;# 
  1608  0F1E                     	;# 
  1609  0F1F                     	;# 
  1610  0F20                     	;# 
  1611  0F21                     	;# 
  1612  0F22                     	;# 
  1613  0F23                     	;# 
  1614  0F24                     	;# 
  1615  0F25                     	;# 
  1616  0F26                     	;# 
  1617  0F27                     	;# 
  1618  0F28                     	;# 
  1619  0F29                     	;# 
  1620  0F2A                     	;# 
  1621  0F2B                     	;# 
  1622  0F2C                     	;# 
  1623  0F2D                     	;# 
  1624  0F2E                     	;# 
  1625  0F2F                     	;# 
  1626  0F8C                     	;# 
  1627  0F8D                     	;# 
  1628  0F91                     	;# 
  1629  0F95                     	;# 
  1630  0F96                     	;# 
  1631  0F97                     	;# 
  1632  0F9C                     	;# 
  1633  0F9D                     	;# 
  1634  0F9E                     	;# 
  1635  0FE3                     	;# 
  1636  0FE4                     	;# 
  1637  0FE5                     	;# 
  1638  0FE6                     	;# 
  1639  0FE7                     	;# 
  1640  0FE8                     	;# 
  1641  0FE9                     	;# 
  1642  0FEA                     	;# 
  1643  0FEB                     	;# 
  1644  0FED                     	;# 
  1645  0FEE                     	;# 
  1646  0FEF                     	;# 
  1647  0000                     	;# 
  1648  0001                     	;# 
  1649  0002                     	;# 
  1650  0003                     	;# 
  1651  0004                     	;# 
  1652  0005                     	;# 
  1653  0006                     	;# 
  1654  0007                     	;# 
  1655  0008                     	;# 
  1656  0009                     	;# 
  1657  000A                     	;# 
  1658  000B                     	;# 
  1659  000C                     	;# 
  1660  000D                     	;# 
  1661  000E                     	;# 
  1662  0011                     	;# 
  1663  0012                     	;# 
  1664  0013                     	;# 
  1665  0015                     	;# 
  1666  0016                     	;# 
  1667  0016                     	;# 
  1668  0017                     	;# 
  1669  0018                     	;# 
  1670  0019                     	;# 
  1671  001A                     	;# 
  1672  001B                     	;# 
  1673  001C                     	;# 
  1674  008C                     	;# 
  1675  008D                     	;# 
  1676  008E                     	;# 
  1677  0091                     	;# 
  1678  0092                     	;# 
  1679  0093                     	;# 
  1680  0095                     	;# 
  1681  0096                     	;# 
  1682  0097                     	;# 
  1683  0099                     	;# 
  1684  009A                     	;# 
  1685  009B                     	;# 
  1686  009B                     	;# 
  1687  009C                     	;# 
  1688  009D                     	;# 
  1689  009E                     	;# 
  1690  009F                     	;# 
  1691  010C                     	;# 
  1692  010D                     	;# 
  1693  010E                     	;# 
  1694  0111                     	;# 
  1695  0112                     	;# 
  1696  0113                     	;# 
  1697  0114                     	;# 
  1698  0115                     	;# 
  1699  0116                     	;# 
  1700  0117                     	;# 
  1701  0118                     	;# 
  1702  0119                     	;# 
  1703  011D                     	;# 
  1704  018C                     	;# 
  1705  018D                     	;# 
  1706  018E                     	;# 
  1707  0191                     	;# 
  1708  0191                     	;# 
  1709  0192                     	;# 
  1710  0193                     	;# 
  1711  0193                     	;# 
  1712  0194                     	;# 
  1713  0195                     	;# 
  1714  0196                     	;# 
  1715  0197                     	;# 
  1716  0199                     	;# 
  1717  019A                     	;# 
  1718  019B                     	;# 
  1719  019B                     	;# 
  1720  019C                     	;# 
  1721  019D                     	;# 
  1722  019E                     	;# 
  1723  019F                     	;# 
  1724  020C                     	;# 
  1725  020D                     	;# 
  1726  0211                     	;# 
  1727  0211                     	;# 
  1728  0212                     	;# 
  1729  0212                     	;# 
  1730  0213                     	;# 
  1731  0213                     	;# 
  1732  0214                     	;# 
  1733  0214                     	;# 
  1734  0215                     	;# 
  1735  0215                     	;# 
  1736  0215                     	;# 
  1737  0216                     	;# 
  1738  0216                     	;# 
  1739  0217                     	;# 
  1740  0217                     	;# 
  1741  0391                     	;# 
  1742  0392                     	;# 
  1743  0393                     	;# 
  1744  0394                     	;# 
  1745  0395                     	;# 
  1746  0396                     	;# 
  1747  0498                     	;# 
  1748  0498                     	;# 
  1749  0499                     	;# 
  1750  049A                     	;# 
  1751  049B                     	;# 
  1752  049B                     	;# 
  1753  049C                     	;# 
  1754  049D                     	;# 
  1755  049E                     	;# 
  1756  049F                     	;# 
  1757  0611                     	;# 
  1758  0612                     	;# 
  1759  0613                     	;# 
  1760  0613                     	;# 
  1761  0614                     	;# 
  1762  0615                     	;# 
  1763  0616                     	;# 
  1764  0616                     	;# 
  1765  0617                     	;# 
  1766  0618                     	;# 
  1767  0619                     	;# 
  1768  0619                     	;# 
  1769  061A                     	;# 
  1770  061B                     	;# 
  1771  061C                     	;# 
  1772  061C                     	;# 
  1773  0691                     	;# 
  1774  0692                     	;# 
  1775  0693                     	;# 
  1776  0694                     	;# 
  1777  0695                     	;# 
  1778  0F0F                     	;# 
  1779  0F10                     	;# 
  1780  0F11                     	;# 
  1781  0F12                     	;# 
  1782  0F13                     	;# 
  1783  0F14                     	;# 
  1784  0F15                     	;# 
  1785  0F16                     	;# 
  1786  0F17                     	;# 
  1787  0F18                     	;# 
  1788  0F19                     	;# 
  1789  0F1A                     	;# 
  1790  0F1B                     	;# 
  1791  0F1C                     	;# 
  1792  0F1D                     	;# 
  1793  0F1E                     	;# 
  1794  0F1F                     	;# 
  1795  0F20                     	;# 
  1796  0F21                     	;# 
  1797  0F22                     	;# 
  1798  0F23                     	;# 
  1799  0F24                     	;# 
  1800  0F25                     	;# 
  1801  0F26                     	;# 
  1802  0F27                     	;# 
  1803  0F28                     	;# 
  1804  0F29                     	;# 
  1805  0F2A                     	;# 
  1806  0F2B                     	;# 
  1807  0F2C                     	;# 
  1808  0F2D                     	;# 
  1809  0F2E                     	;# 
  1810  0F2F                     	;# 
  1811  0F8C                     	;# 
  1812  0F8D                     	;# 
  1813  0F91                     	;# 
  1814  0F95                     	;# 
  1815  0F96                     	;# 
  1816  0F97                     	;# 
  1817  0F9C                     	;# 
  1818  0F9D                     	;# 
  1819  0F9E                     	;# 
  1820  0FE3                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0011                     	;# 
  1848  0012                     	;# 
  1849  0013                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0091                     	;# 
  1863  0092                     	;# 
  1864  0093                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  009F                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0111                     	;# 
  1880  0112                     	;# 
  1881  0113                     	;# 
  1882  0114                     	;# 
  1883  0115                     	;# 
  1884  0116                     	;# 
  1885  0117                     	;# 
  1886  0118                     	;# 
  1887  0119                     	;# 
  1888  011D                     	;# 
  1889  018C                     	;# 
  1890  018D                     	;# 
  1891  018E                     	;# 
  1892  0191                     	;# 
  1893  0191                     	;# 
  1894  0192                     	;# 
  1895  0193                     	;# 
  1896  0193                     	;# 
  1897  0194                     	;# 
  1898  0195                     	;# 
  1899  0196                     	;# 
  1900  0197                     	;# 
  1901  0199                     	;# 
  1902  019A                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019C                     	;# 
  1906  019D                     	;# 
  1907  019E                     	;# 
  1908  019F                     	;# 
  1909  020C                     	;# 
  1910  020D                     	;# 
  1911  0211                     	;# 
  1912  0211                     	;# 
  1913  0212                     	;# 
  1914  0212                     	;# 
  1915  0213                     	;# 
  1916  0213                     	;# 
  1917  0214                     	;# 
  1918  0214                     	;# 
  1919  0215                     	;# 
  1920  0215                     	;# 
  1921  0215                     	;# 
  1922  0216                     	;# 
  1923  0216                     	;# 
  1924  0217                     	;# 
  1925  0217                     	;# 
  1926  0391                     	;# 
  1927  0392                     	;# 
  1928  0393                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0498                     	;# 
  1933  0498                     	;# 
  1934  0499                     	;# 
  1935  049A                     	;# 
  1936  049B                     	;# 
  1937  049B                     	;# 
  1938  049C                     	;# 
  1939  049D                     	;# 
  1940  049E                     	;# 
  1941  049F                     	;# 
  1942  0611                     	;# 
  1943  0612                     	;# 
  1944  0613                     	;# 
  1945  0613                     	;# 
  1946  0614                     	;# 
  1947  0615                     	;# 
  1948  0616                     	;# 
  1949  0616                     	;# 
  1950  0617                     	;# 
  1951  0618                     	;# 
  1952  0619                     	;# 
  1953  0619                     	;# 
  1954  061A                     	;# 
  1955  061B                     	;# 
  1956  061C                     	;# 
  1957  061C                     	;# 
  1958  0691                     	;# 
  1959  0692                     	;# 
  1960  0693                     	;# 
  1961  0694                     	;# 
  1962  0695                     	;# 
  1963  0F0F                     	;# 
  1964  0F10                     	;# 
  1965  0F11                     	;# 
  1966  0F12                     	;# 
  1967  0F13                     	;# 
  1968  0F14                     	;# 
  1969  0F15                     	;# 
  1970  0F16                     	;# 
  1971  0F17                     	;# 
  1972  0F18                     	;# 
  1973  0F19                     	;# 
  1974  0F1A                     	;# 
  1975  0F1B                     	;# 
  1976  0F1C                     	;# 
  1977  0F1D                     	;# 
  1978  0F1E                     	;# 
  1979  0F1F                     	;# 
  1980  0F20                     	;# 
  1981  0F21                     	;# 
  1982  0F22                     	;# 
  1983  0F23                     	;# 
  1984  0F24                     	;# 
  1985  0F25                     	;# 
  1986  0F26                     	;# 
  1987  0F27                     	;# 
  1988  0F28                     	;# 
  1989  0F29                     	;# 
  1990  0F2A                     	;# 
  1991  0F2B                     	;# 
  1992  0F2C                     	;# 
  1993  0F2D                     	;# 
  1994  0F2E                     	;# 
  1995  0F2F                     	;# 
  1996  0F8C                     	;# 
  1997  0F8D                     	;# 
  1998  0F91                     	;# 
  1999  0F95                     	;# 
  2000  0F96                     	;# 
  2001  0F97                     	;# 
  2002  0F9C                     	;# 
  2003  0F9D                     	;# 
  2004  0F9E                     	;# 
  2005  0FE3                     	;# 
  2006  0FE4                     	;# 
  2007  0FE5                     	;# 
  2008  0FE6                     	;# 
  2009  0FE7                     	;# 
  2010  0FE8                     	;# 
  2011  0FE9                     	;# 
  2012  0FEA                     	;# 
  2013  0FEB                     	;# 
  2014  0FED                     	;# 
  2015  0FEE                     	;# 
  2016  0FEF                     	;# 
  2017                           
  2018 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
  2019  0000                     
  2020 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
  2021  0000                     
  2022 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
  2023  0000                     
  2024                           	psect	idataCOMMON
  2025  0002                     __pidataCOMMON:
  2026                           
  2027                           ;initializer for _crcModbusSlave
  2028  0002  34FF               	retlw	255
  2029  0003  34FF               	retlw	255
  2030  1FE0                     _HEFregion_absaddr	set	8160
  2031                           
  2032                           	psect	stringtext1
  2033  1800                     __pstringtext1:
  2034  1800                     _i2c_fsmStateTable:
  2035  1800  348A               	retlw	low _I2C_DO_IDLE
  2036  1801  341D               	retlw	high _I2C_DO_IDLE
  2037  1802  34D4               	retlw	low _I2C_DO_SEND_ADR_READ
  2038  1803  341D               	retlw	high _I2C_DO_SEND_ADR_READ
  2039  1804  34CD               	retlw	low _I2C_DO_SEND_ADR_WRITE
  2040  1805  341D               	retlw	high _I2C_DO_SEND_ADR_WRITE
  2041  1806  3403               	retlw	low _I2C_DO_TX
  2042  1807  3408               	retlw	high _I2C_DO_TX
  2043  1808  34B5               	retlw	low _I2C_DO_RX
  2044  1809  3407               	retlw	high _I2C_DO_RX
  2045  180A  34B4               	retlw	low _I2C_DO_RCEN
  2046  180B  341D               	retlw	high _I2C_DO_RCEN
  2047  180C  3428               	retlw	low _I2C_DO_TX_EMPTY
  2048  180D  3411               	retlw	high _I2C_DO_TX_EMPTY
  2049  180E  3466               	retlw	low _I2C_DO_SEND_RESTART_READ
  2050  180F  341D               	retlw	high _I2C_DO_SEND_RESTART_READ
  2051  1810  346A               	retlw	low _I2C_DO_SEND_RESTART_WRITE
  2052  1811  341D               	retlw	high _I2C_DO_SEND_RESTART_WRITE
  2053  1812  346E               	retlw	low _I2C_DO_SEND_RESTART
  2054  1813  341D               	retlw	high _I2C_DO_SEND_RESTART
  2055  1814  3472               	retlw	low _I2C_DO_SEND_STOP
  2056  1815  341D               	retlw	high _I2C_DO_SEND_STOP
  2057  1816  3476               	retlw	low _I2C_DO_RX_ACK
  2058  1817  341D               	retlw	high _I2C_DO_RX_ACK
  2059  1818  347A               	retlw	low _I2C_DO_RX_NACK_STOP
  2060  1819  341D               	retlw	high _I2C_DO_RX_NACK_STOP
  2061  181A  347E               	retlw	low _I2C_DO_RX_NACK_RESTART
  2062  181B  341D               	retlw	high _I2C_DO_RX_NACK_RESTART
  2063  181C  348F               	retlw	low _I2C_DO_RESET
  2064  181D  341D               	retlw	high _I2C_DO_RESET
  2065  181E  3457               	retlw	low _I2C_DO_ADDRESS_NACK
  2066  181F  3411               	retlw	high _I2C_DO_ADDRESS_NACK
  2067  1820                     __end_of_i2c_fsmStateTable:
  2068                           
  2069                           	psect	stringtext2
  2070  1820                     __pstringtext2:
  2071  1820                     _Lg4:
  2072  1820  3426               	retlw	38
  2073  1821  349E               	retlw	158
  2074  1822  3478               	retlw	120
  2075  1823  343E               	retlw	62
  2076  1824                     __end_of_Lg4:
  2077                           
  2078                           	psect	stringtext3
  2079  1824                     __pstringtext3:
  2080  1824                     _Lg3:
  2081  1824  34EE               	retlw	238
  2082  1825  34E9               	retlw	233
  2083  1826  3491               	retlw	145
  2084  1827  343E               	retlw	62
  2085  1828                     __end_of_Lg3:
  2086                           
  2087                           	psect	stringtext4
  2088  1828                     __pstringtext4:
  2089  1828                     _Lg2:
  2090  1828  3413               	retlw	19
  2091  1829  34CE               	retlw	206
  2092  182A  34CC               	retlw	204
  2093  182B  343E               	retlw	62
  2094  182C                     __end_of_Lg2:
  2095                           
  2096                           	psect	stringtext5
  2097  182C                     __pstringtext5:
  2098  182C                     _Lg1:
  2099  182C  34AA               	retlw	170
  2100  182D  34AA               	retlw	170
  2101  182E  342A               	retlw	42
  2102  182F  343F               	retlw	63
  2103  1830                     __end_of_Lg1:
  2104                           
  2105                           	psect	stringtext6
  2106  1830                     __pstringtext6:
  2107  1830                     _ln2_lo:
  2108  1830  34D1               	retlw	209
  2109  1831  34F7               	retlw	247
  2110  1832  3417               	retlw	23
  2111  1833  3437               	retlw	55
  2112  1834                     __end_of_ln2_lo:
  2113                           
  2114                           	psect	stringtext7
  2115  1834                     __pstringtext7:
  2116  1834                     _ln2_hi:
  2117  1834  3480               	retlw	128
  2118  1835  3471               	retlw	113
  2119  1836  3431               	retlw	49
  2120  1837  343F               	retlw	63
  2121  1838                     __end_of_ln2_hi:
  2122  1FE0                     _HEFregion_absaddr	set	8160
  2123                           
  2124                           	psect	_HEFregion_text
  2125  1FE0                     __p_HEFregion_text:
  2126  1FE0                     _HEFregion:
  2127  1FE0  3400               	retlw	0
  2128  1FE1  3400               	retlw	0
  2129  1FE2  3400               	retlw	0
  2130  1FE3  3400               	retlw	0
  2131  1FE4  3400               	retlw	0
  2132  1FE5  3400               	retlw	0
  2133  1FE6  3400               	retlw	0
  2134  1FE7  3400               	retlw	0
  2135  1FE8  3400               	retlw	0
  2136  1FE9  3400               	retlw	0
  2137  1FEA  3400               	retlw	0
  2138  1FEB  3400               	retlw	0
  2139  1FEC  3400               	retlw	0
  2140  1FED  3400               	retlw	0
  2141  1FEE  3400               	retlw	0
  2142  1FEF  3400               	retlw	0
  2143  1FF0  3400               	retlw	0
  2144  1FF1  3400               	retlw	0
  2145  1FF2  3400               	retlw	0
  2146  1FF3  3400               	retlw	0
  2147  1FF4  3400               	retlw	0
  2148  1FF5  3400               	retlw	0
  2149  1FF6  3400               	retlw	0
  2150  1FF7  3400               	retlw	0
  2151  1FF8  3400               	retlw	0
  2152  1FF9  3400               	retlw	0
  2153  1FFA  3400               	retlw	0
  2154  1FFB  3400               	retlw	0
  2155  1FFC  3400               	retlw	0
  2156  1FFD  3400               	retlw	0
  2157  1FFE  3400               	retlw	0
  2158  1FFF  3400               	retlw	0
  2159  2000  3400               	retlw	0
  2160  2001  3400               	retlw	0
  2161  2002  3400               	retlw	0
  2162  2003  3400               	retlw	0
  2163  2004  3400               	retlw	0
  2164  2005  3400               	retlw	0
  2165  2006  3400               	retlw	0
  2166  2007  3400               	retlw	0
  2167  2008  3400               	retlw	0
  2168  2009  3400               	retlw	0
  2169  200A  3400               	retlw	0
  2170  200B  3400               	retlw	0
  2171  200C  3400               	retlw	0
  2172  200D  3400               	retlw	0
  2173  200E  3400               	retlw	0
  2174  200F  3400               	retlw	0
  2175  2010  3400               	retlw	0
  2176  2011  3400               	retlw	0
  2177  2012  3400               	retlw	0
  2178  2013  3400               	retlw	0
  2179  2014  3400               	retlw	0
  2180  2015  3400               	retlw	0
  2181  2016  3400               	retlw	0
  2182  2017  3400               	retlw	0
  2183  2018  3400               	retlw	0
  2184  2019  3400               	retlw	0
  2185  201A  3400               	retlw	0
  2186  201B  3400               	retlw	0
  2187  201C  3400               	retlw	0
  2188  201D  3400               	retlw	0
  2189  201E  3400               	retlw	0
  2190  201F  3400               	retlw	0
  2191  2020                     __end_of_HEFregion:
  2192                           
  2193                           	psect	nvBANK0
  2194  005E                     __pnvBANK0:
  2195  005E                     _TMR0_InterruptHandler:
  2196  005E                     	ds	2
  2197  0060                     _TMR1_InterruptHandler:
  2198  0060                     	ds	2
  2199  0062                     _timer1ReloadVal:
  2200  0062                     	ds	2
  2201  0064                     _EUSART_TxDefaultInterruptHandler:
  2202  0064                     	ds	2
  2203  0066                     _timer0ReloadVal:
  2204  0066                     	ds	1
  2205                           
  2206                           	psect	nvBANK1
  2207  00EE                     __pnvBANK1:
  2208  00EE                     _eusartTxBufferRemaining:
  2209  00EE                     	ds	1
  2210                           
  2211                           	psect	nvBANK3
  2212  01EC                     __pnvBANK3:
  2213  01EC                     _EUSART_FramingErrorHandler:
  2214  01EC                     	ds	2
  2215  01EE                     _EUSART_RxDefaultInterruptHandler:
  2216  01EE                     	ds	2
  2217                           
  2218                           	psect	nvBANK4
  2219  026D                     __pnvBANK4:
  2220  026D                     _EUSART_OverrunErrorHandler:
  2221  026D                     	ds	2
  2222                           
  2223                           	psect	nvBANK5
  2224  02E0                     __pnvBANK5:
  2225  02E0                     _EUSART_ErrorHandler:
  2226  02E0                     	ds	2
  2227  0015                     _TMR0	set	21
  2228  0018                     _T1CONbits	set	24
  2229  0018                     _T1CON	set	24
  2230  0016                     _TMR1L	set	22
  2231  0017                     _TMR1H	set	23
  2232  0019                     _T1GCON	set	25
  2233  0011                     _PIR1bits	set	17
  2234  000B                     _INTCONbits	set	11
  2235  0095                     _OPTION_REG	set	149
  2236  0097                     _WDTCON	set	151
  2237  0099                     _OSCCON	set	153
  2238  0095                     _OPTION_REGbits	set	149
  2239  008E                     _TRISC	set	142
  2240  008D                     _TRISB	set	141
  2241  008C                     _TRISA	set	140
  2242  0091                     _PIE1bits	set	145
  2243  010E                     _LATCbits	set	270
  2244  0116                     _BORCON	set	278
  2245  011D                     _APFCON	set	285
  2246  010E                     _LATC	set	270
  2247  010D                     _LATB	set	269
  2248  010C                     _LATA	set	268
  2249  0196                     _PMCON2	set	406
  2250  0193                     _PMDATL	set	403
  2251  0194                     _PMDATH	set	404
  2252  0195                     _PMCON1bits	set	405
  2253  0192                     _PMADRH	set	402
  2254  0191                     _PMADRL	set	401
  2255  0199                     _RCREG	set	409
  2256  019A                     _TXREG	set	410
  2257  019E                     _TXSTAbits	set	414
  2258  019C                     _SPBRGH	set	412
  2259  019B                     _SPBRGL	set	411
  2260  019E                     _TXSTA	set	414
  2261  019D                     _RCSTA	set	413
  2262  019F                     _BAUDCON	set	415
  2263  018C                     _ANSELA	set	396
  2264  018D                     _ANSELB	set	397
  2265  018E                     _ANSELC	set	398
  2266  0216                     _SSP1CON2bits	set	534
  2267  0211                     _SSP1BUF	set	529
  2268  0215                     _SSP1CON1bits	set	533
  2269  0212                     _SSP1ADD	set	530
  2270  0216                     _SSP1CON2	set	534
  2271  0215                     _SSP1CON1	set	533
  2272  0214                     _SSP1STAT	set	532
  2273  020C                     _WPUA	set	524
  2274  020D                     _WPUB	set	525
  2275                           
  2276                           	psect	cinit
  2277  0034                     start_initialization:	
  2278                           ; #config settings
  2279                           
  2280  0034                     __initialization:
  2281                           
  2282                           ; Initialize objects allocated to COMMON
  2283  0034  3180  2002  3180   	fcall	__pidataCOMMON	;fetch initializer
  2284  0037  00FA               	movwf	__pdataCOMMON& (0+127)
  2285  0038  3180  2003  3180   	fcall	__pidataCOMMON+1	;fetch initializer
  2286  003B  00FB               	movwf	(__pdataCOMMON+1)& (0+127)
  2287                           
  2288                           ; Clear objects allocated to BANK0
  2289  003C  3051               	movlw	low __pbssBANK0
  2290  003D  0084               	movwf	4
  2291  003E  3000               	movlw	high __pbssBANK0
  2292  003F  0085               	movwf	5
  2293  0040  300D               	movlw	13
  2294  0041  319D  25C0  3180   	fcall	clear_ram0
  2295                           
  2296                           ; Clear objects allocated to BANK2
  2297  0044  0022               	movlb	2	; select bank2
  2298  0045  01EE               	clrf	__pbssBANK2& (0+127)
  2299  0046  01EF               	clrf	(__pbssBANK2+1)& (0+127)
  2300                           
  2301                           ; Clear objects allocated to BANK3
  2302  0047  30A0               	movlw	low __pbssBANK3
  2303  0048  0084               	movwf	4
  2304  0049  3001               	movlw	high __pbssBANK3
  2305  004A  0085               	movwf	5
  2306  004B  3032               	movlw	50
  2307  004C  319D  25C0  3180   	fcall	clear_ram0
  2308                           
  2309                           ; Clear objects allocated to BANK4
  2310  004F  3020               	movlw	low __pbssBANK4
  2311  0050  0084               	movwf	4
  2312  0051  3002               	movlw	high __pbssBANK4
  2313  0052  0085               	movwf	5
  2314  0053  304D               	movlw	77
  2315  0054  319D  25C0  3180   	fcall	clear_ram0
  2316                           
  2317                           ; Clear objects allocated to BANK5
  2318  0057  30A0               	movlw	low __pbssBANK5
  2319  0058  0084               	movwf	4
  2320  0059  3002               	movlw	high __pbssBANK5
  2321  005A  0085               	movwf	5
  2322  005B  3040               	movlw	64
  2323  005C  319D  25C0         	fcall	clear_ram0
  2324  005E                     end_of_initialization:	
  2325                           ;End of C runtime variable initialization code
  2326                           
  2327  005E                     __end_of__initialization:
  2328  005E  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  2329  005F  0020               	movlb	0
  2330  0060  318D  2D23         	ljmp	_main	;jump to C main() function
  2331                           
  2332                           	psect	dataCOMMON
  2333  007A                     __pdataCOMMON:
  2334  007A                     _crcModbusSlave:
  2335  007A                     	ds	2
  2336                           
  2337                           	psect	bssBANK0
  2338  0051                     __pbssBANK0:
  2339  0051                     logf@F472:
  2340  0051                     	ds	4
  2341  0055                     MCP3422_ReadVoltage@F4487:
  2342  0055                     	ds	3
  2343  0058                     _eusartRxLastError:
  2344  0058                     	ds	1
  2345  0059                     _eusartRxCount:
  2346  0059                     	ds	1
  2347  005A                     _eusartRxTail:
  2348  005A                     	ds	1
  2349  005B                     _eusartRxHead:
  2350  005B                     	ds	1
  2351  005C                     _eusartTxTail:
  2352  005C                     	ds	1
  2353  005D                     _eusartTxHead:
  2354  005D                     	ds	1
  2355                           
  2356                           	psect	bssBANK2
  2357  016E                     __pbssBANK2:
  2358  016E                     _errno:
  2359  016E                     	ds	2
  2360                           
  2361                           	psect	bssBANK3
  2362  01A0                     __pbssBANK3:
  2363  01A0                     _modbusSlaveData:
  2364  01A0                     	ds	45
  2365  01CD                     _tempNTC:
  2366  01CD                     	ds	4
  2367  01D1                     _bCalMode:
  2368  01D1                     	ds	1
  2369                           
  2370                           	psect	bssBANK4
  2371  0220                     __pbssBANK4:
  2372  0220                     _I2C_Status:
  2373  0220                     	ds	29
  2374  023D                     main@F4497:
  2375  023D                     	ds	16
  2376  024D                     _eusartRxStatusBuffer:
  2377  024D                     	ds	16
  2378  025D                     _eusartRxBuffer:
  2379  025D                     	ds	16
  2380                           
  2381                           	psect	bssBANK5
  2382  02A0                     __pbssBANK5:
  2383  02A0                     _eusartTxBuffer:
  2384  02A0                     	ds	64
  2385                           
  2386                           	psect	clrtext
  2387  1DC0                     clear_ram0:	
  2388                           ;	Called with FSR0 containing the base address, and
  2389                           ;	WREG with the size to clear
  2390                           
  2391  1DC0  0064               	clrwdt	;clear the watchdog before getting into this loop
  2392  1DC1                     clrloop0:
  2393  1DC1  0180               	clrf	0	;clear RAM location pointed to by FSR
  2394  1DC2  3101               	addfsr 0,1
  2395  1DC3  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2396  1DC4  2DC1               	goto	clrloop0	;have we reached the end yet?
  2397  1DC5  3400               	retlw	0	;all done for this memory range, return
  2398                           
  2399                           	psect	cstackBANK3
  2400  01D2                     __pcstackBANK3:
  2401  01D2                     main@u16TdVal:
  2402                           
  2403                           ; 2 bytes @ 0x0
  2404  01D2                     	ds	2
  2405  01D4                     main@fNtcVoltage:
  2406                           
  2407                           ; 4 bytes @ 0x2
  2408  01D4                     	ds	4
  2409  01D8                     main@u16CalBuffer:
  2410                           
  2411                           ; 16 bytes @ 0x6
  2412  01D8                     	ds	16
  2413  01E8                     main@fTdVoltage:
  2414                           
  2415                           ; 4 bytes @ 0x16
  2416  01E8                     	ds	4
  2417                           
  2418                           	psect	cstackBANK2
  2419  0120                     __pcstackBANK2:
  2420  0120                     ?_map:
  2421  0120                     map@x:	
  2422                           ; 4 bytes @ 0x0
  2423                           
  2424  0120                     logf@R:	
  2425                           ; 4 bytes @ 0x0
  2426                           
  2427                           
  2428                           ; 4 bytes @ 0x0
  2429  0120                     	ds	4
  2430  0124                     map@in_min:
  2431  0124                     logf@t1:	
  2432                           ; 4 bytes @ 0x4
  2433                           
  2434                           
  2435                           ; 4 bytes @ 0x4
  2436  0124                     	ds	4
  2437  0128                     map@in_max:
  2438  0128                     logf@t2:	
  2439                           ; 4 bytes @ 0x8
  2440                           
  2441                           
  2442                           ; 4 bytes @ 0x8
  2443  0128                     	ds	4
  2444  012C                     map@out_min:
  2445  012C                     _logf$2278:	
  2446                           ; 4 bytes @ 0xC
  2447                           
  2448                           
  2449                           ; 4 bytes @ 0xC
  2450  012C                     	ds	4
  2451  0130                     map@out_max:
  2452  0130                     _logf$2279:	
  2453                           ; 4 bytes @ 0x10
  2454                           
  2455                           
  2456                           ; 4 bytes @ 0x10
  2457  0130                     	ds	4
  2458  0134                     _logf$2280:
  2459                           
  2460                           ; 4 bytes @ 0x14
  2461  0134                     	ds	4
  2462  0138                     _logf$2281:
  2463                           
  2464                           ; 4 bytes @ 0x18
  2465  0138                     	ds	4
  2466  013C                     logf@k:
  2467                           
  2468                           ; 2 bytes @ 0x1C
  2469  013C                     	ds	2
  2470  013E                     logf@hfsq:
  2471                           
  2472                           ; 4 bytes @ 0x1E
  2473  013E                     	ds	4
  2474  0142                     logf@dk:
  2475                           
  2476                           ; 4 bytes @ 0x22
  2477  0142                     	ds	4
  2478  0146                     logf@s:
  2479                           
  2480                           ; 4 bytes @ 0x26
  2481  0146                     	ds	4
  2482  014A                     logf@z:
  2483                           
  2484                           ; 4 bytes @ 0x2A
  2485  014A                     	ds	4
  2486  014E                     logf@w:
  2487                           
  2488                           ; 4 bytes @ 0x2E
  2489  014E                     	ds	4
  2490  0152                     _logf$2277:
  2491                           
  2492                           ; 4 bytes @ 0x32
  2493  0152                     	ds	4
  2494  0156                     logf@u:
  2495                           
  2496                           ; 4 bytes @ 0x36
  2497  0156                     	ds	4
  2498  015A                     logf@f:
  2499                           
  2500                           ; 4 bytes @ 0x3A
  2501  015A                     	ds	4
  2502  015E                     logf@ix:
  2503                           
  2504                           ; 4 bytes @ 0x3E
  2505  015E                     	ds	4
  2506  0162                     get_ntc_temperature@rntc:
  2507                           
  2508                           ; 4 bytes @ 0x42
  2509  0162                     	ds	4
  2510  0166                     _get_ntc_temperature$2276:
  2511                           
  2512                           ; 4 bytes @ 0x46
  2513  0166                     	ds	4
  2514  016A                     get_ntc_temperature@temp:
  2515                           
  2516                           ; 4 bytes @ 0x4A
  2517  016A                     	ds	4
  2518                           
  2519                           	psect	cstackBANK1
  2520  00A0                     __pcstackBANK1:
  2521  00A0                     ?___flsub:
  2522  00A0                     ___flsub@a:	
  2523                           ; 4 bytes @ 0x0
  2524                           
  2525                           
  2526                           ; 4 bytes @ 0x0
  2527  00A0                     	ds	4
  2528  00A4                     ___flsub@b:
  2529                           
  2530                           ; 4 bytes @ 0x4
  2531  00A4                     	ds	4
  2532  00A8                     ?___flmul:
  2533  00A8                     ___flmul@b:	
  2534                           ; 4 bytes @ 0x8
  2535                           
  2536                           
  2537                           ; 4 bytes @ 0x8
  2538  00A8                     	ds	4
  2539  00AC                     ___flmul@a:
  2540                           
  2541                           ; 4 bytes @ 0xC
  2542  00AC                     	ds	4
  2543  00B0                     ___flmul@sign:
  2544                           
  2545                           ; 1 bytes @ 0x10
  2546  00B0                     	ds	1
  2547  00B1                     ___flmul@aexp:
  2548                           
  2549                           ; 1 bytes @ 0x11
  2550  00B1                     	ds	1
  2551  00B2                     ___flmul@bexp:
  2552                           
  2553                           ; 1 bytes @ 0x12
  2554  00B2                     	ds	1
  2555  00B3                     ___flmul@grs:
  2556                           
  2557                           ; 4 bytes @ 0x13
  2558  00B3                     	ds	4
  2559  00B7                     ___flmul@prod:
  2560                           
  2561                           ; 4 bytes @ 0x17
  2562  00B7                     	ds	4
  2563  00BB                     ___flmul@temp:
  2564                           
  2565                           ; 2 bytes @ 0x1B
  2566  00BB                     	ds	2
  2567  00BD                     ?_MCP3422_ReadVoltage:
  2568  00BD                     ?___fldiv:	
  2569                           ; 4 bytes @ 0x1D
  2570                           
  2571  00BD                     ___fldiv@a:	
  2572                           ; 4 bytes @ 0x1D
  2573                           
  2574                           
  2575                           ; 4 bytes @ 0x1D
  2576  00BD                     	ds	4
  2577  00C1                     ??_MCP3422_ReadVoltage:
  2578  00C1                     ___fldiv@b:	
  2579                           ; 1 bytes @ 0x21
  2580                           
  2581                           
  2582                           ; 4 bytes @ 0x21
  2583  00C1                     	ds	4
  2584  00C5                     ??___fldiv:
  2585  00C5                     MCP3422_ReadVoltage@channel:	
  2586                           ; 1 bytes @ 0x25
  2587                           
  2588                           
  2589                           ; 1 bytes @ 0x25
  2590  00C5                     	ds	1
  2591  00C6                     MCP3422_ReadVoltage@data:
  2592                           
  2593                           ; 3 bytes @ 0x26
  2594  00C6                     	ds	3
  2595  00C9                     MCP3422_ReadVoltage@adc_value:
  2596                           
  2597                           ; 4 bytes @ 0x29
  2598  00C9                     	ds	1
  2599  00CA                     ___fldiv@rem:
  2600                           
  2601                           ; 4 bytes @ 0x2A
  2602  00CA                     	ds	4
  2603  00CE                     ___fldiv@sign:
  2604                           
  2605                           ; 1 bytes @ 0x2E
  2606  00CE                     	ds	1
  2607  00CF                     ___fldiv@new_exp:
  2608                           
  2609                           ; 2 bytes @ 0x2F
  2610  00CF                     	ds	2
  2611  00D1                     ___fldiv@grs:
  2612                           
  2613                           ; 4 bytes @ 0x31
  2614  00D1                     	ds	4
  2615  00D5                     ___fldiv@bexp:
  2616                           
  2617                           ; 1 bytes @ 0x35
  2618  00D5                     	ds	1
  2619  00D6                     ___fldiv@aexp:
  2620                           
  2621                           ; 1 bytes @ 0x36
  2622  00D6                     	ds	1
  2623  00D7                     ?_logf:
  2624  00D7                     ?___fltol:	
  2625                           ; 4 bytes @ 0x37
  2626                           
  2627  00D7                     ___fltol@f1:	
  2628                           ; 4 bytes @ 0x37
  2629                           
  2630  00D7                     logf@x:	
  2631                           ; 4 bytes @ 0x37
  2632                           
  2633                           
  2634                           ; 4 bytes @ 0x37
  2635  00D7                     	ds	4
  2636  00DB                     ??_logf:
  2637  00DB                     ??___fltol:	
  2638                           ; 1 bytes @ 0x3B
  2639                           
  2640                           
  2641                           ; 1 bytes @ 0x3B
  2642  00DB                     	ds	5
  2643  00E0                     ___fltol@sign1:
  2644                           
  2645                           ; 1 bytes @ 0x40
  2646  00E0                     	ds	1
  2647  00E1                     ___fltol@exp1:
  2648                           
  2649                           ; 1 bytes @ 0x41
  2650  00E1                     	ds	1
  2651  00E2                     ??_map:
  2652                           
  2653                           ; 1 bytes @ 0x42
  2654  00E2                     	ds	1
  2655  00E3                     ?_get_ntc_temperature:
  2656  00E3                     get_ntc_temperature@adcVoltage:	
  2657                           ; 1 bytes @ 0x43
  2658                           
  2659                           
  2660                           ; 4 bytes @ 0x43
  2661  00E3                     	ds	7
  2662  00EA                     _map$2275:
  2663                           
  2664                           ; 4 bytes @ 0x4A
  2665  00EA                     	ds	4
  2666                           
  2667                           	psect	cstackCOMMON
  2668  0070                     __pcstackCOMMON:
  2669  0070                     ?_I2C_Open:
  2670  0070                     ?_I2C_MasterWrite:	
  2671                           ; 1 bytes @ 0x0
  2672                           
  2673  0070                     ?_I2C_Close:	
  2674                           ; 1 bytes @ 0x0
  2675                           
  2676  0070                     ?_I2C_MasterRead:	
  2677                           ; 1 bytes @ 0x0
  2678                           
  2679  0070                     ?_TMR0_ISR:	
  2680                           ; 1 bytes @ 0x0
  2681                           
  2682  0070                     ??_TMR0_ISR:	
  2683                           ; 1 bytes @ 0x0
  2684                           
  2685  0070                     ?_TMR1_ISR:	
  2686                           ; 1 bytes @ 0x0
  2687                           
  2688  0070                     ?_I2C_Initialize:	
  2689                           ; 1 bytes @ 0x0
  2690                           
  2691  0070                     ?_OSCILLATOR_Initialize:	
  2692                           ; 1 bytes @ 0x0
  2693                           
  2694  0070                     ?_WDT_Initialize:	
  2695                           ; 1 bytes @ 0x0
  2696                           
  2697  0070                     ?_TMR1_Initialize:	
  2698                           ; 1 bytes @ 0x0
  2699                           
  2700  0070                     ?_TMR0_Initialize:	
  2701                           ; 1 bytes @ 0x0
  2702                           
  2703  0070                     ?_EUSART_Initialize:	
  2704                           ; 1 bytes @ 0x0
  2705                           
  2706  0070                     ?_I2C_DO_IDLE:	
  2707                           ; 1 bytes @ 0x0
  2708                           
  2709  0070                     ?_I2C_DO_SEND_ADR_READ:	
  2710                           ; 1 bytes @ 0x0
  2711                           
  2712  0070                     ?_I2C_DO_SEND_ADR_WRITE:	
  2713                           ; 1 bytes @ 0x0
  2714                           
  2715  0070                     ?_I2C_DO_TX:	
  2716                           ; 1 bytes @ 0x0
  2717                           
  2718  0070                     ?_I2C_DO_RX:	
  2719                           ; 1 bytes @ 0x0
  2720                           
  2721  0070                     ?_I2C_DO_RCEN:	
  2722                           ; 1 bytes @ 0x0
  2723                           
  2724  0070                     ?_I2C_DO_TX_EMPTY:	
  2725                           ; 1 bytes @ 0x0
  2726                           
  2727  0070                     ?_I2C_DO_SEND_RESTART_READ:	
  2728                           ; 1 bytes @ 0x0
  2729                           
  2730  0070                     ?_I2C_DO_SEND_RESTART_WRITE:	
  2731                           ; 1 bytes @ 0x0
  2732                           
  2733  0070                     ?_I2C_DO_SEND_RESTART:	
  2734                           ; 1 bytes @ 0x0
  2735                           
  2736  0070                     ?_I2C_DO_SEND_STOP:	
  2737                           ; 1 bytes @ 0x0
  2738                           
  2739  0070                     ?_I2C_DO_RX_ACK:	
  2740                           ; 1 bytes @ 0x0
  2741                           
  2742  0070                     ?_I2C_DO_RX_NACK_STOP:	
  2743                           ; 1 bytes @ 0x0
  2744                           
  2745  0070                     ?_I2C_DO_RX_NACK_RESTART:	
  2746                           ; 1 bytes @ 0x0
  2747                           
  2748  0070                     ?_I2C_DO_RESET:	
  2749                           ; 1 bytes @ 0x0
  2750                           
  2751  0070                     ?_I2C_DO_ADDRESS_NACK:	
  2752                           ; 1 bytes @ 0x0
  2753                           
  2754  0070                     ?_I2C_MasterClearIrq:	
  2755                           ; 1 bytes @ 0x0
  2756                           
  2757  0070                     ?_I2C_MasterOpen:	
  2758                           ; 1 bytes @ 0x0
  2759                           
  2760  0070                     ?_I2C_MasterDisableIrq:	
  2761                           ; 1 bytes @ 0x0
  2762                           
  2763  0070                     ?_I2C_MasterClose:	
  2764                           ; 1 bytes @ 0x0
  2765                           
  2766  0070                     ?_I2C_MasterStart:	
  2767                           ; 1 bytes @ 0x0
  2768                           
  2769  0070                     ?_I2C_Poller:	
  2770                           ; 1 bytes @ 0x0
  2771                           
  2772  0070                     ?_I2C_MasterWaitForEvent:	
  2773                           ; 1 bytes @ 0x0
  2774                           
  2775  0070                     ?_I2C_MasterFsm:	
  2776                           ; 1 bytes @ 0x0
  2777                           
  2778  0070                     ?_I2C_MasterIsNack:	
  2779                           ; 1 bytes @ 0x0
  2780                           
  2781  0070                     ?_I2C_MasterSendTxData:	
  2782                           ; 1 bytes @ 0x0
  2783                           
  2784  0070                     ?_I2C_MasterGetRxData:	
  2785                           ; 1 bytes @ 0x0
  2786                           
  2787  0070                     ?_I2C_MasterSendAck:	
  2788                           ; 1 bytes @ 0x0
  2789                           
  2790  0070                     ?_I2C_MasterStartRx:	
  2791                           ; 1 bytes @ 0x0
  2792                           
  2793  0070                     ?_I2C_MasterSetIrq:	
  2794                           ; 1 bytes @ 0x0
  2795                           
  2796  0070                     ?_I2C_MasterEnableRestart:	
  2797                           ; 1 bytes @ 0x0
  2798                           
  2799  0070                     ?_I2C_MasterStop:	
  2800                           ; 1 bytes @ 0x0
  2801                           
  2802  0070                     ?_I2C_MasterSendNack:	
  2803                           ; 1 bytes @ 0x0
  2804                           
  2805  0070                     ?_mbus_rx_handler:	
  2806                           ; 1 bytes @ 0x0
  2807                           
  2808  0070                     ?_mbus_tx_handler:	
  2809                           ; 1 bytes @ 0x0
  2810                           
  2811  0070                     ??_mbus_tx_handler:	
  2812                           ; 1 bytes @ 0x0
  2813                           
  2814  0070                     ?_mbus_timer_handler:	
  2815                           ; 1 bytes @ 0x0
  2816                           
  2817  0070                     ??_mbus_timer_handler:	
  2818                           ; 1 bytes @ 0x0
  2819                           
  2820  0070                     ?_TMR1_CallBack:	
  2821                           ; 1 bytes @ 0x0
  2822                           
  2823  0070                     ?_TMR0_DefaultInterruptHandler:	
  2824                           ; 1 bytes @ 0x0
  2825                           
  2826  0070                     ??_TMR0_DefaultInterruptHandler:	
  2827                           ; 1 bytes @ 0x0
  2828                           
  2829  0070                     ?_TMR0_CallBack:	
  2830                           ; 1 bytes @ 0x0
  2831                           
  2832  0070                     ??_TMR0_CallBack:	
  2833                           ; 1 bytes @ 0x0
  2834                           
  2835  0070                     ?_InitModbusSlave:	
  2836                           ; 1 bytes @ 0x0
  2837                           
  2838  0070                     ?_ModbusSlaveProcessReceivedQuery:	
  2839                           ; 1 bytes @ 0x0
  2840                           
  2841  0070                     ?_INTERRUPT_InterruptManager:	
  2842                           ; 1 bytes @ 0x0
  2843                           
  2844  0070                     ?_PIN_MANAGER_Initialize:	
  2845                           ; 1 bytes @ 0x0
  2846                           
  2847  0070                     ?_SYSTEM_Initialize:	
  2848                           ; 1 bytes @ 0x0
  2849                           
  2850  0070                     ?_I2C_MasterOperation:	
  2851                           ; 1 bytes @ 0x0
  2852                           
  2853  0070                     ?_TMR1_WriteTimer:	
  2854                           ; 1 bytes @ 0x0
  2855                           
  2856  0070                     ?_MCP3422_Write:	
  2857                           ; 1 bytes @ 0x0
  2858                           
  2859  0070                     ?_main:	
  2860                           ; 1 bytes @ 0x0
  2861                           
  2862  0070                     ?_calculate_crc:	
  2863                           ; 1 bytes @ 0x0
  2864                           
  2865  0070                     ??_calculate_crc:	
  2866                           ; 1 bytes @ 0x0
  2867                           
  2868  0070                     TMR1_WriteTimer@timerVal:	
  2869                           ; 1 bytes @ 0x0
  2870                           
  2871                           
  2872                           ; 2 bytes @ 0x0
  2873  0070                     	ds	1
  2874  0071                     ??_TMR1_CallBack:
  2875                           
  2876                           ; 1 bytes @ 0x1
  2877  0071                     	ds	1
  2878  0072                     ??_TMR1_ISR:
  2879  0072                     ??_TMR1_WriteTimer:	
  2880                           ; 1 bytes @ 0x2
  2881                           
  2882  0072                     calculate_crc@crcreg:	
  2883                           ; 1 bytes @ 0x2
  2884                           
  2885                           
  2886                           ; 1 bytes @ 0x2
  2887  0072                     	ds	1
  2888  0073                     calculate_crc@crcbit:
  2889                           
  2890                           ; 2 bytes @ 0x3
  2891  0073                     	ds	2
  2892  0075                     calculate_crc@i:
  2893                           
  2894                           ; 1 bytes @ 0x5
  2895  0075                     	ds	1
  2896  0076                     ??_ModbusSlaveProcessReceivedQuery:
  2897                           
  2898                           ; 1 bytes @ 0x6
  2899  0076                     	ds	3
  2900  0079                     ??_mbus_rx_handler:
  2901                           
  2902                           ; 1 bytes @ 0x9
  2903  0079                     	ds	1
  2904  007A                     ??_INTERRUPT_InterruptManager:
  2905                           
  2906                           	psect	cstackBANK0
  2907  0020                     __pcstackBANK0:	
  2908                           ; 1 bytes @ 0xA
  2909                           
  2910  0020                     ModbusSlaveProcessReceivedQuery@u8ReadReg:
  2911                           
  2912                           ; 1 bytes @ 0x0
  2913  0020                     	ds	1
  2914  0021                     ModbusSlaveProcessReceivedQuery@k:
  2915                           
  2916                           ; 2 bytes @ 0x1
  2917  0021                     	ds	2
  2918  0023                     ModbusSlaveProcessReceivedQuery@u16Data:
  2919                           
  2920                           ; 2 bytes @ 0x3
  2921  0023                     	ds	2
  2922  0025                     ModbusSlaveProcessReceivedQuery@j:
  2923                           
  2924                           ; 2 bytes @ 0x5
  2925  0025                     	ds	2
  2926  0027                     ModbusSlaveProcessReceivedQuery@i:
  2927                           
  2928                           ; 2 bytes @ 0x7
  2929  0027                     	ds	2
  2930  0029                     ??_I2C_Open:
  2931  0029                     ?_I2C_SetBuffer:	
  2932                           ; 1 bytes @ 0x9
  2933                           
  2934  0029                     ??_I2C_Close:	
  2935                           ; 1 bytes @ 0x9
  2936                           
  2937  0029                     ??_I2C_Initialize:	
  2938                           ; 1 bytes @ 0x9
  2939                           
  2940  0029                     ??_OSCILLATOR_Initialize:	
  2941                           ; 1 bytes @ 0x9
  2942                           
  2943  0029                     ??_WDT_Initialize:	
  2944                           ; 1 bytes @ 0x9
  2945                           
  2946  0029                     ??_I2C_DO_IDLE:	
  2947                           ; 1 bytes @ 0x9
  2948                           
  2949  0029                     ??_I2C_DO_SEND_ADR_READ:	
  2950                           ; 1 bytes @ 0x9
  2951                           
  2952  0029                     ??_I2C_DO_RCEN:	
  2953                           ; 1 bytes @ 0x9
  2954                           
  2955  0029                     ??_I2C_DO_SEND_RESTART_READ:	
  2956                           ; 1 bytes @ 0x9
  2957                           
  2958  0029                     ??_I2C_DO_SEND_RESTART_WRITE:	
  2959                           ; 1 bytes @ 0x9
  2960                           
  2961  0029                     ??_I2C_DO_SEND_RESTART:	
  2962                           ; 1 bytes @ 0x9
  2963                           
  2964  0029                     ??_I2C_DO_SEND_STOP:	
  2965                           ; 1 bytes @ 0x9
  2966                           
  2967  0029                     ??_I2C_DO_RX_ACK:	
  2968                           ; 1 bytes @ 0x9
  2969                           
  2970  0029                     ??_I2C_DO_RX_NACK_STOP:	
  2971                           ; 1 bytes @ 0x9
  2972                           
  2973  0029                     ??_I2C_DO_RX_NACK_RESTART:	
  2974                           ; 1 bytes @ 0x9
  2975                           
  2976  0029                     ??_I2C_DO_RESET:	
  2977                           ; 1 bytes @ 0x9
  2978                           
  2979  0029                     ??_I2C_MasterClearIrq:	
  2980                           ; 1 bytes @ 0x9
  2981                           
  2982  0029                     ??_I2C_MasterOpen:	
  2983                           ; 1 bytes @ 0x9
  2984                           
  2985  0029                     ??_I2C_MasterDisableIrq:	
  2986                           ; 1 bytes @ 0x9
  2987                           
  2988  0029                     ??_I2C_MasterClose:	
  2989                           ; 1 bytes @ 0x9
  2990                           
  2991  0029                     ??_I2C_MasterStart:	
  2992                           ; 1 bytes @ 0x9
  2993                           
  2994  0029                     ?_I2C_SetCallback:	
  2995                           ; 1 bytes @ 0x9
  2996                           
  2997  0029                     ??_I2C_MasterWaitForEvent:	
  2998                           ; 1 bytes @ 0x9
  2999                           
  3000  0029                     ??_I2C_MasterIsNack:	
  3001                           ; 1 bytes @ 0x9
  3002                           
  3003  0029                     ??_I2C_MasterSendTxData:	
  3004                           ; 1 bytes @ 0x9
  3005                           
  3006  0029                     ??_I2C_MasterGetRxData:	
  3007                           ; 1 bytes @ 0x9
  3008                           
  3009  0029                     ??_I2C_MasterSendAck:	
  3010                           ; 1 bytes @ 0x9
  3011                           
  3012  0029                     ??_I2C_MasterStartRx:	
  3013                           ; 1 bytes @ 0x9
  3014                           
  3015  0029                     ??_I2C_MasterSetIrq:	
  3016                           ; 1 bytes @ 0x9
  3017                           
  3018  0029                     ??_I2C_MasterEnableRestart:	
  3019                           ; 1 bytes @ 0x9
  3020                           
  3021  0029                     ??_I2C_MasterStop:	
  3022                           ; 1 bytes @ 0x9
  3023                           
  3024  0029                     ??_I2C_MasterSendNack:	
  3025                           ; 1 bytes @ 0x9
  3026                           
  3027  0029                     ?_EUSART_SetRxInterruptHandler:	
  3028                           ; 1 bytes @ 0x9
  3029                           
  3030  0029                     ?_EUSART_SetTxInterruptHandler:	
  3031                           ; 1 bytes @ 0x9
  3032                           
  3033  0029                     ?_EUSART_SetFramingErrorHandler:	
  3034                           ; 1 bytes @ 0x9
  3035                           
  3036  0029                     ?_EUSART_SetOverrunErrorHandler:	
  3037                           ; 1 bytes @ 0x9
  3038                           
  3039  0029                     ?_EUSART_SetErrorHandler:	
  3040                           ; 1 bytes @ 0x9
  3041                           
  3042  0029                     ?_TMR1_SetInterruptHandler:	
  3043                           ; 1 bytes @ 0x9
  3044                           
  3045  0029                     ?_TMR0_SetInterruptHandler:	
  3046                           ; 1 bytes @ 0x9
  3047                           
  3048  0029                     ?_FLASH_EraseBlock:	
  3049                           ; 1 bytes @ 0x9
  3050                           
  3051  0029                     ??_InitModbusSlave:	
  3052                           ; 1 bytes @ 0x9
  3053                           
  3054  0029                     ??_PIN_MANAGER_Initialize:	
  3055                           ; 1 bytes @ 0x9
  3056                           
  3057  0029                     ?__Umul8_16:	
  3058                           ; 1 bytes @ 0x9
  3059                           
  3060  0029                     ?_FLASH_ReadWord:	
  3061                           ; 2 bytes @ 0x9
  3062                           
  3063  0029                     ?___xxtofl:	
  3064                           ; 2 bytes @ 0x9
  3065                           
  3066  0029                     I2C_MasterSendTxData@data:	
  3067                           ; 4 bytes @ 0x9
  3068                           
  3069  0029                     __Umul8_16@multiplicand:	
  3070                           ; 1 bytes @ 0x9
  3071                           
  3072  0029                     I2C_SetBuffer@bufferSize:	
  3073                           ; 1 bytes @ 0x9
  3074                           
  3075  0029                     I2C_SetCallback@cb:	
  3076                           ; 2 bytes @ 0x9
  3077                           
  3078  0029                     EUSART_SetFramingErrorHandler@interruptHandler:	
  3079                           ; 2 bytes @ 0x9
  3080                           
  3081  0029                     EUSART_SetOverrunErrorHandler@interruptHandler:	
  3082                           ; 2 bytes @ 0x9
  3083                           
  3084  0029                     EUSART_SetErrorHandler@interruptHandler:	
  3085                           ; 2 bytes @ 0x9
  3086                           
  3087  0029                     EUSART_SetTxInterruptHandler@interruptHandler:	
  3088                           ; 2 bytes @ 0x9
  3089                           
  3090  0029                     EUSART_SetRxInterruptHandler@interruptHandler:	
  3091                           ; 2 bytes @ 0x9
  3092                           
  3093  0029                     TMR1_SetInterruptHandler@InterruptHandler:	
  3094                           ; 2 bytes @ 0x9
  3095                           
  3096  0029                     TMR0_SetInterruptHandler@InterruptHandler:	
  3097                           ; 2 bytes @ 0x9
  3098                           
  3099  0029                     FLASH_ReadWord@flashAddr:	
  3100                           ; 2 bytes @ 0x9
  3101                           
  3102  0029                     FLASH_EraseBlock@startAddr:	
  3103                           ; 2 bytes @ 0x9
  3104                           
  3105  0029                     ___xxtofl@val:	
  3106                           ; 2 bytes @ 0x9
  3107                           
  3108                           
  3109                           ; 4 bytes @ 0x9
  3110  0029                     	ds	1
  3111  002A                     ??_I2C_DO_SEND_ADR_WRITE:
  3112  002A                     I2C_Open@address:	
  3113                           ; 1 bytes @ 0xA
  3114                           
  3115  002A                     I2C_Close@returnValue:	
  3116                           ; 1 bytes @ 0xA
  3117                           
  3118  002A                     InitModbusSlave@u8SlaveId:	
  3119                           ; 1 bytes @ 0xA
  3120                           
  3121                           
  3122                           ; 1 bytes @ 0xA
  3123  002A                     	ds	1
  3124  002B                     ??_I2C_SetBuffer:
  3125  002B                     ??_TMR1_Initialize:	
  3126                           ; 1 bytes @ 0xB
  3127                           
  3128  002B                     ??_TMR0_Initialize:	
  3129                           ; 1 bytes @ 0xB
  3130                           
  3131  002B                     ??_EUSART_Initialize:	
  3132                           ; 1 bytes @ 0xB
  3133                           
  3134  002B                     ??_EUSART_SetRxInterruptHandler:	
  3135                           ; 1 bytes @ 0xB
  3136                           
  3137  002B                     ??_EUSART_SetTxInterruptHandler:	
  3138                           ; 1 bytes @ 0xB
  3139                           
  3140  002B                     ??_EUSART_SetFramingErrorHandler:	
  3141                           ; 1 bytes @ 0xB
  3142                           
  3143  002B                     ??_EUSART_SetOverrunErrorHandler:	
  3144                           ; 1 bytes @ 0xB
  3145                           
  3146  002B                     ??_EUSART_SetErrorHandler:	
  3147                           ; 1 bytes @ 0xB
  3148                           
  3149  002B                     ??_TMR1_SetInterruptHandler:	
  3150                           ; 1 bytes @ 0xB
  3151                           
  3152  002B                     ??_TMR0_SetInterruptHandler:	
  3153                           ; 1 bytes @ 0xB
  3154                           
  3155  002B                     ??_FLASH_EraseBlock:	
  3156                           ; 1 bytes @ 0xB
  3157                           
  3158  002B                     ??__Umul8_16:	
  3159                           ; 1 bytes @ 0xB
  3160                           
  3161  002B                     ??_FLASH_ReadWord:	
  3162                           ; 1 bytes @ 0xB
  3163                           
  3164  002B                     I2C_Open@returnValue:	
  3165                           ; 1 bytes @ 0xB
  3166                           
  3167  002B                     I2C_SetCallback@ptr:	
  3168                           ; 1 bytes @ 0xB
  3169                           
  3170  002B                     FLASH_ReadWord@GIEBitValue:	
  3171                           ; 1 bytes @ 0xB
  3172                           
  3173  002B                     FLASH_EraseBlock@GIEBitValue:	
  3174                           ; 1 bytes @ 0xB
  3175                           
  3176                           
  3177                           ; 1 bytes @ 0xB
  3178  002B                     	ds	1
  3179  002C                     ??_I2C_SetCallback:
  3180  002C                     ?_FLASH_WriteBlock:	
  3181                           ; 1 bytes @ 0xC
  3182                           
  3183  002C                     ??_SYSTEM_Initialize:	
  3184                           ; 1 bytes @ 0xC
  3185                           
  3186  002C                     I2C_SetBuffer@buffer:	
  3187                           ; 1 bytes @ 0xC
  3188                           
  3189  002C                     FLASH_WriteBlock@writeAddr:	
  3190                           ; 1 bytes @ 0xC
  3191                           
  3192                           
  3193                           ; 2 bytes @ 0xC
  3194  002C                     	ds	1
  3195  002D                     ??___xxtofl:
  3196  002D                     I2C_SetCallback@idx:	
  3197                           ; 1 bytes @ 0xD
  3198                           
  3199  002D                     __Umul8_16@product:	
  3200                           ; 1 bytes @ 0xD
  3201                           
  3202                           
  3203                           ; 2 bytes @ 0xD
  3204  002D                     	ds	1
  3205  002E                     ?_I2C_SetDataCompleteCallback:
  3206  002E                     ?_I2C_SetAddressNackCallback:	
  3207                           ; 1 bytes @ 0xE
  3208                           
  3209  002E                     FLASH_WriteBlock@flashWordArray:	
  3210                           ; 1 bytes @ 0xE
  3211                           
  3212  002E                     I2C_SetDataCompleteCallback@cb:	
  3213                           ; 1 bytes @ 0xE
  3214                           
  3215  002E                     I2C_SetAddressNackCallback@cb:	
  3216                           ; 2 bytes @ 0xE
  3217                           
  3218                           
  3219                           ; 2 bytes @ 0xE
  3220  002E                     	ds	1
  3221  002F                     ??_FLASH_WriteBlock:
  3222  002F                     __Umul8_16@word_mpld:	
  3223                           ; 1 bytes @ 0xF
  3224                           
  3225                           
  3226                           ; 2 bytes @ 0xF
  3227  002F                     	ds	1
  3228  0030                     I2C_SetDataCompleteCallback@ptr:
  3229  0030                     I2C_SetAddressNackCallback@ptr:	
  3230                           ; 1 bytes @ 0x10
  3231                           
  3232                           
  3233                           ; 1 bytes @ 0x10
  3234  0030                     	ds	1
  3235  0031                     ??_I2C_SetDataCompleteCallback:
  3236  0031                     ??_I2C_SetAddressNackCallback:	
  3237                           ; 1 bytes @ 0x11
  3238                           
  3239  0031                     __Umul8_16@multiplier:	
  3240                           ; 1 bytes @ 0x11
  3241                           
  3242  0031                     ___xxtofl@sign:	
  3243                           ; 1 bytes @ 0x11
  3244                           
  3245                           
  3246                           ; 1 bytes @ 0x11
  3247  0031                     	ds	1
  3248  0032                     ?_rd1RegCompleteHandler:
  3249  0032                     ?_rd2RegCompleteHandler:	
  3250                           ; 1 bytes @ 0x12
  3251                           
  3252  0032                     ?_wr1RegCompleteHandler:	
  3253                           ; 1 bytes @ 0x12
  3254                           
  3255  0032                     ?_wr2RegCompleteHandler:	
  3256                           ; 1 bytes @ 0x12
  3257                           
  3258  0032                     ?_rdBlkRegCompleteHandler:	
  3259                           ; 1 bytes @ 0x12
  3260                           
  3261  0032                     ?_I2C_CallbackReturnStop:	
  3262                           ; 1 bytes @ 0x12
  3263                           
  3264  0032                     ?_I2C_CallbackReturnReset:	
  3265                           ; 1 bytes @ 0x12
  3266                           
  3267  0032                     rd1RegCompleteHandler@ptr:	
  3268                           ; 1 bytes @ 0x12
  3269                           
  3270  0032                     rd2RegCompleteHandler@ptr:	
  3271                           ; 1 bytes @ 0x12
  3272                           
  3273  0032                     wr1RegCompleteHandler@ptr:	
  3274                           ; 1 bytes @ 0x12
  3275                           
  3276  0032                     wr2RegCompleteHandler@ptr:	
  3277                           ; 1 bytes @ 0x12
  3278                           
  3279  0032                     rdBlkRegCompleteHandler@ptr:	
  3280                           ; 1 bytes @ 0x12
  3281                           
  3282  0032                     I2C_CallbackReturnStop@funPtr:	
  3283                           ; 1 bytes @ 0x12
  3284                           
  3285  0032                     I2C_CallbackReturnReset@funPtr:	
  3286                           ; 1 bytes @ 0x12
  3287                           
  3288  0032                     ___xxtofl@exp:	
  3289                           ; 1 bytes @ 0x12
  3290                           
  3291  0032                     FLASH_WriteBlock@blockStartAddr:	
  3292                           ; 1 bytes @ 0x12
  3293                           
  3294                           
  3295                           ; 2 bytes @ 0x12
  3296  0032                     	ds	1
  3297  0033                     ??_rd1RegCompleteHandler:
  3298  0033                     ??_rd2RegCompleteHandler:	
  3299                           ; 1 bytes @ 0x13
  3300                           
  3301  0033                     ??_wr1RegCompleteHandler:	
  3302                           ; 1 bytes @ 0x13
  3303                           
  3304  0033                     ??_wr2RegCompleteHandler:	
  3305                           ; 1 bytes @ 0x13
  3306                           
  3307  0033                     ??_rdBlkRegCompleteHandler:	
  3308                           ; 1 bytes @ 0x13
  3309                           
  3310  0033                     ??_I2C_DO_TX:	
  3311                           ; 1 bytes @ 0x13
  3312                           
  3313  0033                     ??_I2C_DO_RX:	
  3314                           ; 1 bytes @ 0x13
  3315                           
  3316  0033                     ??_I2C_DO_TX_EMPTY:	
  3317                           ; 1 bytes @ 0x13
  3318                           
  3319  0033                     ??_I2C_DO_ADDRESS_NACK:	
  3320                           ; 1 bytes @ 0x13
  3321                           
  3322  0033                     ??_I2C_CallbackReturnStop:	
  3323                           ; 1 bytes @ 0x13
  3324                           
  3325  0033                     ??_I2C_CallbackReturnReset:	
  3326                           ; 1 bytes @ 0x13
  3327                           
  3328  0033                     ___xxtofl@arg:	
  3329                           ; 1 bytes @ 0x13
  3330                           
  3331                           
  3332                           ; 4 bytes @ 0x13
  3333  0033                     	ds	1
  3334  0034                     FLASH_WriteBlock@GIEBitValue:
  3335                           
  3336                           ; 1 bytes @ 0x14
  3337  0034                     	ds	1
  3338  0035                     FLASH_WriteBlock@i:
  3339                           
  3340                           ; 1 bytes @ 0x15
  3341  0035                     	ds	1
  3342  0036                     ??_I2C_MasterFsm:
  3343                           
  3344                           ; 1 bytes @ 0x16
  3345  0036                     	ds	1
  3346  0037                     ?___flge:
  3347  0037                     ?___fladd:	
  3348                           ; 1 bit 
  3349                           
  3350  0037                     ___flge@ff1:	
  3351                           ; 4 bytes @ 0x17
  3352                           
  3353  0037                     ___fladd@b:	
  3354                           ; 4 bytes @ 0x17
  3355                           
  3356                           
  3357                           ; 4 bytes @ 0x17
  3358  0037                     	ds	2
  3359  0039                     ??_I2C_Poller:
  3360  0039                     ??_I2C_MasterOperation:	
  3361                           ; 1 bytes @ 0x19
  3362                           
  3363                           
  3364                           ; 1 bytes @ 0x19
  3365  0039                     	ds	1
  3366  003A                     I2C_MasterOperation@read:
  3367                           
  3368                           ; 1 bytes @ 0x1A
  3369  003A                     	ds	1
  3370  003B                     I2C_MasterOperation@returnValue:
  3371  003B                     ___flge@ff2:	
  3372                           ; 1 bytes @ 0x1B
  3373                           
  3374  003B                     ___fladd@a:	
  3375                           ; 4 bytes @ 0x1B
  3376                           
  3377                           
  3378                           ; 4 bytes @ 0x1B
  3379  003B                     	ds	1
  3380  003C                     ??_I2C_MasterWrite:
  3381  003C                     ??_I2C_MasterRead:	
  3382                           ; 1 bytes @ 0x1C
  3383                           
  3384  003C                     ?_I2C_WriteNBytes:	
  3385                           ; 1 bytes @ 0x1C
  3386                           
  3387  003C                     ?_I2C_ReadNBytes:	
  3388                           ; 1 bytes @ 0x1C
  3389                           
  3390  003C                     I2C_WriteNBytes@data:	
  3391                           ; 1 bytes @ 0x1C
  3392                           
  3393  003C                     I2C_ReadNBytes@data:	
  3394                           ; 1 bytes @ 0x1C
  3395                           
  3396                           
  3397                           ; 1 bytes @ 0x1C
  3398  003C                     	ds	1
  3399  003D                     I2C_WriteNBytes@len:
  3400  003D                     I2C_ReadNBytes@len:	
  3401                           ; 2 bytes @ 0x1D
  3402                           
  3403                           
  3404                           ; 2 bytes @ 0x1D
  3405  003D                     	ds	2
  3406  003F                     ??_I2C_WriteNBytes:
  3407  003F                     ??_I2C_ReadNBytes:	
  3408                           ; 1 bytes @ 0x1F
  3409                           
  3410  003F                     ??___flge:	
  3411                           ; 1 bytes @ 0x1F
  3412                           
  3413  003F                     ??___fladd:	
  3414                           ; 1 bytes @ 0x1F
  3415                           
  3416  003F                     I2C_WriteNBytes@address:	
  3417                           ; 1 bytes @ 0x1F
  3418                           
  3419  003F                     I2C_ReadNBytes@address:	
  3420                           ; 1 bytes @ 0x1F
  3421                           
  3422                           
  3423                           ; 1 bytes @ 0x1F
  3424  003F                     	ds	1
  3425  0040                     ??_MCP3422_Write:
  3426  0040                     ?_MCP3422_Read:	
  3427                           ; 1 bytes @ 0x20
  3428                           
  3429  0040                     MCP3422_Read@count:	
  3430                           ; 1 bytes @ 0x20
  3431                           
  3432                           
  3433                           ; 1 bytes @ 0x20
  3434  0040                     	ds	1
  3435  0041                     ??_MCP3422_Read:
  3436  0041                     MCP3422_Write@data:	
  3437                           ; 1 bytes @ 0x21
  3438                           
  3439                           
  3440                           ; 1 bytes @ 0x21
  3441  0041                     	ds	3
  3442  0044                     MCP3422_Read@data:
  3443                           
  3444                           ; 1 bytes @ 0x24
  3445  0044                     	ds	3
  3446  0047                     ___fladd@signs:
  3447                           
  3448                           ; 1 bytes @ 0x27
  3449  0047                     	ds	1
  3450  0048                     ___fladd@aexp:
  3451                           
  3452                           ; 1 bytes @ 0x28
  3453  0048                     	ds	1
  3454  0049                     ___fladd@bexp:
  3455                           
  3456                           ; 1 bytes @ 0x29
  3457  0049                     	ds	1
  3458  004A                     ___fladd@grs:
  3459                           
  3460                           ; 1 bytes @ 0x2A
  3461  004A                     	ds	1
  3462  004B                     ??___flsub:
  3463  004B                     ??___flmul:	
  3464                           ; 1 bytes @ 0x2B
  3465                           
  3466                           
  3467                           ; 1 bytes @ 0x2B
  3468  004B                     	ds	5
  3469  0050                     ??_get_ntc_temperature:
  3470  0050                     ??_main:	
  3471                           ; 1 bytes @ 0x30
  3472                           
  3473                           
  3474                           ; 1 bytes @ 0x30
  3475  0050                     	ds	1
  3476                           
  3477                           	psect	maintext
  3478  0D23                     __pmaintext:	
  3479 ;;
  3480 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  3481 ;;
  3482 ;; *************** function _main *****************
  3483 ;; Defined at:
  3484 ;;		line 148 in file "main.c"
  3485 ;; Parameters:    Size  Location     Type
  3486 ;;		None
  3487 ;; Auto vars:     Size  Location     Type
  3488 ;;  u16CalBuffer   16    6[BANK3 ] unsigned short [8]
  3489 ;;  fTdVoltage      4   22[BANK3 ] float 
  3490 ;;  fNtcVoltage     4    2[BANK3 ] float 
  3491 ;;  u16TdVal        2    0[BANK3 ] unsigned short 
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      void 
  3494 ;; Registers used:
  3495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : B1F/0
  3498 ;;		On exit  : 1F/3
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3501 ;;      Params:         0       0       0       0       0       0       0       0
  3502 ;;      Locals:         0       0       0       0      26       0       0       0
  3503 ;;      Temps:          0       1       0       0       0       0       0       0
  3504 ;;      Totals:         0       1       0       0      26       0       0       0
  3505 ;;Total ram usage:       27 bytes
  3506 ;; Hardware stack levels required when called: 15
  3507 ;; This function calls:
  3508 ;;		_FLASH_ReadWord
  3509 ;;		_FLASH_WriteBlock
  3510 ;;		_InitModbusSlave
  3511 ;;		_MCP3422_ReadVoltage
  3512 ;;		_SYSTEM_Initialize
  3513 ;;		___flge
  3514 ;;		___flmul
  3515 ;;		___fltol
  3516 ;;		___xxtofl
  3517 ;;		_get_ntc_temperature
  3518 ;;		_map
  3519 ;; This function is called by:
  3520 ;;		Startup code after reset
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524  0D23                     _main:	
  3525                           ;psect for function _main
  3526                           
  3527                           
  3528                           ;main.c: 151:     float fTdVoltage = 0.0f;
  3529                           
  3530                           ;incstack = 0
  3531                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3532  0D23  3000               	movlw	0
  3533  0D24  0023               	movlb	3	; select bank3
  3534  0D25  00EB               	movwf	(main@fTdVoltage+3)^(0+384)
  3535  0D26  3000               	movlw	0
  3536  0D27  00EA               	movwf	(main@fTdVoltage+2)^(0+384)
  3537  0D28  3000               	movlw	0
  3538  0D29  00E9               	movwf	(main@fTdVoltage+1)^(0+384)
  3539  0D2A  3000               	movlw	0
  3540  0D2B  00E8               	movwf	main@fTdVoltage^(0+384)
  3541                           
  3542                           ;main.c: 152:     uint16_t u16TdVal = 0.0f;
  3543  0D2C  01D2               	clrf	main@u16TdVal^(0+384)
  3544  0D2D  01D3               	clrf	(main@u16TdVal+1)^(0+384)
  3545                           
  3546                           ;main.c: 153:     uint16_t u16CalBuffer[8] = {0U};
  3547  0D2E  30D8               	movlw	low main@u16CalBuffer
  3548  0D2F  0086               	movwf	6
  3549  0D30  3001               	movlw	high main@u16CalBuffer
  3550  0D31  0087               	movwf	7
  3551  0D32  3010               	movlw	16
  3552  0D33  0020               	movlb	0	; select bank0
  3553  0D34  00D0               	movwf	??_main
  3554  0D35  3000               	movlw	0
  3555  0D36                     u5860:
  3556  0D36  001E               	movwi fsr1++
  3557  0D37  0BD0               	decfsz	??_main,f
  3558  0D38  2D36               	goto	u5860
  3559                           
  3560                           ;main.c: 155:     SYSTEM_Initialize();
  3561  0D39  319F  270F  318D   	fcall	_SYSTEM_Initialize
  3562                           
  3563                           ;main.c: 158:     _delay((unsigned long)((10)*(8000000/4000.0)));
  3564  0D3C  301A               	movlw	26
  3565  0D3D  0020               	movlb	0	; select bank0
  3566  0D3E  00D0               	movwf	??_main
  3567  0D3F  30F8               	movlw	248
  3568  0D40                     u6077:
  3569  0D40  0B89               	decfsz	9,f
  3570  0D41  2D40               	goto	u6077
  3571  0D42  0BD0               	decfsz	??_main,f
  3572  0D43  2D40               	goto	u6077
  3573  0D44  0000               	nop
  3574                           
  3575                           ;main.c: 160:     u16CalBuffer[0] = FLASH_ReadWord(0x1FE0);
  3576  0D45  30E0               	movlw	224
  3577  0D46  0020               	movlb	0	; select bank0
  3578  0D47  00A9               	movwf	FLASH_ReadWord@flashAddr
  3579  0D48  301F               	movlw	31
  3580  0D49  00AA               	movwf	FLASH_ReadWord@flashAddr+1
  3581  0D4A  319F  27C1  318D   	fcall	_FLASH_ReadWord
  3582  0D4D  082A               	movf	?_FLASH_ReadWord+1,w
  3583  0D4E  0023               	movlb	3	; select bank3
  3584  0D4F  00D9               	movwf	(main@u16CalBuffer+1)^(0+384)
  3585  0D50  0020               	movlb	0	; select bank0
  3586  0D51  0829               	movf	?_FLASH_ReadWord,w
  3587  0D52  0023               	movlb	3	; select bank3
  3588  0D53  00D8               	movwf	main@u16CalBuffer^(0+384)
  3589                           
  3590                           ;main.c: 161:     u16CalBuffer[1] = FLASH_ReadWord(0x1FE0 +1);
  3591  0D54  30E1               	movlw	225
  3592  0D55  0020               	movlb	0	; select bank0
  3593  0D56  00A9               	movwf	FLASH_ReadWord@flashAddr
  3594  0D57  301F               	movlw	31
  3595  0D58  00AA               	movwf	FLASH_ReadWord@flashAddr+1
  3596  0D59  319F  27C1  318D   	fcall	_FLASH_ReadWord
  3597  0D5C  082A               	movf	?_FLASH_ReadWord+1,w
  3598  0D5D  0023               	movlb	3	; select bank3
  3599  0D5E  00DB               	movwf	((main@u16CalBuffer+1)^(0+384)+2)
  3600  0D5F  0020               	movlb	0	; select bank0
  3601  0D60  0829               	movf	?_FLASH_ReadWord,w
  3602  0D61  0023               	movlb	3	; select bank3
  3603  0D62  00DA               	movwf	(main@u16CalBuffer^(0+384)+2)
  3604                           
  3605                           ;main.c: 162:     u16CalBuffer[2] = FLASH_ReadWord(0x1FE0 +2);
  3606  0D63  30E2               	movlw	226
  3607  0D64  0020               	movlb	0	; select bank0
  3608  0D65  00A9               	movwf	FLASH_ReadWord@flashAddr
  3609  0D66  301F               	movlw	31
  3610  0D67  00AA               	movwf	FLASH_ReadWord@flashAddr+1
  3611  0D68  319F  27C1  318D   	fcall	_FLASH_ReadWord
  3612  0D6B  082A               	movf	?_FLASH_ReadWord+1,w
  3613  0D6C  0023               	movlb	3	; select bank3
  3614  0D6D  00DD               	movwf	((main@u16CalBuffer+1)^(0+384)+4)
  3615  0D6E  0020               	movlb	0	; select bank0
  3616  0D6F  0829               	movf	?_FLASH_ReadWord,w
  3617  0D70  0023               	movlb	3	; select bank3
  3618  0D71  00DC               	movwf	(main@u16CalBuffer^(0+384)+4)
  3619                           
  3620                           ;main.c: 163:     u16CalBuffer[3] = FLASH_ReadWord(0x1FE0 +3);
  3621  0D72  30E3               	movlw	227
  3622  0D73  0020               	movlb	0	; select bank0
  3623  0D74  00A9               	movwf	FLASH_ReadWord@flashAddr
  3624  0D75  301F               	movlw	31
  3625  0D76  00AA               	movwf	FLASH_ReadWord@flashAddr+1
  3626  0D77  319F  27C1  318D   	fcall	_FLASH_ReadWord
  3627  0D7A  082A               	movf	?_FLASH_ReadWord+1,w
  3628  0D7B  0023               	movlb	3	; select bank3
  3629  0D7C  00DF               	movwf	((main@u16CalBuffer+1)^(0+384)+6)
  3630  0D7D  0020               	movlb	0	; select bank0
  3631  0D7E  0829               	movf	?_FLASH_ReadWord,w
  3632  0D7F  0023               	movlb	3	; select bank3
  3633  0D80  00DE               	movwf	(main@u16CalBuffer^(0+384)+6)
  3634                           
  3635                           ;main.c: 166:     if((0x3FFFU == u16CalBuffer[0]) || (0x3400U == u16CalBuffer[0]))
  3636  0D81  0A58               	incf	main@u16CalBuffer^(0+384),w
  3637  0D82  303F               	movlw	63
  3638  0D83  1903               	skipnz
  3639  0D84  0659               	xorwf	(main@u16CalBuffer+1)^(0+384),w
  3640  0D85  1903               	btfsc	3,2
  3641  0D86  2D8C               	goto	l6127
  3642  0D87  3034               	movlw	52
  3643  0D88  0659               	xorwf	(main@u16CalBuffer+1)^(0+384),w
  3644  0D89  0458               	iorwf	main@u16CalBuffer^(0+384),w
  3645  0D8A  1D03               	btfss	3,2
  3646  0D8B  2D8E               	goto	l6129
  3647  0D8C                     l6127:
  3648                           
  3649                           ;main.c: 167:     {;main.c: 168:         u16CalBuffer[0] = 0;
  3650  0D8C  01D8               	clrf	main@u16CalBuffer^(0+384)
  3651  0D8D  01D9               	clrf	(main@u16CalBuffer+1)^(0+384)
  3652  0D8E                     l6129:
  3653                           
  3654                           ;main.c: 170:     if((0x3FFFU == u16CalBuffer[2]) || (0x3400U == u16CalBuffer[2]))
  3655  0D8E  0A5C               	incf	(main@u16CalBuffer^(0+384)+4),w
  3656  0D8F  303F               	movlw	63
  3657  0D90  1903               	skipnz
  3658  0D91  065D               	xorwf	((main@u16CalBuffer+1)^(0+384)+4),w
  3659  0D92  1903               	btfsc	3,2
  3660  0D93  2D99               	goto	l6133
  3661  0D94  3034               	movlw	52
  3662  0D95  065D               	xorwf	((main@u16CalBuffer+1)^(0+384)+4),w
  3663  0D96  045C               	iorwf	(main@u16CalBuffer^(0+384)+4),w
  3664  0D97  1D03               	btfss	3,2
  3665  0D98  2D9D               	goto	l6135
  3666  0D99                     l6133:
  3667                           
  3668                           ;main.c: 171:     {;main.c: 172:         u16CalBuffer[2] = 400;
  3669  0D99  3090               	movlw	144
  3670  0D9A  00DC               	movwf	(main@u16CalBuffer^(0+384)+4)
  3671  0D9B  3001               	movlw	1
  3672  0D9C  00DD               	movwf	(main@u16CalBuffer^(0+384)+5)
  3673  0D9D                     l6135:
  3674                           
  3675                           ;main.c: 174:     if((0x3FFFU == u16CalBuffer[1]) || (0x3400U == u16CalBuffer[1]))
  3676  0D9D  0A5A               	incf	(main@u16CalBuffer^(0+384)+2),w
  3677  0D9E  303F               	movlw	63
  3678  0D9F  1903               	skipnz
  3679  0DA0  065B               	xorwf	((main@u16CalBuffer+1)^(0+384)+2),w
  3680  0DA1  1903               	btfsc	3,2
  3681  0DA2  2DA8               	goto	l6139
  3682  0DA3  3034               	movlw	52
  3683  0DA4  065B               	xorwf	((main@u16CalBuffer+1)^(0+384)+2),w
  3684  0DA5  045A               	iorwf	(main@u16CalBuffer^(0+384)+2),w
  3685  0DA6  1D03               	btfss	3,2
  3686  0DA7  2DAC               	goto	l6141
  3687  0DA8                     l6139:
  3688                           
  3689                           ;main.c: 175:     {;main.c: 176:         u16CalBuffer[1] = 900;
  3690  0DA8  3084               	movlw	132
  3691  0DA9  00DA               	movwf	(main@u16CalBuffer^(0+384)+2)
  3692  0DAA  3003               	movlw	3
  3693  0DAB  00DB               	movwf	(main@u16CalBuffer^(0+384)+3)
  3694  0DAC                     l6141:
  3695                           
  3696                           ;main.c: 178:     if((0x3FFFU == u16CalBuffer[3]) || (0x3400U == u16CalBuffer[3]))
  3697  0DAC  0A5E               	incf	(main@u16CalBuffer^(0+384)+6),w
  3698  0DAD  303F               	movlw	63
  3699  0DAE  1903               	skipnz
  3700  0DAF  065F               	xorwf	((main@u16CalBuffer+1)^(0+384)+6),w
  3701  0DB0  1903               	btfsc	3,2
  3702  0DB1  2DB7               	goto	l6145
  3703  0DB2  3034               	movlw	52
  3704  0DB3  065F               	xorwf	((main@u16CalBuffer+1)^(0+384)+6),w
  3705  0DB4  045E               	iorwf	(main@u16CalBuffer^(0+384)+6),w
  3706  0DB5  1D03               	btfss	3,2
  3707  0DB6  2DBB               	goto	l6147
  3708  0DB7                     l6145:
  3709                           
  3710                           ;main.c: 179:     {;main.c: 180:         u16CalBuffer[3] = 1800;
  3711  0DB7  3008               	movlw	8
  3712  0DB8  00DE               	movwf	(main@u16CalBuffer^(0+384)+6)
  3713  0DB9  3007               	movlw	7
  3714  0DBA  00DF               	movwf	(main@u16CalBuffer^(0+384)+7)
  3715  0DBB                     l6147:
  3716                           
  3717                           ;main.c: 188:     InitModbusSlave(1U);
  3718  0DBB  3001               	movlw	1
  3719  0DBC  319E  26E5  318D   	fcall	_InitModbusSlave
  3720                           
  3721                           ;main.c: 189:     _delay((unsigned long)((10)*(8000000/4000.0)));
  3722  0DBF  301A               	movlw	26
  3723  0DC0  0020               	movlb	0	; select bank0
  3724  0DC1  00D0               	movwf	??_main
  3725  0DC2  30F8               	movlw	248
  3726  0DC3                     u6087:
  3727  0DC3  0B89               	decfsz	9,f
  3728  0DC4  2DC3               	goto	u6087
  3729  0DC5  0BD0               	decfsz	??_main,f
  3730  0DC6  2DC3               	goto	u6087
  3731  0DC7  0000               	nop
  3732                           
  3733                           ;main.c: 191:     (INTCONbits.GIE = 1);
  3734  0DC8  178B               	bsf	11,7	;volatile
  3735                           
  3736                           ;main.c: 194:     (INTCONbits.PEIE = 1);
  3737  0DC9  170B               	bsf	11,6	;volatile
  3738  0DCA                     l881:	
  3739                           ;main.c: 201:     while (1)
  3740                           
  3741  0DCA  0064               	clrwdt	;# 
  3742                           
  3743                           ;main.c: 206:         fTdVoltage = MCP3422_ReadVoltage(0x80);
  3744  0DCB  3080               	movlw	128
  3745  0DCC  3193  2306  318D   	fcall	_MCP3422_ReadVoltage
  3746  0DCF  0840               	movf	(?_MCP3422_ReadVoltage+3)^(0+128),w
  3747  0DD0  0023               	movlb	3	; select bank3
  3748  0DD1  00EB               	movwf	(main@fTdVoltage+3)^(0+384)
  3749  0DD2  0021               	movlb	1	; select bank1
  3750  0DD3  083F               	movf	(?_MCP3422_ReadVoltage+2)^(0+128),w
  3751  0DD4  0023               	movlb	3	; select bank3
  3752  0DD5  00EA               	movwf	(main@fTdVoltage+2)^(0+384)
  3753  0DD6  0021               	movlb	1	; select bank1
  3754  0DD7  083E               	movf	(?_MCP3422_ReadVoltage+1)^(0+128),w
  3755  0DD8  0023               	movlb	3	; select bank3
  3756  0DD9  00E9               	movwf	(main@fTdVoltage+1)^(0+384)
  3757  0DDA  0021               	movlb	1	; select bank1
  3758  0DDB  083D               	movf	?_MCP3422_ReadVoltage^(0+128),w
  3759  0DDC  0023               	movlb	3	; select bank3
  3760  0DDD  00E8               	movwf	main@fTdVoltage^(0+384)
  3761                           
  3762                           ;main.c: 207:         fNtcVoltage = MCP3422_ReadVoltage(0xA0);
  3763  0DDE  30A0               	movlw	160
  3764  0DDF  3193  2306  318D   	fcall	_MCP3422_ReadVoltage
  3765  0DE2  0840               	movf	(?_MCP3422_ReadVoltage+3)^(0+128),w
  3766  0DE3  0023               	movlb	3	; select bank3
  3767  0DE4  00D7               	movwf	(main@fNtcVoltage+3)^(0+384)
  3768  0DE5  0021               	movlb	1	; select bank1
  3769  0DE6  083F               	movf	(?_MCP3422_ReadVoltage+2)^(0+128),w
  3770  0DE7  0023               	movlb	3	; select bank3
  3771  0DE8  00D6               	movwf	(main@fNtcVoltage+2)^(0+384)
  3772  0DE9  0021               	movlb	1	; select bank1
  3773  0DEA  083E               	movf	(?_MCP3422_ReadVoltage+1)^(0+128),w
  3774  0DEB  0023               	movlb	3	; select bank3
  3775  0DEC  00D5               	movwf	(main@fNtcVoltage+1)^(0+384)
  3776  0DED  0021               	movlb	1	; select bank1
  3777  0DEE  083D               	movf	?_MCP3422_ReadVoltage^(0+128),w
  3778  0DEF  0023               	movlb	3	; select bank3
  3779  0DF0  00D4               	movwf	main@fNtcVoltage^(0+384)
  3780  0DF1  1003               	clrc
  3781  0DF2  0022               	movlb	2	; select bank2
  3782  0DF3  1F0E               	btfss	14,6	;volatile
  3783  0DF4  1403               	setc
  3784  0DF5  1C03               	btfss	3,0
  3785  0DF6  2DFA               	goto	u5950
  3786  0DF7  0022               	movlb	2	; select bank2
  3787  0DF8  170E               	bsf	14,6	;volatile
  3788  0DF9  2DFC               	goto	l6161
  3789  0DFA                     u5950:
  3790  0DFA  0022               	movlb	2	; select bank2
  3791  0DFB  130E               	bcf	14,6	;volatile
  3792  0DFC                     l6161:
  3793                           
  3794                           ;main.c: 209:         get_ntc_temperature(fNtcVoltage);
  3795  0DFC  0023               	movlb	3	; select bank3
  3796  0DFD  0857               	movf	(main@fNtcVoltage+3)^(0+384),w
  3797  0DFE  0021               	movlb	1	; select bank1
  3798  0DFF  00E6               	movwf	(get_ntc_temperature@adcVoltage+3)^(0+128)
  3799  0E00  0023               	movlb	3	; select bank3
  3800  0E01  0856               	movf	(main@fNtcVoltage+2)^(0+384),w
  3801  0E02  0021               	movlb	1	; select bank1
  3802  0E03  00E5               	movwf	(get_ntc_temperature@adcVoltage+2)^(0+128)
  3803  0E04  0023               	movlb	3	; select bank3
  3804  0E05  0855               	movf	(main@fNtcVoltage+1)^(0+384),w
  3805  0E06  0021               	movlb	1	; select bank1
  3806  0E07  00E4               	movwf	(get_ntc_temperature@adcVoltage+1)^(0+128)
  3807  0E08  0023               	movlb	3	; select bank3
  3808  0E09  0854               	movf	main@fNtcVoltage^(0+384),w
  3809  0E0A  0021               	movlb	1	; select bank1
  3810  0E0B  00E3               	movwf	get_ntc_temperature@adcVoltage^(0+128)
  3811  0E0C  3188  20E7  318D   	fcall	_get_ntc_temperature
  3812                           
  3813                           ;main.c: 211:         if((modbusSlaveData.ModbusHoldingRegister[4U] == 9588U) && (bCalMo
      +                          de == 0))
  3814  0E0F  3074               	movlw	116
  3815  0E10  0628               	xorwf	(_modbusSlaveData^(0+384)+8),w	;volatile
  3816  0E11  3025               	movlw	37
  3817  0E12  1903               	skipnz
  3818  0E13  0629               	xorwf	((_modbusSlaveData+1)^(0+384)+8),w	;volatile
  3819  0E14  1D03               	btfss	3,2
  3820  0E15  2E20               	goto	l6169
  3821  0E16  0851               	movf	_bCalMode^(0+384),w
  3822  0E17  1D03               	btfss	3,2
  3823  0E18  2E20               	goto	l6169
  3824                           
  3825                           ;main.c: 212:         {;main.c: 213:             modbusSlaveData.ModbusHoldingRegister[4
      +                          U] = 1U;
  3826  0E19  3000               	movlw	0
  3827  0E1A  00A9               	movwf	((_modbusSlaveData+1)^(0+384)+8)	;volatile
  3828  0E1B  3001               	movlw	1
  3829  0E1C  00A8               	movwf	(_modbusSlaveData^(0+384)+8)	;volatile
  3830                           
  3831                           ;main.c: 215:             bCalMode = 1;
  3832  0E1D  01D1               	clrf	_bCalMode^(0+384)
  3833  0E1E  0AD1               	incf	_bCalMode^(0+384),f
  3834                           
  3835                           ;main.c: 216:         }
  3836  0E1F  2E9F               	goto	l6207
  3837  0E20                     l6169:
  3838  0E20  3019               	movlw	25
  3839  0E21  0628               	xorwf	(_modbusSlaveData^(0+384)+8),w	;volatile
  3840  0E22  3012               	movlw	18
  3841  0E23  1903               	skipnz
  3842  0E24  0629               	xorwf	((_modbusSlaveData+1)^(0+384)+8),w	;volatile
  3843  0E25  1D03               	btfss	3,2
  3844  0E26  2E48               	goto	l886
  3845  0E27  0351               	decf	_bCalMode^(0+384),w
  3846  0E28  1D03               	btfss	3,2
  3847  0E29  2E48               	goto	l886
  3848                           
  3849                           ;main.c: 218:         {;main.c: 219:             modbusSlaveData.ModbusHoldingRegister[4
      +                          U] = 0U;
  3850  0E2A  01A8               	clrf	(_modbusSlaveData^(0+384)+8)	;volatile
  3851  0E2B  01A9               	clrf	((_modbusSlaveData+1)^(0+384)+8)	;volatile
  3852                           
  3853                           ;main.c: 220:             (INTCONbits.GIE = 0);
  3854  0E2C  138B               	bcf	11,7	;volatile
  3855                           
  3856                           ;main.c: 221:             (INTCONbits.PEIE = 0);
  3857  0E2D  130B               	bcf	11,6	;volatile
  3858                           
  3859                           ;main.c: 222:             FLASH_WriteBlock(0x1FE0,&u16CalBuffer);
  3860  0E2E  30E0               	movlw	224
  3861  0E2F  0020               	movlb	0	; select bank0
  3862  0E30  00AC               	movwf	FLASH_WriteBlock@writeAddr
  3863  0E31  301F               	movlw	31
  3864  0E32  00AD               	movwf	FLASH_WriteBlock@writeAddr+1
  3865  0E33  30D8               	movlw	(low (main@u16CalBuffer| (0+256)))& (0+255)
  3866  0E34  00D0               	movwf	??_main
  3867  0E35  0850               	movf	??_main,w
  3868  0E36  00AE               	movwf	FLASH_WriteBlock@flashWordArray
  3869  0E37  3192  22A0  318D   	fcall	_FLASH_WriteBlock
  3870                           
  3871                           ;main.c: 223:             _delay((unsigned long)((50)*(8000000/4000.0)));
  3872  0E3A  3082               	movlw	130
  3873  0E3B  0020               	movlb	0	; select bank0
  3874  0E3C  00D0               	movwf	??_main
  3875  0E3D  30DD               	movlw	221
  3876  0E3E                     u6097:
  3877  0E3E  0B89               	decfsz	9,f
  3878  0E3F  2E3E               	goto	u6097
  3879  0E40  0BD0               	decfsz	??_main,f
  3880  0E41  2E3E               	goto	u6097
  3881  0E42  3200               	nop2
  3882                           
  3883                           ;main.c: 224:             (INTCONbits.GIE = 1);
  3884  0E43  178B               	bsf	11,7	;volatile
  3885                           
  3886                           ;main.c: 225:             (INTCONbits.PEIE = 1);
  3887  0E44  170B               	bsf	11,6	;volatile
  3888                           
  3889                           ;main.c: 226:             bCalMode = 0;
  3890  0E45  0023               	movlb	3	; select bank3
  3891  0E46  01D1               	clrf	_bCalMode^(0+384)
  3892                           
  3893                           ;main.c: 227:         }
  3894  0E47  2E9F               	goto	l6207
  3895  0E48                     l886:	
  3896                           ;main.c: 228:         else
  3897                           
  3898                           
  3899                           ;main.c: 229:         {;main.c: 230:             modbusSlaveData.ModbusHoldingRegister[4
      +                          U] = 1U;
  3900  0E48  3000               	movlw	0
  3901  0E49  00A9               	movwf	((_modbusSlaveData+1)^(0+384)+8)	;volatile
  3902  0E4A  3001               	movlw	1
  3903  0E4B  00A8               	movwf	(_modbusSlaveData^(0+384)+8)	;volatile
  3904                           
  3905                           ;main.c: 231:             if(1 == bCalMode)
  3906  0E4C  0351               	decf	_bCalMode^(0+384),w
  3907  0E4D  1903               	btfsc	3,2
  3908  0E4E  2E8C               	goto	l6203
  3909  0E4F  2E99               	goto	l6205
  3910  0E50                     l6193:
  3911                           
  3912                           ;main.c: 236:                         u16CalBuffer[0] = modbusSlaveData.ModbusHoldingReg
      +                          ister[6U];
  3913  0E50  082D               	movf	((_modbusSlaveData+1)^(0+384)+12),w	;volatile
  3914  0E51  00D9               	movwf	(main@u16CalBuffer+1)^(0+384)
  3915  0E52  082C               	movf	(_modbusSlaveData^(0+384)+12),w	;volatile
  3916  0E53  00D8               	movwf	main@u16CalBuffer^(0+384)
  3917                           
  3918                           ;main.c: 237:                         u16CalBuffer[1] = (uint16_t)fTdVoltage;
  3919  0E54  086B               	movf	(main@fTdVoltage+3)^(0+384),w
  3920  0E55  0021               	movlb	1	; select bank1
  3921  0E56  00DA               	movwf	(___fltol@f1+3)^(0+128)
  3922  0E57  0023               	movlb	3	; select bank3
  3923  0E58  086A               	movf	(main@fTdVoltage+2)^(0+384),w
  3924  0E59  0021               	movlb	1	; select bank1
  3925  0E5A  00D9               	movwf	(___fltol@f1+2)^(0+128)
  3926  0E5B  0023               	movlb	3	; select bank3
  3927  0E5C  0869               	movf	(main@fTdVoltage+1)^(0+384),w
  3928  0E5D  0021               	movlb	1	; select bank1
  3929  0E5E  00D8               	movwf	(___fltol@f1+1)^(0+128)
  3930  0E5F  0023               	movlb	3	; select bank3
  3931  0E60  0868               	movf	main@fTdVoltage^(0+384),w
  3932  0E61  0021               	movlb	1	; select bank1
  3933  0E62  00D7               	movwf	___fltol@f1^(0+128)
  3934  0E63  3192  223B  318D   	fcall	___fltol
  3935  0E66  0858               	movf	(?___fltol+1)^(0+128),w
  3936  0E67  0023               	movlb	3	; select bank3
  3937  0E68  00DB               	movwf	((main@u16CalBuffer+1)^(0+384)+2)
  3938  0E69  0021               	movlb	1	; select bank1
  3939  0E6A  0857               	movf	?___fltol^(0+128),w
  3940  0E6B  0023               	movlb	3	; select bank3
  3941  0E6C  00DA               	movwf	(main@u16CalBuffer^(0+384)+2)
  3942                           
  3943                           ;main.c: 238:                         break;
  3944  0E6D  2E9F               	goto	l6207
  3945  0E6E                     l6197:
  3946                           
  3947                           ;main.c: 240:                         u16CalBuffer[2] = modbusSlaveData.ModbusHoldingReg
      +                          ister[6U];
  3948  0E6E  082D               	movf	((_modbusSlaveData+1)^(0+384)+12),w	;volatile
  3949  0E6F  00DD               	movwf	((main@u16CalBuffer+1)^(0+384)+4)
  3950  0E70  082C               	movf	(_modbusSlaveData^(0+384)+12),w	;volatile
  3951  0E71  00DC               	movwf	(main@u16CalBuffer^(0+384)+4)
  3952                           
  3953                           ;main.c: 241:                         u16CalBuffer[3] = (uint16_t)fTdVoltage;
  3954  0E72  086B               	movf	(main@fTdVoltage+3)^(0+384),w
  3955  0E73  0021               	movlb	1	; select bank1
  3956  0E74  00DA               	movwf	(___fltol@f1+3)^(0+128)
  3957  0E75  0023               	movlb	3	; select bank3
  3958  0E76  086A               	movf	(main@fTdVoltage+2)^(0+384),w
  3959  0E77  0021               	movlb	1	; select bank1
  3960  0E78  00D9               	movwf	(___fltol@f1+2)^(0+128)
  3961  0E79  0023               	movlb	3	; select bank3
  3962  0E7A  0869               	movf	(main@fTdVoltage+1)^(0+384),w
  3963  0E7B  0021               	movlb	1	; select bank1
  3964  0E7C  00D8               	movwf	(___fltol@f1+1)^(0+128)
  3965  0E7D  0023               	movlb	3	; select bank3
  3966  0E7E  0868               	movf	main@fTdVoltage^(0+384),w
  3967  0E7F  0021               	movlb	1	; select bank1
  3968  0E80  00D7               	movwf	___fltol@f1^(0+128)
  3969  0E81  3192  223B  318D   	fcall	___fltol
  3970  0E84  0858               	movf	(?___fltol+1)^(0+128),w
  3971  0E85  0023               	movlb	3	; select bank3
  3972  0E86  00DF               	movwf	((main@u16CalBuffer+1)^(0+384)+6)
  3973  0E87  0021               	movlb	1	; select bank1
  3974  0E88  0857               	movf	?___fltol^(0+128),w
  3975  0E89  0023               	movlb	3	; select bank3
  3976  0E8A  00DE               	movwf	(main@u16CalBuffer^(0+384)+6)
  3977                           
  3978                           ;main.c: 242:                         break;
  3979  0E8B  2E9F               	goto	l6207
  3980  0E8C                     l6203:
  3981                           
  3982                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3983                           ; Switch size 1, requested type "simple"
  3984                           ; Number of cases is 1, Range of values is 0 to 0
  3985                           ; switch strategies available:
  3986                           ; Name         Instructions Cycles
  3987                           ; simple_byte            4     3 (average)
  3988                           ; direct_byte            8     6 (fixed)
  3989                           ; jumptable            260     6 (fixed)
  3990                           ;	Chosen strategy is simple_byte
  3991  0E8C  082B               	movf	((_modbusSlaveData+1)^(0+384)+10),w	;volatile
  3992  0E8D  3A00               	xorlw	0	; case 0
  3993  0E8E  1903               	skipnz
  3994  0E8F  2E91               	goto	l6373
  3995  0E90  2E9F               	goto	l887
  3996  0E91                     l6373:
  3997                           
  3998                           ; Switch size 1, requested type "simple"
  3999                           ; Number of cases is 2, Range of values is 1 to 2
  4000                           ; switch strategies available:
  4001                           ; Name         Instructions Cycles
  4002                           ; simple_byte            7     4 (average)
  4003                           ; direct_byte           13     9 (fixed)
  4004                           ; jumptable            263     9 (fixed)
  4005                           ;	Chosen strategy is simple_byte
  4006  0E91  082A               	movf	(_modbusSlaveData^(0+384)+10),w	;volatile
  4007  0E92  3A01               	xorlw	1	; case 1
  4008  0E93  1903               	skipnz
  4009  0E94  2E50               	goto	l6193
  4010  0E95  3A03               	xorlw	3	; case 2
  4011  0E96  1903               	skipnz
  4012  0E97  2E6E               	goto	l6197
  4013  0E98  2E9F               	goto	l887
  4014  0E99                     l6205:
  4015                           
  4016                           ;main.c: 249:             {;main.c: 250:                 modbusSlaveData.ModbusHoldingRe
      +                          gister[4U] = 0U;
  4017  0E99  01A8               	clrf	(_modbusSlaveData^(0+384)+8)	;volatile
  4018  0E9A  01A9               	clrf	((_modbusSlaveData+1)^(0+384)+8)	;volatile
  4019                           
  4020                           ;main.c: 251:                 modbusSlaveData.ModbusHoldingRegister[5U] = 0U;
  4021  0E9B  01AA               	clrf	(_modbusSlaveData^(0+384)+10)	;volatile
  4022  0E9C  01AB               	clrf	((_modbusSlaveData+1)^(0+384)+10)	;volatile
  4023                           
  4024                           ;main.c: 252:                 modbusSlaveData.ModbusHoldingRegister[6U] = 0U;
  4025  0E9D  01AC               	clrf	(_modbusSlaveData^(0+384)+12)	;volatile
  4026  0E9E  01AD               	clrf	((_modbusSlaveData+1)^(0+384)+12)	;volatile
  4027  0E9F                     l887:	
  4028                           ;main.c: 255:         }
  4029                           
  4030  0E9F                     l6207:
  4031                           
  4032                           ;main.c: 257:         if(0 == bCalMode)
  4033  0E9F  0851               	movf	_bCalMode^(0+384),w
  4034  0EA0  1D03               	btfss	3,2
  4035  0EA1  2FFD               	goto	l6229
  4036                           
  4037                           ;main.c: 258:         {;main.c: 259:             if((fTdVoltage >= u16CalBuffer[1]) && (
      +                          fTdVoltage <= u16CalBuffer[3]))
  4038  0EA2  086B               	movf	(main@fTdVoltage+3)^(0+384),w
  4039  0EA3  0020               	movlb	0	; select bank0
  4040  0EA4  00BA               	movwf	___flge@ff1+3
  4041  0EA5  0023               	movlb	3	; select bank3
  4042  0EA6  086A               	movf	(main@fTdVoltage+2)^(0+384),w
  4043  0EA7  0020               	movlb	0	; select bank0
  4044  0EA8  00B9               	movwf	___flge@ff1+2
  4045  0EA9  0023               	movlb	3	; select bank3
  4046  0EAA  0869               	movf	(main@fTdVoltage+1)^(0+384),w
  4047  0EAB  0020               	movlb	0	; select bank0
  4048  0EAC  00B8               	movwf	___flge@ff1+1
  4049  0EAD  0023               	movlb	3	; select bank3
  4050  0EAE  0868               	movf	main@fTdVoltage^(0+384),w
  4051  0EAF  0020               	movlb	0	; select bank0
  4052  0EB0  00B7               	movwf	___flge@ff1
  4053  0EB1  0023               	movlb	3	; select bank3
  4054  0EB2  085A               	movf	(main@u16CalBuffer^(0+384)+2),w
  4055  0EB3  0020               	movlb	0	; select bank0
  4056  0EB4  00A9               	movwf	___xxtofl@val
  4057  0EB5  0023               	movlb	3	; select bank3
  4058  0EB6  085B               	movf	((main@u16CalBuffer+1)^(0+384)+2),w
  4059  0EB7  0020               	movlb	0	; select bank0
  4060  0EB8  00AA               	movwf	___xxtofl@val+1
  4061  0EB9  01AB               	clrf	___xxtofl@val+2
  4062  0EBA  01AC               	clrf	___xxtofl@val+3
  4063  0EBB  3000               	movlw	0
  4064  0EBC  3188  2052  318D   	fcall	___xxtofl
  4065  0EBF  082C               	movf	?___xxtofl+3,w
  4066  0EC0  00BE               	movwf	___flge@ff2+3
  4067  0EC1  082B               	movf	?___xxtofl+2,w
  4068  0EC2  00BD               	movwf	___flge@ff2+2
  4069  0EC3  082A               	movf	?___xxtofl+1,w
  4070  0EC4  00BC               	movwf	___flge@ff2+1
  4071  0EC5  0829               	movf	?___xxtofl,w
  4072  0EC6  00BB               	movwf	___flge@ff2
  4073  0EC7  3193  237F  318D   	fcall	___flge
  4074  0ECA  1C03               	btfss	3,0
  4075  0ECB  2F39               	goto	l6215
  4076  0ECC  0023               	movlb	3	; select bank3
  4077  0ECD  085E               	movf	(main@u16CalBuffer^(0+384)+6),w
  4078  0ECE  0020               	movlb	0	; select bank0
  4079  0ECF  00A9               	movwf	___xxtofl@val
  4080  0ED0  0023               	movlb	3	; select bank3
  4081  0ED1  085F               	movf	((main@u16CalBuffer+1)^(0+384)+6),w
  4082  0ED2  0020               	movlb	0	; select bank0
  4083  0ED3  00AA               	movwf	___xxtofl@val+1
  4084  0ED4  01AB               	clrf	___xxtofl@val+2
  4085  0ED5  01AC               	clrf	___xxtofl@val+3
  4086  0ED6  3000               	movlw	0
  4087  0ED7  3188  2052  318D   	fcall	___xxtofl
  4088  0EDA  082C               	movf	?___xxtofl+3,w
  4089  0EDB  00BA               	movwf	___flge@ff1+3
  4090  0EDC  082B               	movf	?___xxtofl+2,w
  4091  0EDD  00B9               	movwf	___flge@ff1+2
  4092  0EDE  082A               	movf	?___xxtofl+1,w
  4093  0EDF  00B8               	movwf	___flge@ff1+1
  4094  0EE0  0829               	movf	?___xxtofl,w
  4095  0EE1  00B7               	movwf	___flge@ff1
  4096  0EE2  0023               	movlb	3	; select bank3
  4097  0EE3  086B               	movf	(main@fTdVoltage+3)^(0+384),w
  4098  0EE4  0020               	movlb	0	; select bank0
  4099  0EE5  00BE               	movwf	___flge@ff2+3
  4100  0EE6  0023               	movlb	3	; select bank3
  4101  0EE7  086A               	movf	(main@fTdVoltage+2)^(0+384),w
  4102  0EE8  0020               	movlb	0	; select bank0
  4103  0EE9  00BD               	movwf	___flge@ff2+2
  4104  0EEA  0023               	movlb	3	; select bank3
  4105  0EEB  0869               	movf	(main@fTdVoltage+1)^(0+384),w
  4106  0EEC  0020               	movlb	0	; select bank0
  4107  0EED  00BC               	movwf	___flge@ff2+1
  4108  0EEE  0023               	movlb	3	; select bank3
  4109  0EEF  0868               	movf	main@fTdVoltage^(0+384),w
  4110  0EF0  0020               	movlb	0	; select bank0
  4111  0EF1  00BB               	movwf	___flge@ff2
  4112  0EF2  3193  237F  318D   	fcall	___flge
  4113  0EF5  1C03               	btfss	3,0
  4114  0EF6  2F39               	goto	l6215
  4115                           
  4116                           ;main.c: 260:             {;main.c: 261:                 u16TdVal = map(fTdVoltage,u16Ca
      +                          lBuffer[1],u16CalBuffer[3],u16CalBuffer[0],u16CalBuffer[2]);
  4117  0EF7  0023               	movlb	3	; select bank3
  4118  0EF8  086B               	movf	(main@fTdVoltage+3)^(0+384),w
  4119  0EF9  0022               	movlb	2	; select bank2
  4120  0EFA  00A3               	movwf	(map@x+3)^(0+256)
  4121  0EFB  0023               	movlb	3	; select bank3
  4122  0EFC  086A               	movf	(main@fTdVoltage+2)^(0+384),w
  4123  0EFD  0022               	movlb	2	; select bank2
  4124  0EFE  00A2               	movwf	(map@x+2)^(0+256)
  4125  0EFF  0023               	movlb	3	; select bank3
  4126  0F00  0869               	movf	(main@fTdVoltage+1)^(0+384),w
  4127  0F01  0022               	movlb	2	; select bank2
  4128  0F02  00A1               	movwf	(map@x+1)^(0+256)
  4129  0F03  0023               	movlb	3	; select bank3
  4130  0F04  0868               	movf	main@fTdVoltage^(0+384),w
  4131  0F05  0022               	movlb	2	; select bank2
  4132  0F06  00A0               	movwf	map@x^(0+256)
  4133  0F07  0023               	movlb	3	; select bank3
  4134  0F08  085A               	movf	(main@u16CalBuffer^(0+384)+2),w
  4135  0F09  0022               	movlb	2	; select bank2
  4136  0F0A  00A4               	movwf	map@in_min^(0+256)
  4137  0F0B  0023               	movlb	3	; select bank3
  4138  0F0C  085B               	movf	((main@u16CalBuffer+1)^(0+384)+2),w
  4139  0F0D  0022               	movlb	2	; select bank2
  4140  0F0E  00A5               	movwf	(map@in_min^(0+256)+1)
  4141  0F0F  01A6               	clrf	(map@in_min^(0+256)+2)
  4142  0F10  01A7               	clrf	(map@in_min^(0+256)+3)
  4143  0F11  0023               	movlb	3	; select bank3
  4144  0F12  085E               	movf	(main@u16CalBuffer^(0+384)+6),w
  4145  0F13  0022               	movlb	2	; select bank2
  4146  0F14  00A8               	movwf	map@in_max^(0+256)
  4147  0F15  0023               	movlb	3	; select bank3
  4148  0F16  085F               	movf	((main@u16CalBuffer+1)^(0+384)+6),w
  4149  0F17  0022               	movlb	2	; select bank2
  4150  0F18  00A9               	movwf	(map@in_max^(0+256)+1)
  4151  0F19  01AA               	clrf	(map@in_max^(0+256)+2)
  4152  0F1A  01AB               	clrf	(map@in_max^(0+256)+3)
  4153  0F1B  0023               	movlb	3	; select bank3
  4154  0F1C  0858               	movf	main@u16CalBuffer^(0+384),w
  4155  0F1D  0022               	movlb	2	; select bank2
  4156  0F1E  00AC               	movwf	map@out_min^(0+256)
  4157  0F1F  0023               	movlb	3	; select bank3
  4158  0F20  0859               	movf	(main@u16CalBuffer+1)^(0+384),w
  4159  0F21  0022               	movlb	2	; select bank2
  4160  0F22  00AD               	movwf	(map@out_min^(0+256)+1)
  4161  0F23  01AE               	clrf	(map@out_min^(0+256)+2)
  4162  0F24  01AF               	clrf	(map@out_min^(0+256)+3)
  4163  0F25  0023               	movlb	3	; select bank3
  4164  0F26  085C               	movf	(main@u16CalBuffer^(0+384)+4),w
  4165  0F27  0022               	movlb	2	; select bank2
  4166  0F28  00B0               	movwf	map@out_max^(0+256)
  4167  0F29  0023               	movlb	3	; select bank3
  4168  0F2A  085D               	movf	((main@u16CalBuffer+1)^(0+384)+4),w
  4169  0F2B  0022               	movlb	2	; select bank2
  4170  0F2C  00B1               	movwf	(map@out_max^(0+256)+1)
  4171  0F2D  01B2               	clrf	(map@out_max^(0+256)+2)
  4172  0F2E  01B3               	clrf	(map@out_max^(0+256)+3)
  4173  0F2F  3193  23FA  318D   	fcall	_map
  4174  0F32  0821               	movf	(?_map+1)^(0+256),w
  4175  0F33  0023               	movlb	3	; select bank3
  4176  0F34  00D3               	movwf	(main@u16TdVal+1)^(0+384)
  4177  0F35  0022               	movlb	2	; select bank2
  4178  0F36  0820               	movf	?_map^(0+256),w
  4179  0F37  0023               	movlb	3	; select bank3
  4180  0F38  2F98               	goto	L1
  4181  0F39                     l6215:	
  4182                           ;main.c: 262:             }
  4183                           
  4184                           
  4185                           ;main.c: 264:             {;main.c: 265:                 if(fTdVoltage < u16CalBuffer[1]
      +                          )
  4186  0F39  0023               	movlb	3	; select bank3
  4187  0F3A  086B               	movf	(main@fTdVoltage+3)^(0+384),w
  4188  0F3B  0020               	movlb	0	; select bank0
  4189  0F3C  00BA               	movwf	___flge@ff1+3
  4190  0F3D  0023               	movlb	3	; select bank3
  4191  0F3E  086A               	movf	(main@fTdVoltage+2)^(0+384),w
  4192  0F3F  0020               	movlb	0	; select bank0
  4193  0F40  00B9               	movwf	___flge@ff1+2
  4194  0F41  0023               	movlb	3	; select bank3
  4195  0F42  0869               	movf	(main@fTdVoltage+1)^(0+384),w
  4196  0F43  0020               	movlb	0	; select bank0
  4197  0F44  00B8               	movwf	___flge@ff1+1
  4198  0F45  0023               	movlb	3	; select bank3
  4199  0F46  0868               	movf	main@fTdVoltage^(0+384),w
  4200  0F47  0020               	movlb	0	; select bank0
  4201  0F48  00B7               	movwf	___flge@ff1
  4202  0F49  0023               	movlb	3	; select bank3
  4203  0F4A  085A               	movf	(main@u16CalBuffer^(0+384)+2),w
  4204  0F4B  0020               	movlb	0	; select bank0
  4205  0F4C  00A9               	movwf	___xxtofl@val
  4206  0F4D  0023               	movlb	3	; select bank3
  4207  0F4E  085B               	movf	((main@u16CalBuffer+1)^(0+384)+2),w
  4208  0F4F  0020               	movlb	0	; select bank0
  4209  0F50  00AA               	movwf	___xxtofl@val+1
  4210  0F51  01AB               	clrf	___xxtofl@val+2
  4211  0F52  01AC               	clrf	___xxtofl@val+3
  4212  0F53  3000               	movlw	0
  4213  0F54  3188  2052  318D   	fcall	___xxtofl
  4214  0F57  082C               	movf	?___xxtofl+3,w
  4215  0F58  00BE               	movwf	___flge@ff2+3
  4216  0F59  082B               	movf	?___xxtofl+2,w
  4217  0F5A  00BD               	movwf	___flge@ff2+2
  4218  0F5B  082A               	movf	?___xxtofl+1,w
  4219  0F5C  00BC               	movwf	___flge@ff2+1
  4220  0F5D  0829               	movf	?___xxtofl,w
  4221  0F5E  00BB               	movwf	___flge@ff2
  4222  0F5F  3193  237F  318D   	fcall	___flge
  4223  0F62  1803               	btfsc	3,0
  4224  0F63  2F69               	goto	l6219
  4225                           
  4226                           ;main.c: 266:                 {;main.c: 267:                     u16TdVal = u16CalBuffer
      +                          [0];
  4227  0F64  0023               	movlb	3	; select bank3
  4228  0F65  0859               	movf	(main@u16CalBuffer+1)^(0+384),w
  4229  0F66  00D3               	movwf	(main@u16TdVal+1)^(0+384)
  4230  0F67  0858               	movf	main@u16CalBuffer^(0+384),w
  4231  0F68  2F98               	goto	L1
  4232  0F69                     l6219:	
  4233                           ;main.c: 268:                 }
  4234                           
  4235  0F69  0023               	movlb	3	; select bank3
  4236  0F6A  085E               	movf	(main@u16CalBuffer^(0+384)+6),w
  4237  0F6B  0020               	movlb	0	; select bank0
  4238  0F6C  00A9               	movwf	___xxtofl@val
  4239  0F6D  0023               	movlb	3	; select bank3
  4240  0F6E  085F               	movf	((main@u16CalBuffer+1)^(0+384)+6),w
  4241  0F6F  0020               	movlb	0	; select bank0
  4242  0F70  00AA               	movwf	___xxtofl@val+1
  4243  0F71  01AB               	clrf	___xxtofl@val+2
  4244  0F72  01AC               	clrf	___xxtofl@val+3
  4245  0F73  3000               	movlw	0
  4246  0F74  3188  2052  318D   	fcall	___xxtofl
  4247  0F77  082C               	movf	?___xxtofl+3,w
  4248  0F78  00BA               	movwf	___flge@ff1+3
  4249  0F79  082B               	movf	?___xxtofl+2,w
  4250  0F7A  00B9               	movwf	___flge@ff1+2
  4251  0F7B  082A               	movf	?___xxtofl+1,w
  4252  0F7C  00B8               	movwf	___flge@ff1+1
  4253  0F7D  0829               	movf	?___xxtofl,w
  4254  0F7E  00B7               	movwf	___flge@ff1
  4255  0F7F  0023               	movlb	3	; select bank3
  4256  0F80  086B               	movf	(main@fTdVoltage+3)^(0+384),w
  4257  0F81  0020               	movlb	0	; select bank0
  4258  0F82  00BE               	movwf	___flge@ff2+3
  4259  0F83  0023               	movlb	3	; select bank3
  4260  0F84  086A               	movf	(main@fTdVoltage+2)^(0+384),w
  4261  0F85  0020               	movlb	0	; select bank0
  4262  0F86  00BD               	movwf	___flge@ff2+2
  4263  0F87  0023               	movlb	3	; select bank3
  4264  0F88  0869               	movf	(main@fTdVoltage+1)^(0+384),w
  4265  0F89  0020               	movlb	0	; select bank0
  4266  0F8A  00BC               	movwf	___flge@ff2+1
  4267  0F8B  0023               	movlb	3	; select bank3
  4268  0F8C  0868               	movf	main@fTdVoltage^(0+384),w
  4269  0F8D  0020               	movlb	0	; select bank0
  4270  0F8E  00BB               	movwf	___flge@ff2
  4271  0F8F  3193  237F  318D   	fcall	___flge
  4272  0F92  1803               	btfsc	3,0
  4273  0F93  2F99               	goto	l897
  4274                           
  4275                           ;main.c: 270:                 {;main.c: 271:                     u16TdVal = u16CalBuffer
      +                          [2];
  4276  0F94  0023               	movlb	3	; select bank3
  4277  0F95  085D               	movf	((main@u16CalBuffer+1)^(0+384)+4),w
  4278  0F96  00D3               	movwf	(main@u16TdVal+1)^(0+384)
  4279  0F97  085C               	movf	(main@u16CalBuffer^(0+384)+4),w
  4280  0F98                     L1:
  4281  0F98  00D2               	movwf	main@u16TdVal^(0+384)
  4282  0F99                     l897:	
  4283                           ;main.c: 273:             }
  4284                           
  4285                           
  4286                           ;main.c: 276:             modbusSlaveData.ModbusHoldingRegister[0U] = u16TdVal;
  4287  0F99  0023               	movlb	3	; select bank3
  4288  0F9A  0853               	movf	(main@u16TdVal+1)^(0+384),w
  4289  0F9B  00A1               	movwf	(_modbusSlaveData+1)^(0+384)	;volatile
  4290  0F9C  0852               	movf	main@u16TdVal^(0+384),w
  4291  0F9D  00A0               	movwf	_modbusSlaveData^(0+384)	;volatile
  4292  0F9E                     L2:
  4293                           
  4294                           ;main.c: 277:             modbusSlaveData.ModbusHoldingRegister[1U] = (uint16_t)fTdVolta
      +                          ge;
  4295  0F9E  086B               	movf	(main@fTdVoltage+3)^(0+384),w
  4296  0F9F  0021               	movlb	1	; select bank1
  4297  0FA0  00DA               	movwf	(___fltol@f1+3)^(0+128)
  4298  0FA1  0023               	movlb	3	; select bank3
  4299  0FA2  086A               	movf	(main@fTdVoltage+2)^(0+384),w
  4300  0FA3  0021               	movlb	1	; select bank1
  4301  0FA4  00D9               	movwf	(___fltol@f1+2)^(0+128)
  4302  0FA5  0023               	movlb	3	; select bank3
  4303  0FA6  0869               	movf	(main@fTdVoltage+1)^(0+384),w
  4304  0FA7  0021               	movlb	1	; select bank1
  4305  0FA8  00D8               	movwf	(___fltol@f1+1)^(0+128)
  4306  0FA9  0023               	movlb	3	; select bank3
  4307  0FAA  0868               	movf	main@fTdVoltage^(0+384),w
  4308  0FAB  0021               	movlb	1	; select bank1
  4309  0FAC  00D7               	movwf	___fltol@f1^(0+128)
  4310  0FAD  3192  223B  318D   	fcall	___fltol
  4311  0FB0  0858               	movf	(?___fltol+1)^(0+128),w
  4312  0FB1  0023               	movlb	3	; select bank3
  4313  0FB2  00A3               	movwf	((_modbusSlaveData+1)^(0+384)+2)	;volatile
  4314  0FB3  0021               	movlb	1	; select bank1
  4315  0FB4  0857               	movf	?___fltol^(0+128),w
  4316  0FB5  0023               	movlb	3	; select bank3
  4317  0FB6  00A2               	movwf	(_modbusSlaveData^(0+384)+2)	;volatile
  4318                           
  4319                           ;main.c: 278:             modbusSlaveData.ModbusHoldingRegister[2U] = (uint16_t)(tempNTC
      +                           * 100.0f);
  4320  0FB7  0850               	movf	(_tempNTC+3)^(0+384),w
  4321  0FB8  0021               	movlb	1	; select bank1
  4322  0FB9  00AF               	movwf	(___flmul@a+3)^(0+128)
  4323  0FBA  0023               	movlb	3	; select bank3
  4324  0FBB  084F               	movf	(_tempNTC+2)^(0+384),w
  4325  0FBC  0021               	movlb	1	; select bank1
  4326  0FBD  00AE               	movwf	(___flmul@a+2)^(0+128)
  4327  0FBE  0023               	movlb	3	; select bank3
  4328  0FBF  084E               	movf	(_tempNTC+1)^(0+384),w
  4329  0FC0  0021               	movlb	1	; select bank1
  4330  0FC1  00AD               	movwf	(___flmul@a+1)^(0+128)
  4331  0FC2  0023               	movlb	3	; select bank3
  4332  0FC3  084D               	movf	_tempNTC^(0+384),w
  4333  0FC4  0021               	movlb	1	; select bank1
  4334  0FC5  00AC               	movwf	___flmul@a^(0+128)
  4335  0FC6  3042               	movlw	66
  4336  0FC7  00AB               	movwf	(___flmul@b+3)^(0+128)
  4337  0FC8  30C8               	movlw	200
  4338  0FC9  00AA               	movwf	(___flmul@b+2)^(0+128)
  4339  0FCA  3000               	movlw	0
  4340  0FCB  00A9               	movwf	(___flmul@b+1)^(0+128)
  4341  0FCC  3000               	movlw	0
  4342  0FCD  00A8               	movwf	___flmul@b^(0+128)
  4343  0FCE  318A  226F  318D   	fcall	___flmul
  4344  0FD1  082B               	movf	(?___flmul+3)^(0+128),w
  4345  0FD2  00DA               	movwf	(___fltol@f1+3)^(0+128)
  4346  0FD3  082A               	movf	(?___flmul+2)^(0+128),w
  4347  0FD4  00D9               	movwf	(___fltol@f1+2)^(0+128)
  4348  0FD5  0829               	movf	(?___flmul+1)^(0+128),w
  4349  0FD6  00D8               	movwf	(___fltol@f1+1)^(0+128)
  4350  0FD7  0828               	movf	?___flmul^(0+128),w
  4351  0FD8  00D7               	movwf	___fltol@f1^(0+128)
  4352  0FD9  3192  223B  318D   	fcall	___fltol
  4353  0FDC  0858               	movf	(?___fltol+1)^(0+128),w
  4354  0FDD  0023               	movlb	3	; select bank3
  4355  0FDE  00A5               	movwf	((_modbusSlaveData+1)^(0+384)+4)	;volatile
  4356  0FDF  0021               	movlb	1	; select bank1
  4357  0FE0  0857               	movf	?___fltol^(0+128),w
  4358  0FE1  0023               	movlb	3	; select bank3
  4359  0FE2  00A4               	movwf	(_modbusSlaveData^(0+384)+4)	;volatile
  4360                           
  4361                           ;main.c: 279:             modbusSlaveData.ModbusHoldingRegister[3U] = (uint16_t)fNtcVolt
      +                          age;
  4362  0FE3  0857               	movf	(main@fNtcVoltage+3)^(0+384),w
  4363  0FE4  0021               	movlb	1	; select bank1
  4364  0FE5  00DA               	movwf	(___fltol@f1+3)^(0+128)
  4365  0FE6  0023               	movlb	3	; select bank3
  4366  0FE7  0856               	movf	(main@fNtcVoltage+2)^(0+384),w
  4367  0FE8  0021               	movlb	1	; select bank1
  4368  0FE9  00D9               	movwf	(___fltol@f1+2)^(0+128)
  4369  0FEA  0023               	movlb	3	; select bank3
  4370  0FEB  0855               	movf	(main@fNtcVoltage+1)^(0+384),w
  4371  0FEC  0021               	movlb	1	; select bank1
  4372  0FED  00D8               	movwf	(___fltol@f1+1)^(0+128)
  4373  0FEE  0023               	movlb	3	; select bank3
  4374  0FEF  0854               	movf	main@fNtcVoltage^(0+384),w
  4375  0FF0  0021               	movlb	1	; select bank1
  4376  0FF1  00D7               	movwf	___fltol@f1^(0+128)
  4377  0FF2  3192  223B  318D   	fcall	___fltol
  4378  0FF5  0858               	movf	(?___fltol+1)^(0+128),w
  4379  0FF6  0023               	movlb	3	; select bank3
  4380  0FF7  00A7               	movwf	((_modbusSlaveData+1)^(0+384)+6)	;volatile
  4381  0FF8  0021               	movlb	1	; select bank1
  4382  0FF9  0857               	movf	?___fltol^(0+128),w
  4383  0FFA  0023               	movlb	3	; select bank3
  4384  0FFB  00A6               	movwf	(_modbusSlaveData^(0+384)+6)	;volatile
  4385                           
  4386                           ;main.c: 286:         }
  4387  0FFC  2DCA               	goto	l881
  4388  0FFD                     l6229:
  4389                           
  4390                           ;main.c: 288:         {;main.c: 289:             modbusSlaveData.ModbusHoldingRegister[0
      +                          U] = 0U;
  4391  0FFD  01A0               	clrf	_modbusSlaveData^(0+384)	;volatile
  4392  0FFE  01A1               	clrf	(_modbusSlaveData+1)^(0+384)	;volatile
  4393  0FFF  2F9E               	goto	L2
  4394  1000                     __end_of_main:	
  4395                           ;main.c: 291:             modbusSlaveData.ModbusHoldingRegister[2U] = (uint16_t)(tempNTC
      +                           * 100.0f);
  4396                           
  4397                           ;main.c: 290:             modbusSlaveData.ModbusHoldingRegister[1U] = (uint16_t)fTdVolta
      +                          ge;
  4398                           
  4399                           
  4400                           	psect	text1
  4401  13FA                     __ptext1:	
  4402 ;; *************** function _map *****************
  4403 ;; Defined at:
  4404 ;;		line 54 in file "main.c"
  4405 ;; Parameters:    Size  Location     Type
  4406 ;;  x               4    0[BANK2 ] float 
  4407 ;;  in_min          4    4[BANK2 ] long 
  4408 ;;  in_max          4    8[BANK2 ] long 
  4409 ;;  out_min         4   12[BANK2 ] long 
  4410 ;;  out_max         4   16[BANK2 ] long 
  4411 ;; Auto vars:     Size  Location     Type
  4412 ;;		None
  4413 ;; Return value:  Size  Location     Type
  4414 ;;                  4    0[BANK2 ] long 
  4415 ;; Registers used:
  4416 ;;		wreg, status,2, status,0, pclath, cstack
  4417 ;; Tracked objects:
  4418 ;;		On entry : 1F/2
  4419 ;;		On exit  : 1F/2
  4420 ;;		Unchanged: 0/0
  4421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4422 ;;      Params:         0       0       0      20       0       0       0       0
  4423 ;;      Locals:         0       0       4       0       0       0       0       0
  4424 ;;      Temps:          0       0       8       0       0       0       0       0
  4425 ;;      Totals:         0       0      12      20       0       0       0       0
  4426 ;;Total ram usage:       32 bytes
  4427 ;; Hardware stack levels used: 1
  4428 ;; Hardware stack levels required when called: 6
  4429 ;; This function calls:
  4430 ;;		___fladd
  4431 ;;		___fldiv
  4432 ;;		___flmul
  4433 ;;		___flsub
  4434 ;;		___fltol
  4435 ;;		___xxtofl
  4436 ;; This function is called by:
  4437 ;;		_main
  4438 ;; This function uses a non-reentrant model
  4439 ;;
  4440                           
  4441  13FA                     _map:	
  4442                           ;psect for function _map
  4443                           
  4444                           
  4445                           ;main.c: 55:   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  4446                           
  4447                           ;incstack = 0
  4448                           ; Regs used in _map: [wreg+status,2+status,0+pclath+cstack]
  4449  13FA  0823               	movf	(map@x+3)^(0+256),w
  4450  13FB  0021               	movlb	1	; select bank1
  4451  13FC  00A7               	movwf	(___flsub@b+3)^(0+128)
  4452  13FD  0022               	movlb	2	; select bank2
  4453  13FE  0822               	movf	(map@x+2)^(0+256),w
  4454  13FF  0021               	movlb	1	; select bank1
  4455  1400  00A6               	movwf	(___flsub@b+2)^(0+128)
  4456  1401  0022               	movlb	2	; select bank2
  4457  1402  0821               	movf	(map@x+1)^(0+256),w
  4458  1403  0021               	movlb	1	; select bank1
  4459  1404  00A5               	movwf	(___flsub@b+1)^(0+128)
  4460  1405  0022               	movlb	2	; select bank2
  4461  1406  0820               	movf	map@x^(0+256),w
  4462  1407  0021               	movlb	1	; select bank1
  4463  1408  00A4               	movwf	___flsub@b^(0+128)
  4464  1409  0022               	movlb	2	; select bank2
  4465  140A  0827               	movf	(map@in_min+3)^(0+256),w
  4466  140B  0020               	movlb	0	; select bank0
  4467  140C  00AC               	movwf	___xxtofl@val+3
  4468  140D  0022               	movlb	2	; select bank2
  4469  140E  0826               	movf	(map@in_min+2)^(0+256),w
  4470  140F  0020               	movlb	0	; select bank0
  4471  1410  00AB               	movwf	___xxtofl@val+2
  4472  1411  0022               	movlb	2	; select bank2
  4473  1412  0825               	movf	(map@in_min+1)^(0+256),w
  4474  1413  0020               	movlb	0	; select bank0
  4475  1414  00AA               	movwf	___xxtofl@val+1
  4476  1415  0022               	movlb	2	; select bank2
  4477  1416  0824               	movf	map@in_min^(0+256),w
  4478  1417  0020               	movlb	0	; select bank0
  4479  1418  00A9               	movwf	___xxtofl@val
  4480  1419  3001               	movlw	1
  4481  141A  3188  2052  3193   	fcall	___xxtofl
  4482  141D  082C               	movf	?___xxtofl+3,w
  4483  141E  0021               	movlb	1	; select bank1
  4484  141F  00A3               	movwf	(___flsub@a+3)^(0+128)
  4485  1420  0020               	movlb	0	; select bank0
  4486  1421  082B               	movf	?___xxtofl+2,w
  4487  1422  0021               	movlb	1	; select bank1
  4488  1423  00A2               	movwf	(___flsub@a+2)^(0+128)
  4489  1424  0020               	movlb	0	; select bank0
  4490  1425  082A               	movf	?___xxtofl+1,w
  4491  1426  0021               	movlb	1	; select bank1
  4492  1427  00A1               	movwf	(___flsub@a+1)^(0+128)
  4493  1428  0020               	movlb	0	; select bank0
  4494  1429  0829               	movf	?___xxtofl,w
  4495  142A  0021               	movlb	1	; select bank1
  4496  142B  00A0               	movwf	___flsub@a^(0+128)
  4497  142C  3191  2186  3193   	fcall	___flsub
  4498  142F  0823               	movf	(?___flsub+3)^(0+128),w
  4499  1430  00AF               	movwf	(___flmul@a+3)^(0+128)
  4500  1431  0822               	movf	(?___flsub+2)^(0+128),w
  4501  1432  00AE               	movwf	(___flmul@a+2)^(0+128)
  4502  1433  0821               	movf	(?___flsub+1)^(0+128),w
  4503  1434  00AD               	movwf	(___flmul@a+1)^(0+128)
  4504  1435  0820               	movf	?___flsub^(0+128),w
  4505  1436  00AC               	movwf	___flmul@a^(0+128)
  4506  1437  0022               	movlb	2	; select bank2
  4507  1438  082C               	movf	map@out_min^(0+256),w
  4508  1439  0230               	subwf	map@out_max^(0+256),w
  4509  143A  0021               	movlb	1	; select bank1
  4510  143B  00E2               	movwf	??_map^(0+128)
  4511  143C  0022               	movlb	2	; select bank2
  4512  143D  082D               	movf	(map@out_min+1)^(0+256),w
  4513  143E  3B31               	subwfb	(map@out_max+1)^(0+256),w
  4514  143F  0021               	movlb	1	; select bank1
  4515  1440  00E3               	movwf	(??_map^(0+128)+1)
  4516  1441  0022               	movlb	2	; select bank2
  4517  1442  082E               	movf	(map@out_min+2)^(0+256),w
  4518  1443  3B32               	subwfb	(map@out_max+2)^(0+256),w
  4519  1444  0021               	movlb	1	; select bank1
  4520  1445  00E4               	movwf	(??_map^(0+128)+2)
  4521  1446  0022               	movlb	2	; select bank2
  4522  1447  082F               	movf	(map@out_min+3)^(0+256),w
  4523  1448  3B33               	subwfb	(map@out_max+3)^(0+256),w
  4524  1449  0021               	movlb	1	; select bank1
  4525  144A  00E5               	movwf	(??_map^(0+128)+3)
  4526  144B  0865               	movf	(??_map+3)^(0+128),w
  4527  144C  0020               	movlb	0	; select bank0
  4528  144D  00AC               	movwf	___xxtofl@val+3
  4529  144E  0021               	movlb	1	; select bank1
  4530  144F  0864               	movf	(??_map+2)^(0+128),w
  4531  1450  0020               	movlb	0	; select bank0
  4532  1451  00AB               	movwf	___xxtofl@val+2
  4533  1452  0021               	movlb	1	; select bank1
  4534  1453  0863               	movf	(??_map+1)^(0+128),w
  4535  1454  0020               	movlb	0	; select bank0
  4536  1455  00AA               	movwf	___xxtofl@val+1
  4537  1456  0021               	movlb	1	; select bank1
  4538  1457  0862               	movf	??_map^(0+128),w
  4539  1458  0020               	movlb	0	; select bank0
  4540  1459  00A9               	movwf	___xxtofl@val
  4541  145A  3001               	movlw	1
  4542  145B  3188  2052  3193   	fcall	___xxtofl
  4543  145E  082C               	movf	?___xxtofl+3,w
  4544  145F  0021               	movlb	1	; select bank1
  4545  1460  00AB               	movwf	(___flmul@b+3)^(0+128)
  4546  1461  0020               	movlb	0	; select bank0
  4547  1462  082B               	movf	?___xxtofl+2,w
  4548  1463  0021               	movlb	1	; select bank1
  4549  1464  00AA               	movwf	(___flmul@b+2)^(0+128)
  4550  1465  0020               	movlb	0	; select bank0
  4551  1466  082A               	movf	?___xxtofl+1,w
  4552  1467  0021               	movlb	1	; select bank1
  4553  1468  00A9               	movwf	(___flmul@b+1)^(0+128)
  4554  1469  0020               	movlb	0	; select bank0
  4555  146A  0829               	movf	?___xxtofl,w
  4556  146B  0021               	movlb	1	; select bank1
  4557  146C  00A8               	movwf	___flmul@b^(0+128)
  4558  146D  318A  226F  3193   	fcall	___flmul
  4559  1470  082B               	movf	(?___flmul+3)^(0+128),w
  4560  1471  00C4               	movwf	(___fldiv@b+3)^(0+128)
  4561  1472  082A               	movf	(?___flmul+2)^(0+128),w
  4562  1473  00C3               	movwf	(___fldiv@b+2)^(0+128)
  4563  1474  0829               	movf	(?___flmul+1)^(0+128),w
  4564  1475  00C2               	movwf	(___fldiv@b+1)^(0+128)
  4565  1476  0828               	movf	?___flmul^(0+128),w
  4566  1477  00C1               	movwf	___fldiv@b^(0+128)
  4567  1478  0022               	movlb	2	; select bank2
  4568  1479  0824               	movf	map@in_min^(0+256),w
  4569  147A  0228               	subwf	map@in_max^(0+256),w
  4570  147B  0021               	movlb	1	; select bank1
  4571  147C  00E6               	movwf	(??_map+4)^(0+128)
  4572  147D  0022               	movlb	2	; select bank2
  4573  147E  0825               	movf	(map@in_min+1)^(0+256),w
  4574  147F  3B29               	subwfb	(map@in_max+1)^(0+256),w
  4575  1480  0021               	movlb	1	; select bank1
  4576  1481  00E7               	movwf	((??_map+4)^(0+128)+1)
  4577  1482  0022               	movlb	2	; select bank2
  4578  1483  0826               	movf	(map@in_min+2)^(0+256),w
  4579  1484  3B2A               	subwfb	(map@in_max+2)^(0+256),w
  4580  1485  0021               	movlb	1	; select bank1
  4581  1486  00E8               	movwf	((??_map+4)^(0+128)+2)
  4582  1487  0022               	movlb	2	; select bank2
  4583  1488  0827               	movf	(map@in_min+3)^(0+256),w
  4584  1489  3B2B               	subwfb	(map@in_max+3)^(0+256),w
  4585  148A  0021               	movlb	1	; select bank1
  4586  148B  00E9               	movwf	((??_map+4)^(0+128)+3)
  4587  148C  0869               	movf	(??_map+7)^(0+128),w
  4588  148D  0020               	movlb	0	; select bank0
  4589  148E  00AC               	movwf	___xxtofl@val+3
  4590  148F  0021               	movlb	1	; select bank1
  4591  1490  0868               	movf	(??_map+6)^(0+128),w
  4592  1491  0020               	movlb	0	; select bank0
  4593  1492  00AB               	movwf	___xxtofl@val+2
  4594  1493  0021               	movlb	1	; select bank1
  4595  1494  0867               	movf	(??_map+5)^(0+128),w
  4596  1495  0020               	movlb	0	; select bank0
  4597  1496  00AA               	movwf	___xxtofl@val+1
  4598  1497  0021               	movlb	1	; select bank1
  4599  1498  0866               	movf	(??_map+4)^(0+128),w
  4600  1499  0020               	movlb	0	; select bank0
  4601  149A  00A9               	movwf	___xxtofl@val
  4602  149B  3001               	movlw	1
  4603  149C  3188  2052  3193   	fcall	___xxtofl
  4604  149F  082C               	movf	?___xxtofl+3,w
  4605  14A0  0021               	movlb	1	; select bank1
  4606  14A1  00C0               	movwf	(___fldiv@a+3)^(0+128)
  4607  14A2  0020               	movlb	0	; select bank0
  4608  14A3  082B               	movf	?___xxtofl+2,w
  4609  14A4  0021               	movlb	1	; select bank1
  4610  14A5  00BF               	movwf	(___fldiv@a+2)^(0+128)
  4611  14A6  0020               	movlb	0	; select bank0
  4612  14A7  082A               	movf	?___xxtofl+1,w
  4613  14A8  0021               	movlb	1	; select bank1
  4614  14A9  00BE               	movwf	(___fldiv@a+1)^(0+128)
  4615  14AA  0020               	movlb	0	; select bank0
  4616  14AB  0829               	movf	?___xxtofl,w
  4617  14AC  0021               	movlb	1	; select bank1
  4618  14AD  00BD               	movwf	___fldiv@a^(0+128)
  4619  14AE  3195  2508  3193   	fcall	___fldiv
  4620  14B1  0840               	movf	(?___fldiv+3)^(0+128),w
  4621  14B2  00ED               	movwf	(_map$2275+3)^(0+128)
  4622  14B3  083F               	movf	(?___fldiv+2)^(0+128),w
  4623  14B4  00EC               	movwf	(_map$2275+2)^(0+128)
  4624  14B5  083E               	movf	(?___fldiv+1)^(0+128),w
  4625  14B6  00EB               	movwf	(_map$2275+1)^(0+128)
  4626  14B7  083D               	movf	?___fldiv^(0+128),w
  4627  14B8  00EA               	movwf	_map$2275^(0+128)
  4628                           
  4629                           ;main.c: 55:   return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  4630  14B9  086D               	movf	(_map$2275+3)^(0+128),w
  4631  14BA  0020               	movlb	0	; select bank0
  4632  14BB  00BE               	movwf	___fladd@a+3
  4633  14BC  0021               	movlb	1	; select bank1
  4634  14BD  086C               	movf	(_map$2275+2)^(0+128),w
  4635  14BE  0020               	movlb	0	; select bank0
  4636  14BF  00BD               	movwf	___fladd@a+2
  4637  14C0  0021               	movlb	1	; select bank1
  4638  14C1  086B               	movf	(_map$2275+1)^(0+128),w
  4639  14C2  0020               	movlb	0	; select bank0
  4640  14C3  00BC               	movwf	___fladd@a+1
  4641  14C4  0021               	movlb	1	; select bank1
  4642  14C5  086A               	movf	_map$2275^(0+128),w
  4643  14C6  0020               	movlb	0	; select bank0
  4644  14C7  00BB               	movwf	___fladd@a
  4645  14C8  0022               	movlb	2	; select bank2
  4646  14C9  082F               	movf	(map@out_min+3)^(0+256),w
  4647  14CA  0020               	movlb	0	; select bank0
  4648  14CB  00AC               	movwf	___xxtofl@val+3
  4649  14CC  0022               	movlb	2	; select bank2
  4650  14CD  082E               	movf	(map@out_min+2)^(0+256),w
  4651  14CE  0020               	movlb	0	; select bank0
  4652  14CF  00AB               	movwf	___xxtofl@val+2
  4653  14D0  0022               	movlb	2	; select bank2
  4654  14D1  082D               	movf	(map@out_min+1)^(0+256),w
  4655  14D2  0020               	movlb	0	; select bank0
  4656  14D3  00AA               	movwf	___xxtofl@val+1
  4657  14D4  0022               	movlb	2	; select bank2
  4658  14D5  082C               	movf	map@out_min^(0+256),w
  4659  14D6  0020               	movlb	0	; select bank0
  4660  14D7  00A9               	movwf	___xxtofl@val
  4661  14D8  3001               	movlw	1
  4662  14D9  3188  2052  3193   	fcall	___xxtofl
  4663  14DC  082C               	movf	?___xxtofl+3,w
  4664  14DD  00BA               	movwf	___fladd@b+3
  4665  14DE  082B               	movf	?___xxtofl+2,w
  4666  14DF  00B9               	movwf	___fladd@b+2
  4667  14E0  082A               	movf	?___xxtofl+1,w
  4668  14E1  00B8               	movwf	___fladd@b+1
  4669  14E2  0829               	movf	?___xxtofl,w
  4670  14E3  00B7               	movwf	___fladd@b
  4671  14E4  3185  25D4  3193   	fcall	___fladd
  4672  14E7  083A               	movf	?___fladd+3,w
  4673  14E8  0021               	movlb	1	; select bank1
  4674  14E9  00DA               	movwf	(___fltol@f1+3)^(0+128)
  4675  14EA  0020               	movlb	0	; select bank0
  4676  14EB  0839               	movf	?___fladd+2,w
  4677  14EC  0021               	movlb	1	; select bank1
  4678  14ED  00D9               	movwf	(___fltol@f1+2)^(0+128)
  4679  14EE  0020               	movlb	0	; select bank0
  4680  14EF  0838               	movf	?___fladd+1,w
  4681  14F0  0021               	movlb	1	; select bank1
  4682  14F1  00D8               	movwf	(___fltol@f1+1)^(0+128)
  4683  14F2  0020               	movlb	0	; select bank0
  4684  14F3  0837               	movf	?___fladd,w
  4685  14F4  0021               	movlb	1	; select bank1
  4686  14F5  00D7               	movwf	___fltol@f1^(0+128)
  4687  14F6  3192  223B         	fcall	___fltol
  4688  14F8  085A               	movf	(?___fltol+3)^(0+128),w
  4689  14F9  0022               	movlb	2	; select bank2
  4690  14FA  00A3               	movwf	(?_map+3)^(0+256)
  4691  14FB  0021               	movlb	1	; select bank1
  4692  14FC  0859               	movf	(?___fltol+2)^(0+128),w
  4693  14FD  0022               	movlb	2	; select bank2
  4694  14FE  00A2               	movwf	(?_map+2)^(0+256)
  4695  14FF  0021               	movlb	1	; select bank1
  4696  1500  0858               	movf	(?___fltol+1)^(0+128),w
  4697  1501  0022               	movlb	2	; select bank2
  4698  1502  00A1               	movwf	(?_map+1)^(0+256)
  4699  1503  0021               	movlb	1	; select bank1
  4700  1504  0857               	movf	?___fltol^(0+128),w
  4701  1505  0022               	movlb	2	; select bank2
  4702  1506  00A0               	movwf	?_map^(0+256)
  4703  1507  0008               	return
  4704  1508                     __end_of_map:
  4705                           
  4706                           	psect	text2
  4707  123B                     __ptext2:	
  4708 ;; *************** function ___fltol *****************
  4709 ;; Defined at:
  4710 ;;		line 43 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\fltol.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  f1              4   55[BANK1 ] long 
  4713 ;; Auto vars:     Size  Location     Type
  4714 ;;  exp1            1   65[BANK1 ] unsigned char 
  4715 ;;  sign1           1   64[BANK1 ] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  4   55[BANK1 ] long 
  4718 ;; Registers used:
  4719 ;;		wreg, status,2, status,0
  4720 ;; Tracked objects:
  4721 ;;		On entry : 1F/1
  4722 ;;		On exit  : 1F/1
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4725 ;;      Params:         0       0       4       0       0       0       0       0
  4726 ;;      Locals:         0       0       2       0       0       0       0       0
  4727 ;;      Temps:          0       0       5       0       0       0       0       0
  4728 ;;      Totals:         0       0      11       0       0       0       0       0
  4729 ;;Total ram usage:       11 bytes
  4730 ;; Hardware stack levels used: 1
  4731 ;; Hardware stack levels required when called: 4
  4732 ;; This function calls:
  4733 ;;		Nothing
  4734 ;; This function is called by:
  4735 ;;		_map
  4736 ;;		_main
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740  123B                     ___fltol:	
  4741                           ;psect for function ___fltol
  4742                           
  4743                           
  4744                           ;incstack = 0
  4745                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  4746  123B  1003               	clrc
  4747  123C  0D59               	rlf	(___fltol@f1+2)^(0+128),w
  4748  123D  0D5A               	rlf	(___fltol@f1+3)^(0+128),w
  4749  123E  00DB               	movwf	??___fltol^(0+128)
  4750  123F  085B               	movf	??___fltol^(0+128),w
  4751  1240  00E1               	movwf	___fltol@exp1^(0+128)
  4752  1241  0861               	movf	___fltol@exp1^(0+128),w
  4753  1242  1D03               	btfss	3,2
  4754  1243  2A4D               	goto	l6005
  4755  1244                     l6001:
  4756  1244  3000               	movlw	0
  4757  1245  00DA               	movwf	(?___fltol+3)^(0+128)
  4758  1246  3000               	movlw	0
  4759  1247  00D9               	movwf	(?___fltol+2)^(0+128)
  4760  1248  3000               	movlw	0
  4761  1249  00D8               	movwf	(?___fltol+1)^(0+128)
  4762  124A  3000               	movlw	0
  4763  124B  00D7               	movwf	?___fltol^(0+128)
  4764  124C  0008               	return
  4765  124D                     l6005:
  4766  124D  0857               	movf	___fltol@f1^(0+128),w
  4767  124E  00DB               	movwf	??___fltol^(0+128)
  4768  124F  0858               	movf	(___fltol@f1+1)^(0+128),w
  4769  1250  00DC               	movwf	(??___fltol^(0+128)+1)
  4770  1251  0859               	movf	(___fltol@f1+2)^(0+128),w
  4771  1252  00DD               	movwf	(??___fltol^(0+128)+2)
  4772  1253  085A               	movf	(___fltol@f1+3)^(0+128),w
  4773  1254  00DE               	movwf	(??___fltol^(0+128)+3)
  4774  1255  301F               	movlw	31
  4775  1256                     u5635:
  4776  1256  36DE               	lsrf	(??___fltol^(0+128)+3),f
  4777  1257  0CDD               	rrf	(??___fltol^(0+128)+2),f
  4778  1258  0CDC               	rrf	(??___fltol^(0+128)+1),f
  4779  1259  0CDB               	rrf	??___fltol^(0+128),f
  4780  125A  0B89               	decfsz	9,f
  4781  125B  2A56               	goto	u5635
  4782  125C  085B               	movf	??___fltol^(0+128),w
  4783  125D  00DF               	movwf	(??___fltol+4)^(0+128)
  4784  125E  085F               	movf	(??___fltol+4)^(0+128),w
  4785  125F  00E0               	movwf	___fltol@sign1^(0+128)
  4786  1260  17D9               	bsf	(___fltol@f1^(0+128)+2),7
  4787  1261  30FF               	movlw	255
  4788  1262  05D7               	andwf	___fltol@f1^(0+128),f
  4789  1263  30FF               	movlw	255
  4790  1264  05D8               	andwf	(___fltol@f1+1)^(0+128),f
  4791  1265  30FF               	movlw	255
  4792  1266  05D9               	andwf	(___fltol@f1+2)^(0+128),f
  4793  1267  3000               	movlw	0
  4794  1268  05DA               	andwf	(___fltol@f1+3)^(0+128),f
  4795  1269  3096               	movlw	150
  4796  126A  02E1               	subwf	___fltol@exp1^(0+128),f
  4797  126B  1FE1               	btfss	___fltol@exp1^(0+128),7
  4798  126C  2A80               	goto	l6023
  4799  126D  0861               	movf	___fltol@exp1^(0+128),w
  4800  126E  3A80               	xorlw	128
  4801  126F  3E97               	addlw	151
  4802  1270  1C03               	btfss	3,0
  4803  1271  2A44               	goto	l6001
  4804  1272                     l6021:
  4805  1272  3001               	movlw	1
  4806  1273                     u5665:
  4807  1273  36DA               	lsrf	(___fltol@f1+3)^(0+128),f
  4808  1274  0CD9               	rrf	(___fltol@f1+2)^(0+128),f
  4809  1275  0CD8               	rrf	(___fltol@f1+1)^(0+128),f
  4810  1276  0CD7               	rrf	___fltol@f1^(0+128),f
  4811  1277  0B89               	decfsz	9,f
  4812  1278  2A73               	goto	u5665
  4813  1279  3001               	movlw	1
  4814  127A  00DB               	movwf	??___fltol^(0+128)
  4815  127B  085B               	movf	??___fltol^(0+128),w
  4816  127C  07E1               	addwf	___fltol@exp1^(0+128),f
  4817  127D  1903               	btfsc	3,2
  4818  127E  2A91               	goto	l6031
  4819  127F  2A72               	goto	l6021
  4820  1280                     l6023:
  4821  1280  3020               	movlw	32
  4822  1281  0261               	subwf	___fltol@exp1^(0+128),w
  4823  1282  1803               	btfsc	3,0
  4824  1283  2A44               	goto	l6001
  4825  1284                     l1254:
  4826  1284  0861               	movf	___fltol@exp1^(0+128),w
  4827  1285  1903               	btfsc	3,2
  4828  1286  2A91               	goto	l6031
  4829  1287  3001               	movlw	1
  4830  1288                     u5695:
  4831  1288  35D7               	lslf	___fltol@f1^(0+128),f
  4832  1289  0DD8               	rlf	(___fltol@f1+1)^(0+128),f
  4833  128A  0DD9               	rlf	(___fltol@f1+2)^(0+128),f
  4834  128B  0DDA               	rlf	(___fltol@f1+3)^(0+128),f
  4835  128C  0B89               	decfsz	9,f
  4836  128D  2A88               	goto	u5695
  4837  128E  3001               	movlw	1
  4838  128F  02E1               	subwf	___fltol@exp1^(0+128),f
  4839  1290  2A84               	goto	l1254
  4840  1291                     l6031:
  4841  1291  0860               	movf	___fltol@sign1^(0+128),w
  4842  1292  1903               	btfsc	3,2
  4843  1293  0008               	return
  4844  1294  09D7               	comf	___fltol@f1^(0+128),f
  4845  1295  09D8               	comf	(___fltol@f1+1)^(0+128),f
  4846  1296  09D9               	comf	(___fltol@f1+2)^(0+128),f
  4847  1297  09DA               	comf	(___fltol@f1+3)^(0+128),f
  4848  1298  0AD7               	incf	___fltol@f1^(0+128),f
  4849  1299  1903               	skipnz
  4850  129A  0AD8               	incf	(___fltol@f1+1)^(0+128),f
  4851  129B  1903               	skipnz
  4852  129C  0AD9               	incf	(___fltol@f1+2)^(0+128),f
  4853  129D  1903               	skipnz
  4854  129E  0ADA               	incf	(___fltol@f1+3)^(0+128),f
  4855  129F  0008               	return
  4856  12A0                     __end_of___fltol:
  4857                           
  4858                           	psect	text3
  4859  08E7                     __ptext3:	
  4860 ;; *************** function _get_ntc_temperature *****************
  4861 ;; Defined at:
  4862 ;;		line 134 in file "main.c"
  4863 ;; Parameters:    Size  Location     Type
  4864 ;;  adcVoltage      4   67[BANK1 ] float 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  temp            4   74[BANK2 ] float 
  4867 ;;  rntc            4   66[BANK2 ] float 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      void 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0, pclath, cstack
  4872 ;; Tracked objects:
  4873 ;;		On entry : 1F/1
  4874 ;;		On exit  : 1F/3
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4877 ;;      Params:         0       0       4       0       0       0       0       0
  4878 ;;      Locals:         0       0       0      12       0       0       0       0
  4879 ;;      Temps:          0       0       0       0       0       0       0       0
  4880 ;;      Totals:         0       0       4      12       0       0       0       0
  4881 ;;Total ram usage:       16 bytes
  4882 ;; Hardware stack levels used: 1
  4883 ;; Hardware stack levels required when called: 7
  4884 ;; This function calls:
  4885 ;;		___fladd
  4886 ;;		___fldiv
  4887 ;;		___flsub
  4888 ;;		_logf
  4889 ;; This function is called by:
  4890 ;;		_main
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894  08E7                     _get_ntc_temperature:	
  4895                           ;psect for function _get_ntc_temperature
  4896                           
  4897                           
  4898                           ;main.c: 134: void get_ntc_temperature(float adcVoltage);main.c: 135: {;main.c: 136:    
      +                           adcVoltage /= 1000.0f;
  4899                           
  4900                           ;incstack = 0
  4901                           ; Regs used in _get_ntc_temperature: [wreg+status,2+status,0+pclath+cstack]
  4902  08E7  3044               	movlw	68
  4903  08E8  00C0               	movwf	(___fldiv@a+3)^(0+128)
  4904  08E9  307A               	movlw	122
  4905  08EA  00BF               	movwf	(___fldiv@a+2)^(0+128)
  4906  08EB  3000               	movlw	0
  4907  08EC  00BE               	movwf	(___fldiv@a+1)^(0+128)
  4908  08ED  3000               	movlw	0
  4909  08EE  00BD               	movwf	___fldiv@a^(0+128)
  4910  08EF  0866               	movf	(get_ntc_temperature@adcVoltage+3)^(0+128),w
  4911  08F0  00C4               	movwf	(___fldiv@b+3)^(0+128)
  4912  08F1  0865               	movf	(get_ntc_temperature@adcVoltage+2)^(0+128),w
  4913  08F2  00C3               	movwf	(___fldiv@b+2)^(0+128)
  4914  08F3  0864               	movf	(get_ntc_temperature@adcVoltage+1)^(0+128),w
  4915  08F4  00C2               	movwf	(___fldiv@b+1)^(0+128)
  4916  08F5  0863               	movf	get_ntc_temperature@adcVoltage^(0+128),w
  4917  08F6  00C1               	movwf	___fldiv@b^(0+128)
  4918  08F7  3195  2508  3188   	fcall	___fldiv
  4919  08FA  0840               	movf	(?___fldiv+3)^(0+128),w
  4920  08FB  00E6               	movwf	(get_ntc_temperature@adcVoltage+3)^(0+128)
  4921  08FC  083F               	movf	(?___fldiv+2)^(0+128),w
  4922  08FD  00E5               	movwf	(get_ntc_temperature@adcVoltage+2)^(0+128)
  4923  08FE  083E               	movf	(?___fldiv+1)^(0+128),w
  4924  08FF  00E4               	movwf	(get_ntc_temperature@adcVoltage+1)^(0+128)
  4925  0900  083D               	movf	?___fldiv^(0+128),w
  4926  0901  00E3               	movwf	get_ntc_temperature@adcVoltage^(0+128)
  4927                           
  4928                           ;main.c: 137:     float rntc = (float)33000.0f / (((float)5.0 / (float)adcVoltage ) - 1.
      +                          0f);
  4929  0902  30BF               	movlw	191
  4930  0903  0020               	movlb	0	; select bank0
  4931  0904  00BA               	movwf	___fladd@b+3
  4932  0905  3080               	movlw	128
  4933  0906  00B9               	movwf	___fladd@b+2
  4934  0907  3000               	movlw	0
  4935  0908  00B8               	movwf	___fladd@b+1
  4936  0909  3000               	movlw	0
  4937  090A  00B7               	movwf	___fladd@b
  4938  090B  0021               	movlb	1	; select bank1
  4939  090C  0866               	movf	(get_ntc_temperature@adcVoltage+3)^(0+128),w
  4940  090D  00C0               	movwf	(___fldiv@a+3)^(0+128)
  4941  090E  0865               	movf	(get_ntc_temperature@adcVoltage+2)^(0+128),w
  4942  090F  00BF               	movwf	(___fldiv@a+2)^(0+128)
  4943  0910  0864               	movf	(get_ntc_temperature@adcVoltage+1)^(0+128),w
  4944  0911  00BE               	movwf	(___fldiv@a+1)^(0+128)
  4945  0912  0863               	movf	get_ntc_temperature@adcVoltage^(0+128),w
  4946  0913  00BD               	movwf	___fldiv@a^(0+128)
  4947  0914  3040               	movlw	64
  4948  0915  00C4               	movwf	(___fldiv@b+3)^(0+128)
  4949  0916  30A0               	movlw	160
  4950  0917  00C3               	movwf	(___fldiv@b+2)^(0+128)
  4951  0918  3000               	movlw	0
  4952  0919  00C2               	movwf	(___fldiv@b+1)^(0+128)
  4953  091A  3000               	movlw	0
  4954  091B  00C1               	movwf	___fldiv@b^(0+128)
  4955  091C  3195  2508  3188   	fcall	___fldiv
  4956  091F  0840               	movf	(?___fldiv+3)^(0+128),w
  4957  0920  0020               	movlb	0	; select bank0
  4958  0921  00BE               	movwf	___fladd@a+3
  4959  0922  0021               	movlb	1	; select bank1
  4960  0923  083F               	movf	(?___fldiv+2)^(0+128),w
  4961  0924  0020               	movlb	0	; select bank0
  4962  0925  00BD               	movwf	___fladd@a+2
  4963  0926  0021               	movlb	1	; select bank1
  4964  0927  083E               	movf	(?___fldiv+1)^(0+128),w
  4965  0928  0020               	movlb	0	; select bank0
  4966  0929  00BC               	movwf	___fladd@a+1
  4967  092A  0021               	movlb	1	; select bank1
  4968  092B  083D               	movf	?___fldiv^(0+128),w
  4969  092C  0020               	movlb	0	; select bank0
  4970  092D  00BB               	movwf	___fladd@a
  4971  092E  3185  25D4  3188   	fcall	___fladd
  4972  0931  083A               	movf	?___fladd+3,w
  4973  0932  0022               	movlb	2	; select bank2
  4974  0933  00E9               	movwf	(_get_ntc_temperature$2276+3)^(0+256)
  4975  0934  0020               	movlb	0	; select bank0
  4976  0935  0839               	movf	?___fladd+2,w
  4977  0936  0022               	movlb	2	; select bank2
  4978  0937  00E8               	movwf	(_get_ntc_temperature$2276+2)^(0+256)
  4979  0938  0020               	movlb	0	; select bank0
  4980  0939  0838               	movf	?___fladd+1,w
  4981  093A  0022               	movlb	2	; select bank2
  4982  093B  00E7               	movwf	(_get_ntc_temperature$2276+1)^(0+256)
  4983  093C  0020               	movlb	0	; select bank0
  4984  093D  0837               	movf	?___fladd,w
  4985  093E  0022               	movlb	2	; select bank2
  4986  093F  00E6               	movwf	_get_ntc_temperature$2276^(0+256)
  4987                           
  4988                           ;main.c: 137:     float rntc = (float)33000.0f / (((float)5.0 / (float)adcVoltage ) - 1.
      +                          0f);
  4989  0940  0869               	movf	(_get_ntc_temperature$2276+3)^(0+256),w
  4990  0941  0021               	movlb	1	; select bank1
  4991  0942  00C0               	movwf	(___fldiv@a+3)^(0+128)
  4992  0943  0022               	movlb	2	; select bank2
  4993  0944  0868               	movf	(_get_ntc_temperature$2276+2)^(0+256),w
  4994  0945  0021               	movlb	1	; select bank1
  4995  0946  00BF               	movwf	(___fldiv@a+2)^(0+128)
  4996  0947  0022               	movlb	2	; select bank2
  4997  0948  0867               	movf	(_get_ntc_temperature$2276+1)^(0+256),w
  4998  0949  0021               	movlb	1	; select bank1
  4999  094A  00BE               	movwf	(___fldiv@a+1)^(0+128)
  5000  094B  0022               	movlb	2	; select bank2
  5001  094C  0866               	movf	_get_ntc_temperature$2276^(0+256),w
  5002  094D  0021               	movlb	1	; select bank1
  5003  094E  00BD               	movwf	___fldiv@a^(0+128)
  5004  094F  3047               	movlw	71
  5005  0950  00C4               	movwf	(___fldiv@b+3)^(0+128)
  5006  0951  3000               	movlw	0
  5007  0952  00C3               	movwf	(___fldiv@b+2)^(0+128)
  5008  0953  30E8               	movlw	232
  5009  0954  00C2               	movwf	(___fldiv@b+1)^(0+128)
  5010  0955  3000               	movlw	0
  5011  0956  00C1               	movwf	___fldiv@b^(0+128)
  5012  0957  3195  2508  3188   	fcall	___fldiv
  5013  095A  0840               	movf	(?___fldiv+3)^(0+128),w
  5014  095B  0022               	movlb	2	; select bank2
  5015  095C  00E5               	movwf	(get_ntc_temperature@rntc+3)^(0+256)
  5016  095D  0021               	movlb	1	; select bank1
  5017  095E  083F               	movf	(?___fldiv+2)^(0+128),w
  5018  095F  0022               	movlb	2	; select bank2
  5019  0960  00E4               	movwf	(get_ntc_temperature@rntc+2)^(0+256)
  5020  0961  0021               	movlb	1	; select bank1
  5021  0962  083E               	movf	(?___fldiv+1)^(0+128),w
  5022  0963  0022               	movlb	2	; select bank2
  5023  0964  00E3               	movwf	(get_ntc_temperature@rntc+1)^(0+256)
  5024  0965  0021               	movlb	1	; select bank1
  5025  0966  083D               	movf	?___fldiv^(0+128),w
  5026  0967  0022               	movlb	2	; select bank2
  5027  0968  00E2               	movwf	get_ntc_temperature@rntc^(0+256)
  5028                           
  5029                           ;main.c: 138:     float temp;;main.c: 139:     temp = rntc / (float)10000.0f;
  5030  0969  3046               	movlw	70
  5031  096A  0021               	movlb	1	; select bank1
  5032  096B  00C0               	movwf	(___fldiv@a+3)^(0+128)
  5033  096C  301C               	movlw	28
  5034  096D  00BF               	movwf	(___fldiv@a+2)^(0+128)
  5035  096E  3040               	movlw	64
  5036  096F  00BE               	movwf	(___fldiv@a+1)^(0+128)
  5037  0970  3000               	movlw	0
  5038  0971  00BD               	movwf	___fldiv@a^(0+128)
  5039  0972  0022               	movlb	2	; select bank2
  5040  0973  0865               	movf	(get_ntc_temperature@rntc+3)^(0+256),w
  5041  0974  0021               	movlb	1	; select bank1
  5042  0975  00C4               	movwf	(___fldiv@b+3)^(0+128)
  5043  0976  0022               	movlb	2	; select bank2
  5044  0977  0864               	movf	(get_ntc_temperature@rntc+2)^(0+256),w
  5045  0978  0021               	movlb	1	; select bank1
  5046  0979  00C3               	movwf	(___fldiv@b+2)^(0+128)
  5047  097A  0022               	movlb	2	; select bank2
  5048  097B  0863               	movf	(get_ntc_temperature@rntc+1)^(0+256),w
  5049  097C  0021               	movlb	1	; select bank1
  5050  097D  00C2               	movwf	(___fldiv@b+1)^(0+128)
  5051  097E  0022               	movlb	2	; select bank2
  5052  097F  0862               	movf	get_ntc_temperature@rntc^(0+256),w
  5053  0980  0021               	movlb	1	; select bank1
  5054  0981  00C1               	movwf	___fldiv@b^(0+128)
  5055  0982  3195  2508  3188   	fcall	___fldiv
  5056  0985  0840               	movf	(?___fldiv+3)^(0+128),w
  5057  0986  0022               	movlb	2	; select bank2
  5058  0987  00ED               	movwf	(get_ntc_temperature@temp+3)^(0+256)
  5059  0988  0021               	movlb	1	; select bank1
  5060  0989  083F               	movf	(?___fldiv+2)^(0+128),w
  5061  098A  0022               	movlb	2	; select bank2
  5062  098B  00EC               	movwf	(get_ntc_temperature@temp+2)^(0+256)
  5063  098C  0021               	movlb	1	; select bank1
  5064  098D  083E               	movf	(?___fldiv+1)^(0+128),w
  5065  098E  0022               	movlb	2	; select bank2
  5066  098F  00EB               	movwf	(get_ntc_temperature@temp+1)^(0+256)
  5067  0990  0021               	movlb	1	; select bank1
  5068  0991  083D               	movf	?___fldiv^(0+128),w
  5069  0992  0022               	movlb	2	; select bank2
  5070  0993  00EA               	movwf	get_ntc_temperature@temp^(0+256)
  5071                           
  5072                           ;main.c: 140:     temp = logf(temp);
  5073  0994  086D               	movf	(get_ntc_temperature@temp+3)^(0+256),w
  5074  0995  0021               	movlb	1	; select bank1
  5075  0996  00DA               	movwf	(logf@x+3)^(0+128)
  5076  0997  0022               	movlb	2	; select bank2
  5077  0998  086C               	movf	(get_ntc_temperature@temp+2)^(0+256),w
  5078  0999  0021               	movlb	1	; select bank1
  5079  099A  00D9               	movwf	(logf@x+2)^(0+128)
  5080  099B  0022               	movlb	2	; select bank2
  5081  099C  086B               	movf	(get_ntc_temperature@temp+1)^(0+256),w
  5082  099D  0021               	movlb	1	; select bank1
  5083  099E  00D8               	movwf	(logf@x+1)^(0+128)
  5084  099F  0022               	movlb	2	; select bank2
  5085  09A0  086A               	movf	get_ntc_temperature@temp^(0+256),w
  5086  09A1  0021               	movlb	1	; select bank1
  5087  09A2  00D7               	movwf	logf@x^(0+128)
  5088  09A3  3180  2062  3188   	fcall	_logf
  5089  09A6  0021               	movlb	1	; select bank1
  5090  09A7  085A               	movf	(?_logf+3)^(0+128),w
  5091  09A8  0022               	movlb	2	; select bank2
  5092  09A9  00ED               	movwf	(get_ntc_temperature@temp+3)^(0+256)
  5093  09AA  0021               	movlb	1	; select bank1
  5094  09AB  0859               	movf	(?_logf+2)^(0+128),w
  5095  09AC  0022               	movlb	2	; select bank2
  5096  09AD  00EC               	movwf	(get_ntc_temperature@temp+2)^(0+256)
  5097  09AE  0021               	movlb	1	; select bank1
  5098  09AF  0858               	movf	(?_logf+1)^(0+128),w
  5099  09B0  0022               	movlb	2	; select bank2
  5100  09B1  00EB               	movwf	(get_ntc_temperature@temp+1)^(0+256)
  5101  09B2  0021               	movlb	1	; select bank1
  5102  09B3  0857               	movf	?_logf^(0+128),w
  5103  09B4  0022               	movlb	2	; select bank2
  5104  09B5  00EA               	movwf	get_ntc_temperature@temp^(0+256)
  5105                           
  5106                           ;main.c: 141:     temp /= (float)3950;
  5107  09B6  3045               	movlw	69
  5108  09B7  0021               	movlb	1	; select bank1
  5109  09B8  00C0               	movwf	(___fldiv@a+3)^(0+128)
  5110  09B9  3076               	movlw	118
  5111  09BA  00BF               	movwf	(___fldiv@a+2)^(0+128)
  5112  09BB  30E0               	movlw	224
  5113  09BC  00BE               	movwf	(___fldiv@a+1)^(0+128)
  5114  09BD  3000               	movlw	0
  5115  09BE  00BD               	movwf	___fldiv@a^(0+128)
  5116  09BF  0022               	movlb	2	; select bank2
  5117  09C0  086D               	movf	(get_ntc_temperature@temp+3)^(0+256),w
  5118  09C1  0021               	movlb	1	; select bank1
  5119  09C2  00C4               	movwf	(___fldiv@b+3)^(0+128)
  5120  09C3  0022               	movlb	2	; select bank2
  5121  09C4  086C               	movf	(get_ntc_temperature@temp+2)^(0+256),w
  5122  09C5  0021               	movlb	1	; select bank1
  5123  09C6  00C3               	movwf	(___fldiv@b+2)^(0+128)
  5124  09C7  0022               	movlb	2	; select bank2
  5125  09C8  086B               	movf	(get_ntc_temperature@temp+1)^(0+256),w
  5126  09C9  0021               	movlb	1	; select bank1
  5127  09CA  00C2               	movwf	(___fldiv@b+1)^(0+128)
  5128  09CB  0022               	movlb	2	; select bank2
  5129  09CC  086A               	movf	get_ntc_temperature@temp^(0+256),w
  5130  09CD  0021               	movlb	1	; select bank1
  5131  09CE  00C1               	movwf	___fldiv@b^(0+128)
  5132  09CF  3195  2508  3188   	fcall	___fldiv
  5133  09D2  0840               	movf	(?___fldiv+3)^(0+128),w
  5134  09D3  0022               	movlb	2	; select bank2
  5135  09D4  00ED               	movwf	(get_ntc_temperature@temp+3)^(0+256)
  5136  09D5  0021               	movlb	1	; select bank1
  5137  09D6  083F               	movf	(?___fldiv+2)^(0+128),w
  5138  09D7  0022               	movlb	2	; select bank2
  5139  09D8  00EC               	movwf	(get_ntc_temperature@temp+2)^(0+256)
  5140  09D9  0021               	movlb	1	; select bank1
  5141  09DA  083E               	movf	(?___fldiv+1)^(0+128),w
  5142  09DB  0022               	movlb	2	; select bank2
  5143  09DC  00EB               	movwf	(get_ntc_temperature@temp+1)^(0+256)
  5144  09DD  0021               	movlb	1	; select bank1
  5145  09DE  083D               	movf	?___fldiv^(0+128),w
  5146  09DF  0022               	movlb	2	; select bank2
  5147  09E0  00EA               	movwf	get_ntc_temperature@temp^(0+256)
  5148                           
  5149                           ;main.c: 142:     temp += 1.0f / ((float)25.0f + 273.15f);
  5150  09E1  303B               	movlw	59
  5151  09E2  0020               	movlb	0	; select bank0
  5152  09E3  00BA               	movwf	___fladd@b+3
  5153  09E4  305B               	movlw	91
  5154  09E5  00B9               	movwf	___fladd@b+2
  5155  09E6  30CF               	movlw	207
  5156  09E7  00B8               	movwf	___fladd@b+1
  5157  09E8  300F               	movlw	15
  5158  09E9  00B7               	movwf	___fladd@b
  5159  09EA  0022               	movlb	2	; select bank2
  5160  09EB  086D               	movf	(get_ntc_temperature@temp+3)^(0+256),w
  5161  09EC  0020               	movlb	0	; select bank0
  5162  09ED  00BE               	movwf	___fladd@a+3
  5163  09EE  0022               	movlb	2	; select bank2
  5164  09EF  086C               	movf	(get_ntc_temperature@temp+2)^(0+256),w
  5165  09F0  0020               	movlb	0	; select bank0
  5166  09F1  00BD               	movwf	___fladd@a+2
  5167  09F2  0022               	movlb	2	; select bank2
  5168  09F3  086B               	movf	(get_ntc_temperature@temp+1)^(0+256),w
  5169  09F4  0020               	movlb	0	; select bank0
  5170  09F5  00BC               	movwf	___fladd@a+1
  5171  09F6  0022               	movlb	2	; select bank2
  5172  09F7  086A               	movf	get_ntc_temperature@temp^(0+256),w
  5173  09F8  0020               	movlb	0	; select bank0
  5174  09F9  00BB               	movwf	___fladd@a
  5175  09FA  3185  25D4  3188   	fcall	___fladd
  5176  09FD  083A               	movf	?___fladd+3,w
  5177  09FE  0022               	movlb	2	; select bank2
  5178  09FF  00ED               	movwf	(get_ntc_temperature@temp+3)^(0+256)
  5179  0A00  0020               	movlb	0	; select bank0
  5180  0A01  0839               	movf	?___fladd+2,w
  5181  0A02  0022               	movlb	2	; select bank2
  5182  0A03  00EC               	movwf	(get_ntc_temperature@temp+2)^(0+256)
  5183  0A04  0020               	movlb	0	; select bank0
  5184  0A05  0838               	movf	?___fladd+1,w
  5185  0A06  0022               	movlb	2	; select bank2
  5186  0A07  00EB               	movwf	(get_ntc_temperature@temp+1)^(0+256)
  5187  0A08  0020               	movlb	0	; select bank0
  5188  0A09  0837               	movf	?___fladd,w
  5189  0A0A  0022               	movlb	2	; select bank2
  5190  0A0B  00EA               	movwf	get_ntc_temperature@temp^(0+256)
  5191                           
  5192                           ;main.c: 143:     temp = 1.0f / temp;
  5193  0A0C  086D               	movf	(get_ntc_temperature@temp+3)^(0+256),w
  5194  0A0D  0021               	movlb	1	; select bank1
  5195  0A0E  00C0               	movwf	(___fldiv@a+3)^(0+128)
  5196  0A0F  0022               	movlb	2	; select bank2
  5197  0A10  086C               	movf	(get_ntc_temperature@temp+2)^(0+256),w
  5198  0A11  0021               	movlb	1	; select bank1
  5199  0A12  00BF               	movwf	(___fldiv@a+2)^(0+128)
  5200  0A13  0022               	movlb	2	; select bank2
  5201  0A14  086B               	movf	(get_ntc_temperature@temp+1)^(0+256),w
  5202  0A15  0021               	movlb	1	; select bank1
  5203  0A16  00BE               	movwf	(___fldiv@a+1)^(0+128)
  5204  0A17  0022               	movlb	2	; select bank2
  5205  0A18  086A               	movf	get_ntc_temperature@temp^(0+256),w
  5206  0A19  0021               	movlb	1	; select bank1
  5207  0A1A  00BD               	movwf	___fldiv@a^(0+128)
  5208  0A1B  303F               	movlw	63
  5209  0A1C  00C4               	movwf	(___fldiv@b+3)^(0+128)
  5210  0A1D  3080               	movlw	128
  5211  0A1E  00C3               	movwf	(___fldiv@b+2)^(0+128)
  5212  0A1F  3000               	movlw	0
  5213  0A20  00C2               	movwf	(___fldiv@b+1)^(0+128)
  5214  0A21  3000               	movlw	0
  5215  0A22  00C1               	movwf	___fldiv@b^(0+128)
  5216  0A23  3195  2508  3188   	fcall	___fldiv
  5217  0A26  0840               	movf	(?___fldiv+3)^(0+128),w
  5218  0A27  0022               	movlb	2	; select bank2
  5219  0A28  00ED               	movwf	(get_ntc_temperature@temp+3)^(0+256)
  5220  0A29  0021               	movlb	1	; select bank1
  5221  0A2A  083F               	movf	(?___fldiv+2)^(0+128),w
  5222  0A2B  0022               	movlb	2	; select bank2
  5223  0A2C  00EC               	movwf	(get_ntc_temperature@temp+2)^(0+256)
  5224  0A2D  0021               	movlb	1	; select bank1
  5225  0A2E  083E               	movf	(?___fldiv+1)^(0+128),w
  5226  0A2F  0022               	movlb	2	; select bank2
  5227  0A30  00EB               	movwf	(get_ntc_temperature@temp+1)^(0+256)
  5228  0A31  0021               	movlb	1	; select bank1
  5229  0A32  083D               	movf	?___fldiv^(0+128),w
  5230  0A33  0022               	movlb	2	; select bank2
  5231  0A34  00EA               	movwf	get_ntc_temperature@temp^(0+256)
  5232                           
  5233                           ;main.c: 144:     temp -= 273.15f;
  5234  0A35  3043               	movlw	67
  5235  0A36  0021               	movlb	1	; select bank1
  5236  0A37  00A3               	movwf	(___flsub@a+3)^(0+128)
  5237  0A38  3088               	movlw	136
  5238  0A39  00A2               	movwf	(___flsub@a+2)^(0+128)
  5239  0A3A  3093               	movlw	147
  5240  0A3B  00A1               	movwf	(___flsub@a+1)^(0+128)
  5241  0A3C  3033               	movlw	51
  5242  0A3D  00A0               	movwf	___flsub@a^(0+128)
  5243  0A3E  0022               	movlb	2	; select bank2
  5244  0A3F  086D               	movf	(get_ntc_temperature@temp+3)^(0+256),w
  5245  0A40  0021               	movlb	1	; select bank1
  5246  0A41  00A7               	movwf	(___flsub@b+3)^(0+128)
  5247  0A42  0022               	movlb	2	; select bank2
  5248  0A43  086C               	movf	(get_ntc_temperature@temp+2)^(0+256),w
  5249  0A44  0021               	movlb	1	; select bank1
  5250  0A45  00A6               	movwf	(___flsub@b+2)^(0+128)
  5251  0A46  0022               	movlb	2	; select bank2
  5252  0A47  086B               	movf	(get_ntc_temperature@temp+1)^(0+256),w
  5253  0A48  0021               	movlb	1	; select bank1
  5254  0A49  00A5               	movwf	(___flsub@b+1)^(0+128)
  5255  0A4A  0022               	movlb	2	; select bank2
  5256  0A4B  086A               	movf	get_ntc_temperature@temp^(0+256),w
  5257  0A4C  0021               	movlb	1	; select bank1
  5258  0A4D  00A4               	movwf	___flsub@b^(0+128)
  5259  0A4E  3191  2186         	fcall	___flsub
  5260  0A50  0823               	movf	(?___flsub+3)^(0+128),w
  5261  0A51  0022               	movlb	2	; select bank2
  5262  0A52  00ED               	movwf	(get_ntc_temperature@temp+3)^(0+256)
  5263  0A53  0021               	movlb	1	; select bank1
  5264  0A54  0822               	movf	(?___flsub+2)^(0+128),w
  5265  0A55  0022               	movlb	2	; select bank2
  5266  0A56  00EC               	movwf	(get_ntc_temperature@temp+2)^(0+256)
  5267  0A57  0021               	movlb	1	; select bank1
  5268  0A58  0821               	movf	(?___flsub+1)^(0+128),w
  5269  0A59  0022               	movlb	2	; select bank2
  5270  0A5A  00EB               	movwf	(get_ntc_temperature@temp+1)^(0+256)
  5271  0A5B  0021               	movlb	1	; select bank1
  5272  0A5C  0820               	movf	?___flsub^(0+128),w
  5273  0A5D  0022               	movlb	2	; select bank2
  5274  0A5E  00EA               	movwf	get_ntc_temperature@temp^(0+256)
  5275                           
  5276                           ;main.c: 145:     tempNTC = temp;
  5277  0A5F  086D               	movf	(get_ntc_temperature@temp+3)^(0+256),w
  5278  0A60  0023               	movlb	3	; select bank3
  5279  0A61  00D0               	movwf	(_tempNTC+3)^(0+384)
  5280  0A62  0022               	movlb	2	; select bank2
  5281  0A63  086C               	movf	(get_ntc_temperature@temp+2)^(0+256),w
  5282  0A64  0023               	movlb	3	; select bank3
  5283  0A65  00CF               	movwf	(_tempNTC+2)^(0+384)
  5284  0A66  0022               	movlb	2	; select bank2
  5285  0A67  086B               	movf	(get_ntc_temperature@temp+1)^(0+256),w
  5286  0A68  0023               	movlb	3	; select bank3
  5287  0A69  00CE               	movwf	(_tempNTC+1)^(0+384)
  5288  0A6A  0022               	movlb	2	; select bank2
  5289  0A6B  086A               	movf	get_ntc_temperature@temp^(0+256),w
  5290  0A6C  0023               	movlb	3	; select bank3
  5291  0A6D  00CD               	movwf	_tempNTC^(0+384)
  5292  0A6E  0008               	return
  5293  0A6F                     __end_of_get_ntc_temperature:
  5294                           
  5295                           	psect	text4
  5296  0062                     __ptext4:	
  5297 ;; *************** function _logf *****************
  5298 ;; Defined at:
  5299 ;;		line 29 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\logf.c"
  5300 ;; Parameters:    Size  Location     Type
  5301 ;;  x               4   55[BANK1 ] float 
  5302 ;; Auto vars:     Size  Location     Type
  5303 ;;  ix              4   62[BANK2 ] unsigned long 
  5304 ;;  f               4   58[BANK2 ] float 
  5305 ;;  u               4   54[BANK2 ] struct .
  5306 ;;  w               4   46[BANK2 ] float 
  5307 ;;  z               4   42[BANK2 ] float 
  5308 ;;  s               4   38[BANK2 ] float 
  5309 ;;  dk              4   34[BANK2 ] float 
  5310 ;;  hfsq            4   30[BANK2 ] float 
  5311 ;;  t2              4    8[BANK2 ] float 
  5312 ;;  t1              4    4[BANK2 ] float 
  5313 ;;  R               4    0[BANK2 ] float 
  5314 ;;  k               2   28[BANK2 ] int 
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  4   55[BANK1 ] float 
  5317 ;; Registers used:
  5318 ;;		wreg, status,2, status,0, pclath, cstack
  5319 ;; Tracked objects:
  5320 ;;		On entry : 1F/1
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5324 ;;      Params:         0       0       4       0       0       0       0       0
  5325 ;;      Locals:         0       0       0      66       0       0       0       0
  5326 ;;      Temps:          0       0       8       0       0       0       0       0
  5327 ;;      Totals:         0       0      12      66       0       0       0       0
  5328 ;;Total ram usage:       78 bytes
  5329 ;; Hardware stack levels used: 1
  5330 ;; Hardware stack levels required when called: 6
  5331 ;; This function calls:
  5332 ;;		___fladd
  5333 ;;		___fldiv
  5334 ;;		___flmul
  5335 ;;		___flsub
  5336 ;;		___xxtofl
  5337 ;; This function is called by:
  5338 ;;		_get_ntc_temperature
  5339 ;; This function uses a non-reentrant model
  5340 ;;
  5341                           
  5342  0062                     _logf:	
  5343                           ;psect for function _logf
  5344                           
  5345                           
  5346                           ;incstack = 0
  5347                           ; Regs used in _logf: [wreg+status,2+status,0+pclath+cstack]
  5348  0062  0020               	movlb	0	; select bank0
  5349  0063  0854               	movf	logf@F472+3,w
  5350  0064  0022               	movlb	2	; select bank2
  5351  0065  00D9               	movwf	(logf@u+3)^(0+256)
  5352  0066  0020               	movlb	0	; select bank0
  5353  0067  0853               	movf	logf@F472+2,w
  5354  0068  0022               	movlb	2	; select bank2
  5355  0069  00D8               	movwf	(logf@u+2)^(0+256)
  5356  006A  0020               	movlb	0	; select bank0
  5357  006B  0852               	movf	logf@F472+1,w
  5358  006C  0022               	movlb	2	; select bank2
  5359  006D  00D7               	movwf	(logf@u+1)^(0+256)
  5360  006E  0020               	movlb	0	; select bank0
  5361  006F  0851               	movf	logf@F472,w
  5362  0070  0022               	movlb	2	; select bank2
  5363  0071  00D6               	movwf	logf@u^(0+256)
  5364  0072  0021               	movlb	1	; select bank1
  5365  0073  085A               	movf	(logf@x+3)^(0+128),w
  5366  0074  0022               	movlb	2	; select bank2
  5367  0075  00D9               	movwf	(logf@u+3)^(0+256)
  5368  0076  0021               	movlb	1	; select bank1
  5369  0077  0859               	movf	(logf@x+2)^(0+128),w
  5370  0078  0022               	movlb	2	; select bank2
  5371  0079  00D8               	movwf	(logf@u+2)^(0+256)
  5372  007A  0021               	movlb	1	; select bank1
  5373  007B  0858               	movf	(logf@x+1)^(0+128),w
  5374  007C  0022               	movlb	2	; select bank2
  5375  007D  00D7               	movwf	(logf@u+1)^(0+256)
  5376  007E  0021               	movlb	1	; select bank1
  5377  007F  0857               	movf	logf@x^(0+128),w
  5378  0080  0022               	movlb	2	; select bank2
  5379  0081  00D6               	movwf	logf@u^(0+256)
  5380  0082  0859               	movf	(logf@u+3)^(0+256),w
  5381  0083  00E1               	movwf	(logf@ix+3)^(0+256)
  5382  0084  0858               	movf	(logf@u+2)^(0+256),w
  5383  0085  00E0               	movwf	(logf@ix+2)^(0+256)
  5384  0086  0857               	movf	(logf@u+1)^(0+256),w
  5385  0087  00DF               	movwf	(logf@ix+1)^(0+256)
  5386  0088  0856               	movf	logf@u^(0+256),w
  5387  0089  00DE               	movwf	logf@ix^(0+256)
  5388  008A  01BC               	clrf	logf@k^(0+256)
  5389  008B  01BD               	clrf	(logf@k+1)^(0+256)
  5390  008C  0861               	movf	(logf@ix+3)^(0+256),w
  5391  008D  1D03               	btfss	3,2
  5392  008E  2893               	goto	l5817
  5393  008F  3080               	movlw	128
  5394  0090  0260               	subwf	(logf@ix+2)^(0+256),w
  5395  0091  1C03               	btfss	3,0
  5396  0092  28AD               	goto	l5819
  5397  0093                     l5817:
  5398  0093  0022               	movlb	2	; select bank2
  5399  0094  085E               	movf	logf@ix^(0+256),w
  5400  0095  0021               	movlb	1	; select bank1
  5401  0096  00DB               	movwf	??_logf^(0+128)
  5402  0097  0022               	movlb	2	; select bank2
  5403  0098  085F               	movf	(logf@ix+1)^(0+256),w
  5404  0099  0021               	movlb	1	; select bank1
  5405  009A  00DC               	movwf	(??_logf^(0+128)+1)
  5406  009B  0022               	movlb	2	; select bank2
  5407  009C  0860               	movf	(logf@ix+2)^(0+256),w
  5408  009D  0021               	movlb	1	; select bank1
  5409  009E  00DD               	movwf	(??_logf^(0+128)+2)
  5410  009F  0022               	movlb	2	; select bank2
  5411  00A0  0861               	movf	(logf@ix+3)^(0+256),w
  5412  00A1  0021               	movlb	1	; select bank1
  5413  00A2  00DE               	movwf	(??_logf^(0+128)+3)
  5414  00A3  301F               	movlw	31
  5415  00A4                     u5445:
  5416  00A4  36DE               	lsrf	(??_logf^(0+128)+3),f
  5417  00A5  0CDD               	rrf	(??_logf^(0+128)+2),f
  5418  00A6  0CDC               	rrf	(??_logf^(0+128)+1),f
  5419  00A7  0CDB               	rrf	??_logf^(0+128),f
  5420  00A8  0B89               	decfsz	9,f
  5421  00A9  28A4               	goto	u5445
  5422  00AA  085B               	movf	??_logf^(0+128),w
  5423  00AB  1903               	btfsc	3,2
  5424  00AC  297F               	goto	l5841
  5425  00AD                     l5819:
  5426  00AD  0022               	movlb	2	; select bank2
  5427  00AE  085E               	movf	logf@ix^(0+256),w
  5428  00AF  0021               	movlb	1	; select bank1
  5429  00B0  00DB               	movwf	??_logf^(0+128)
  5430  00B1  0022               	movlb	2	; select bank2
  5431  00B2  085F               	movf	(logf@ix+1)^(0+256),w
  5432  00B3  0021               	movlb	1	; select bank1
  5433  00B4  00DC               	movwf	(??_logf^(0+128)+1)
  5434  00B5  0022               	movlb	2	; select bank2
  5435  00B6  0860               	movf	(logf@ix+2)^(0+256),w
  5436  00B7  0021               	movlb	1	; select bank1
  5437  00B8  00DD               	movwf	(??_logf^(0+128)+2)
  5438  00B9  0022               	movlb	2	; select bank2
  5439  00BA  0861               	movf	(logf@ix+3)^(0+256),w
  5440  00BB  0021               	movlb	1	; select bank1
  5441  00BC  00DE               	movwf	(??_logf^(0+128)+3)
  5442  00BD  3001               	movlw	1
  5443  00BE                     u5465:
  5444  00BE  35DB               	lslf	??_logf^(0+128),f
  5445  00BF  0DDC               	rlf	(??_logf^(0+128)+1),f
  5446  00C0  0DDD               	rlf	(??_logf^(0+128)+2),f
  5447  00C1  0DDE               	rlf	(??_logf^(0+128)+3),f
  5448  00C2  0B89               	decfsz	9,f
  5449  00C3  28BE               	goto	u5465
  5450  00C4  085E               	movf	(??_logf+3)^(0+128),w
  5451  00C5  045D               	iorwf	(??_logf+2)^(0+128),w
  5452  00C6  045C               	iorwf	(??_logf+1)^(0+128),w
  5453  00C7  045B               	iorwf	??_logf^(0+128),w
  5454  00C8  1D03               	skipz
  5455  00C9  28F8               	goto	l5825
  5456  00CA  085A               	movf	(logf@x+3)^(0+128),w
  5457  00CB  00AB               	movwf	(___flmul@b+3)^(0+128)
  5458  00CC  0859               	movf	(logf@x+2)^(0+128),w
  5459  00CD  00AA               	movwf	(___flmul@b+2)^(0+128)
  5460  00CE  0858               	movf	(logf@x+1)^(0+128),w
  5461  00CF  00A9               	movwf	(___flmul@b+1)^(0+128)
  5462  00D0  0857               	movf	logf@x^(0+128),w
  5463  00D1  00A8               	movwf	___flmul@b^(0+128)
  5464  00D2  085A               	movf	(logf@x+3)^(0+128),w
  5465  00D3  00AF               	movwf	(___flmul@a+3)^(0+128)
  5466  00D4  0859               	movf	(logf@x+2)^(0+128),w
  5467  00D5  00AE               	movwf	(___flmul@a+2)^(0+128)
  5468  00D6  0858               	movf	(logf@x+1)^(0+128),w
  5469  00D7  00AD               	movwf	(___flmul@a+1)^(0+128)
  5470  00D8  0857               	movf	logf@x^(0+128),w
  5471  00D9  00AC               	movwf	___flmul@a^(0+128)
  5472  00DA  318A  226F  3180   	fcall	___flmul
  5473  00DD  082B               	movf	(?___flmul+3)^(0+128),w
  5474  00DE  00C0               	movwf	(___fldiv@a+3)^(0+128)
  5475  00DF  082A               	movf	(?___flmul+2)^(0+128),w
  5476  00E0  00BF               	movwf	(___fldiv@a+2)^(0+128)
  5477  00E1  0829               	movf	(?___flmul+1)^(0+128),w
  5478  00E2  00BE               	movwf	(___fldiv@a+1)^(0+128)
  5479  00E3  0828               	movf	?___flmul^(0+128),w
  5480  00E4  00BD               	movwf	___fldiv@a^(0+128)
  5481  00E5  30BF               	movlw	191
  5482  00E6  00C4               	movwf	(___fldiv@b+3)^(0+128)
  5483  00E7  3080               	movlw	128
  5484  00E8  00C3               	movwf	(___fldiv@b+2)^(0+128)
  5485  00E9  3000               	movlw	0
  5486  00EA  00C2               	movwf	(___fldiv@b+1)^(0+128)
  5487  00EB  3000               	movlw	0
  5488  00EC  00C1               	movwf	___fldiv@b^(0+128)
  5489  00ED  3195  2508         	fcall	___fldiv
  5490  00EF  0840               	movf	(?___fldiv+3)^(0+128),w
  5491  00F0  00DA               	movwf	(?_logf+3)^(0+128)
  5492  00F1  083F               	movf	(?___fldiv+2)^(0+128),w
  5493  00F2  00D9               	movwf	(?_logf+2)^(0+128)
  5494  00F3  083E               	movf	(?___fldiv+1)^(0+128),w
  5495  00F4  00D8               	movwf	(?_logf+1)^(0+128)
  5496  00F5  083D               	movf	?___fldiv^(0+128),w
  5497  00F6  00D7               	movwf	?_logf^(0+128)
  5498  00F7  0008               	return
  5499  00F8                     l5825:
  5500  00F8  0022               	movlb	2	; select bank2
  5501  00F9  085E               	movf	logf@ix^(0+256),w
  5502  00FA  0021               	movlb	1	; select bank1
  5503  00FB  00DB               	movwf	??_logf^(0+128)
  5504  00FC  0022               	movlb	2	; select bank2
  5505  00FD  085F               	movf	(logf@ix+1)^(0+256),w
  5506  00FE  0021               	movlb	1	; select bank1
  5507  00FF  00DC               	movwf	(??_logf^(0+128)+1)
  5508  0100  0022               	movlb	2	; select bank2
  5509  0101  0860               	movf	(logf@ix+2)^(0+256),w
  5510  0102  0021               	movlb	1	; select bank1
  5511  0103  00DD               	movwf	(??_logf^(0+128)+2)
  5512  0104  0022               	movlb	2	; select bank2
  5513  0105  0861               	movf	(logf@ix+3)^(0+256),w
  5514  0106  0021               	movlb	1	; select bank1
  5515  0107  00DE               	movwf	(??_logf^(0+128)+3)
  5516  0108  301F               	movlw	31
  5517  0109                     u5485:
  5518  0109  36DE               	lsrf	(??_logf^(0+128)+3),f
  5519  010A  0CDD               	rrf	(??_logf^(0+128)+2),f
  5520  010B  0CDC               	rrf	(??_logf^(0+128)+1),f
  5521  010C  0CDB               	rrf	??_logf^(0+128),f
  5522  010D  0B89               	decfsz	9,f
  5523  010E  2909               	goto	u5485
  5524  010F  085B               	movf	??_logf^(0+128),w
  5525  0110  1903               	btfsc	3,2
  5526  0111  2946               	goto	l5833
  5527  0112  3021               	movlw	33
  5528  0113  0022               	movlb	2	; select bank2
  5529  0114  00EE               	movwf	_errno^(0+256)
  5530  0115  3000               	movlw	0
  5531  0116  00EF               	movwf	(_errno^(0+256)+1)
  5532  0117  3000               	movlw	0
  5533  0118  0021               	movlb	1	; select bank1
  5534  0119  00C0               	movwf	(___fldiv@a+3)^(0+128)
  5535  011A  3000               	movlw	0
  5536  011B  00BF               	movwf	(___fldiv@a+2)^(0+128)
  5537  011C  3000               	movlw	0
  5538  011D  00BE               	movwf	(___fldiv@a+1)^(0+128)
  5539  011E  3000               	movlw	0
  5540  011F  00BD               	movwf	___fldiv@a^(0+128)
  5541  0120  085A               	movf	(logf@x+3)^(0+128),w
  5542  0121  00A3               	movwf	(___flsub@a+3)^(0+128)
  5543  0122  0859               	movf	(logf@x+2)^(0+128),w
  5544  0123  00A2               	movwf	(___flsub@a+2)^(0+128)
  5545  0124  0858               	movf	(logf@x+1)^(0+128),w
  5546  0125  00A1               	movwf	(___flsub@a+1)^(0+128)
  5547  0126  0857               	movf	logf@x^(0+128),w
  5548  0127  00A0               	movwf	___flsub@a^(0+128)
  5549  0128  085A               	movf	(logf@x+3)^(0+128),w
  5550  0129  00A7               	movwf	(___flsub@b+3)^(0+128)
  5551  012A  0859               	movf	(logf@x+2)^(0+128),w
  5552  012B  00A6               	movwf	(___flsub@b+2)^(0+128)
  5553  012C  0858               	movf	(logf@x+1)^(0+128),w
  5554  012D  00A5               	movwf	(___flsub@b+1)^(0+128)
  5555  012E  0857               	movf	logf@x^(0+128),w
  5556  012F  00A4               	movwf	___flsub@b^(0+128)
  5557  0130  3191  2186  3180   	fcall	___flsub
  5558  0133  0823               	movf	(?___flsub+3)^(0+128),w
  5559  0134  00C4               	movwf	(___fldiv@b+3)^(0+128)
  5560  0135  0822               	movf	(?___flsub+2)^(0+128),w
  5561  0136  00C3               	movwf	(___fldiv@b+2)^(0+128)
  5562  0137  0821               	movf	(?___flsub+1)^(0+128),w
  5563  0138  00C2               	movwf	(___fldiv@b+1)^(0+128)
  5564  0139  0820               	movf	?___flsub^(0+128),w
  5565  013A  00C1               	movwf	___fldiv@b^(0+128)
  5566  013B  3195  2508         	fcall	___fldiv
  5567  013D  0840               	movf	(?___fldiv+3)^(0+128),w
  5568  013E  00DA               	movwf	(?_logf+3)^(0+128)
  5569  013F  083F               	movf	(?___fldiv+2)^(0+128),w
  5570  0140  00D9               	movwf	(?_logf+2)^(0+128)
  5571  0141  083E               	movf	(?___fldiv+1)^(0+128),w
  5572  0142  00D8               	movwf	(?_logf+1)^(0+128)
  5573  0143  083D               	movf	?___fldiv^(0+128),w
  5574  0144  00D7               	movwf	?_logf^(0+128)
  5575  0145  0008               	return
  5576  0146                     l5833:
  5577  0146  30E7               	movlw	231
  5578  0147  0022               	movlb	2	; select bank2
  5579  0148  07BC               	addwf	logf@k^(0+256),f
  5580  0149  30FF               	movlw	255
  5581  014A  3DBD               	addwfc	(logf@k+1)^(0+256),f
  5582  014B  304C               	movlw	76
  5583  014C  0021               	movlb	1	; select bank1
  5584  014D  00AB               	movwf	(___flmul@b+3)^(0+128)
  5585  014E  3000               	movlw	0
  5586  014F  00AA               	movwf	(___flmul@b+2)^(0+128)
  5587  0150  3000               	movlw	0
  5588  0151  00A9               	movwf	(___flmul@b+1)^(0+128)
  5589  0152  3000               	movlw	0
  5590  0153  00A8               	movwf	___flmul@b^(0+128)
  5591  0154  085A               	movf	(logf@x+3)^(0+128),w
  5592  0155  00AF               	movwf	(___flmul@a+3)^(0+128)
  5593  0156  0859               	movf	(logf@x+2)^(0+128),w
  5594  0157  00AE               	movwf	(___flmul@a+2)^(0+128)
  5595  0158  0858               	movf	(logf@x+1)^(0+128),w
  5596  0159  00AD               	movwf	(___flmul@a+1)^(0+128)
  5597  015A  0857               	movf	logf@x^(0+128),w
  5598  015B  00AC               	movwf	___flmul@a^(0+128)
  5599  015C  318A  226F  3180   	fcall	___flmul
  5600  015F  082B               	movf	(?___flmul+3)^(0+128),w
  5601  0160  00DA               	movwf	(logf@x+3)^(0+128)
  5602  0161  082A               	movf	(?___flmul+2)^(0+128),w
  5603  0162  00D9               	movwf	(logf@x+2)^(0+128)
  5604  0163  0829               	movf	(?___flmul+1)^(0+128),w
  5605  0164  00D8               	movwf	(logf@x+1)^(0+128)
  5606  0165  0828               	movf	?___flmul^(0+128),w
  5607  0166  00D7               	movwf	logf@x^(0+128)
  5608  0167  085A               	movf	(logf@x+3)^(0+128),w
  5609  0168  0022               	movlb	2	; select bank2
  5610  0169  00D9               	movwf	(logf@u+3)^(0+256)
  5611  016A  0021               	movlb	1	; select bank1
  5612  016B  0859               	movf	(logf@x+2)^(0+128),w
  5613  016C  0022               	movlb	2	; select bank2
  5614  016D  00D8               	movwf	(logf@u+2)^(0+256)
  5615  016E  0021               	movlb	1	; select bank1
  5616  016F  0858               	movf	(logf@x+1)^(0+128),w
  5617  0170  0022               	movlb	2	; select bank2
  5618  0171  00D7               	movwf	(logf@u+1)^(0+256)
  5619  0172  0021               	movlb	1	; select bank1
  5620  0173  0857               	movf	logf@x^(0+128),w
  5621  0174  0022               	movlb	2	; select bank2
  5622  0175  00D6               	movwf	logf@u^(0+256)
  5623  0176  0859               	movf	(logf@u+3)^(0+256),w
  5624  0177  00E1               	movwf	(logf@ix+3)^(0+256)
  5625  0178  0858               	movf	(logf@u+2)^(0+256),w
  5626  0179  00E0               	movwf	(logf@ix+2)^(0+256)
  5627  017A  0857               	movf	(logf@u+1)^(0+256),w
  5628  017B  00DF               	movwf	(logf@ix+1)^(0+256)
  5629  017C  0856               	movf	logf@u^(0+256),w
  5630  017D  00DE               	movwf	logf@ix^(0+256)
  5631  017E  299A               	goto	l5853
  5632  017F                     l5841:
  5633  017F  3080               	movlw	128
  5634  0180  0022               	movlb	2	; select bank2
  5635  0181  0260               	subwf	(logf@ix+2)^(0+256),w
  5636  0182  307F               	movlw	127
  5637  0183  3B61               	subwfb	(logf@ix+3)^(0+256),w
  5638  0184  1803               	btfsc	3,0
  5639  0185  0008               	return
  5640  0186  3080               	movlw	128
  5641  0187  0022               	movlb	2	; select bank2
  5642  0188  0660               	xorwf	(logf@ix+2)^(0+256),w
  5643  0189  303F               	movlw	63
  5644  018A  1903               	skipnz
  5645  018B  0661               	xorwf	(logf@ix+3)^(0+256),w
  5646  018C  045E               	iorwf	logf@ix^(0+256),w
  5647  018D  045F               	iorwf	(logf@ix+1)^(0+256),w
  5648  018E  1D03               	btfss	3,2
  5649  018F  299A               	goto	l5853
  5650  0190  3000               	movlw	0
  5651  0191  0021               	movlb	1	; select bank1
  5652  0192  00DA               	movwf	(?_logf+3)^(0+128)
  5653  0193  3000               	movlw	0
  5654  0194  00D9               	movwf	(?_logf+2)^(0+128)
  5655  0195  3000               	movlw	0
  5656  0196  00D8               	movwf	(?_logf+1)^(0+128)
  5657  0197  3000               	movlw	0
  5658  0198  00D7               	movwf	?_logf^(0+128)
  5659  0199  0008               	return
  5660  019A                     l5853:
  5661  019A  300D               	movlw	13
  5662  019B  0022               	movlb	2	; select bank2
  5663  019C  07DE               	addwf	logf@ix^(0+256),f
  5664  019D  30FB               	movlw	251
  5665  019E  3DDF               	addwfc	(logf@ix+1)^(0+256),f
  5666  019F  304A               	movlw	74
  5667  01A0  3DE0               	addwfc	(logf@ix+2)^(0+256),f
  5668  01A1  3000               	movlw	0
  5669  01A2  3DE1               	addwfc	(logf@ix+3)^(0+256),f
  5670  01A3  085E               	movf	logf@ix^(0+256),w
  5671  01A4  0021               	movlb	1	; select bank1
  5672  01A5  00DB               	movwf	??_logf^(0+128)
  5673  01A6  0022               	movlb	2	; select bank2
  5674  01A7  085F               	movf	(logf@ix+1)^(0+256),w
  5675  01A8  0021               	movlb	1	; select bank1
  5676  01A9  00DC               	movwf	(??_logf^(0+128)+1)
  5677  01AA  0022               	movlb	2	; select bank2
  5678  01AB  0860               	movf	(logf@ix+2)^(0+256),w
  5679  01AC  0021               	movlb	1	; select bank1
  5680  01AD  00DD               	movwf	(??_logf^(0+128)+2)
  5681  01AE  0022               	movlb	2	; select bank2
  5682  01AF  0861               	movf	(logf@ix+3)^(0+256),w
  5683  01B0  0021               	movlb	1	; select bank1
  5684  01B1  00DE               	movwf	(??_logf^(0+128)+3)
  5685  01B2  3017               	movlw	23
  5686  01B3                     u5525:
  5687  01B3  36DE               	lsrf	(??_logf^(0+128)+3),f
  5688  01B4  0CDD               	rrf	(??_logf^(0+128)+2),f
  5689  01B5  0CDC               	rrf	(??_logf^(0+128)+1),f
  5690  01B6  0CDB               	rrf	??_logf^(0+128),f
  5691  01B7  0B89               	decfsz	9,f
  5692  01B8  29B3               	goto	u5525
  5693  01B9  085B               	movf	??_logf^(0+128),w
  5694  01BA  3E81               	addlw	129
  5695  01BB  00DF               	movwf	(??_logf+4)^(0+128)
  5696  01BC  30FF               	movlw	255
  5697  01BD  3D5C               	addwfc	(??_logf+1)^(0+128),w
  5698  01BE  00E0               	movwf	(??_logf+5)^(0+128)
  5699  01BF  085F               	movf	(??_logf+4)^(0+128),w
  5700  01C0  0022               	movlb	2	; select bank2
  5701  01C1  07BC               	addwf	logf@k^(0+256),f
  5702  01C2  0021               	movlb	1	; select bank1
  5703  01C3  0860               	movf	(??_logf+5)^(0+128),w
  5704  01C4  0022               	movlb	2	; select bank2
  5705  01C5  3DBD               	addwfc	(logf@k+1)^(0+256),f
  5706  01C6  30F3               	movlw	243
  5707  01C7  0021               	movlb	1	; select bank1
  5708  01C8  00DB               	movwf	??_logf^(0+128)
  5709  01C9  3004               	movlw	4
  5710  01CA  00DC               	movwf	(??_logf^(0+128)+1)
  5711  01CB  3035               	movlw	53
  5712  01CC  00DD               	movwf	(??_logf^(0+128)+2)
  5713  01CD  303F               	movlw	63
  5714  01CE  00DE               	movwf	(??_logf^(0+128)+3)
  5715  01CF  30FF               	movlw	255
  5716  01D0  0022               	movlb	2	; select bank2
  5717  01D1  055E               	andwf	logf@ix^(0+256),w
  5718  01D2  0021               	movlb	1	; select bank1
  5719  01D3  00DF               	movwf	(??_logf+4)^(0+128)
  5720  01D4  30FF               	movlw	255
  5721  01D5  0022               	movlb	2	; select bank2
  5722  01D6  055F               	andwf	(logf@ix+1)^(0+256),w
  5723  01D7  0021               	movlb	1	; select bank1
  5724  01D8  00E0               	movwf	((??_logf+4)^(0+128)+1)
  5725  01D9  307F               	movlw	127
  5726  01DA  0022               	movlb	2	; select bank2
  5727  01DB  0560               	andwf	(logf@ix+2)^(0+256),w
  5728  01DC  0021               	movlb	1	; select bank1
  5729  01DD  00E1               	movwf	((??_logf+4)^(0+128)+2)
  5730  01DE  3000               	movlw	0
  5731  01DF  0022               	movlb	2	; select bank2
  5732  01E0  0561               	andwf	(logf@ix+3)^(0+256),w
  5733  01E1  0021               	movlb	1	; select bank1
  5734  01E2  00E2               	movwf	((??_logf+4)^(0+128)+3)
  5735  01E3  085F               	movf	(??_logf+4)^(0+128),w
  5736  01E4  07DB               	addwf	??_logf^(0+128),f
  5737  01E5  0860               	movf	(??_logf+5)^(0+128),w
  5738  01E6  3DDC               	addwfc	(??_logf^(0+128)+1),f
  5739  01E7  0861               	movf	(??_logf+6)^(0+128),w
  5740  01E8  3DDD               	addwfc	(??_logf^(0+128)+2),f
  5741  01E9  0862               	movf	(??_logf+7)^(0+128),w
  5742  01EA  3DDE               	addwfc	(??_logf^(0+128)+3),f
  5743  01EB  085E               	movf	(??_logf+3)^(0+128),w
  5744  01EC  0022               	movlb	2	; select bank2
  5745  01ED  00E1               	movwf	(logf@ix+3)^(0+256)
  5746  01EE  0021               	movlb	1	; select bank1
  5747  01EF  085D               	movf	(??_logf+2)^(0+128),w
  5748  01F0  0022               	movlb	2	; select bank2
  5749  01F1  00E0               	movwf	(logf@ix+2)^(0+256)
  5750  01F2  0021               	movlb	1	; select bank1
  5751  01F3  085C               	movf	(??_logf+1)^(0+128),w
  5752  01F4  0022               	movlb	2	; select bank2
  5753  01F5  00DF               	movwf	(logf@ix+1)^(0+256)
  5754  01F6  0021               	movlb	1	; select bank1
  5755  01F7  085B               	movf	??_logf^(0+128),w
  5756  01F8  0022               	movlb	2	; select bank2
  5757  01F9  00DE               	movwf	logf@ix^(0+256)
  5758  01FA  0861               	movf	(logf@ix+3)^(0+256),w
  5759  01FB  00D9               	movwf	(logf@u+3)^(0+256)
  5760  01FC  0860               	movf	(logf@ix+2)^(0+256),w
  5761  01FD  00D8               	movwf	(logf@u+2)^(0+256)
  5762  01FE  085F               	movf	(logf@ix+1)^(0+256),w
  5763  01FF  00D7               	movwf	(logf@u+1)^(0+256)
  5764  0200  085E               	movf	logf@ix^(0+256),w
  5765  0201  00D6               	movwf	logf@u^(0+256)
  5766  0202  0859               	movf	(logf@u+3)^(0+256),w
  5767  0203  0021               	movlb	1	; select bank1
  5768  0204  00DA               	movwf	(logf@x+3)^(0+128)
  5769  0205  0022               	movlb	2	; select bank2
  5770  0206  0858               	movf	(logf@u+2)^(0+256),w
  5771  0207  0021               	movlb	1	; select bank1
  5772  0208  00D9               	movwf	(logf@x+2)^(0+128)
  5773  0209  0022               	movlb	2	; select bank2
  5774  020A  0857               	movf	(logf@u+1)^(0+256),w
  5775  020B  0021               	movlb	1	; select bank1
  5776  020C  00D8               	movwf	(logf@x+1)^(0+128)
  5777  020D  0022               	movlb	2	; select bank2
  5778  020E  0856               	movf	logf@u^(0+256),w
  5779  020F  0021               	movlb	1	; select bank1
  5780  0210  00D7               	movwf	logf@x^(0+128)
  5781  0211  30BF               	movlw	191
  5782  0212  0020               	movlb	0	; select bank0
  5783  0213  00BA               	movwf	___fladd@b+3
  5784  0214  3080               	movlw	128
  5785  0215  00B9               	movwf	___fladd@b+2
  5786  0216  3000               	movlw	0
  5787  0217  00B8               	movwf	___fladd@b+1
  5788  0218  3000               	movlw	0
  5789  0219  00B7               	movwf	___fladd@b
  5790  021A  0021               	movlb	1	; select bank1
  5791  021B  085A               	movf	(logf@x+3)^(0+128),w
  5792  021C  0020               	movlb	0	; select bank0
  5793  021D  00BE               	movwf	___fladd@a+3
  5794  021E  0021               	movlb	1	; select bank1
  5795  021F  0859               	movf	(logf@x+2)^(0+128),w
  5796  0220  0020               	movlb	0	; select bank0
  5797  0221  00BD               	movwf	___fladd@a+2
  5798  0222  0021               	movlb	1	; select bank1
  5799  0223  0858               	movf	(logf@x+1)^(0+128),w
  5800  0224  0020               	movlb	0	; select bank0
  5801  0225  00BC               	movwf	___fladd@a+1
  5802  0226  0021               	movlb	1	; select bank1
  5803  0227  0857               	movf	logf@x^(0+128),w
  5804  0228  0020               	movlb	0	; select bank0
  5805  0229  00BB               	movwf	___fladd@a
  5806  022A  3185  25D4  3180   	fcall	___fladd
  5807  022D  083A               	movf	?___fladd+3,w
  5808  022E  0022               	movlb	2	; select bank2
  5809  022F  00DD               	movwf	(logf@f+3)^(0+256)
  5810  0230  0020               	movlb	0	; select bank0
  5811  0231  0839               	movf	?___fladd+2,w
  5812  0232  0022               	movlb	2	; select bank2
  5813  0233  00DC               	movwf	(logf@f+2)^(0+256)
  5814  0234  0020               	movlb	0	; select bank0
  5815  0235  0838               	movf	?___fladd+1,w
  5816  0236  0022               	movlb	2	; select bank2
  5817  0237  00DB               	movwf	(logf@f+1)^(0+256)
  5818  0238  0020               	movlb	0	; select bank0
  5819  0239  0837               	movf	?___fladd,w
  5820  023A  0022               	movlb	2	; select bank2
  5821  023B  00DA               	movwf	logf@f^(0+256)
  5822  023C  3040               	movlw	64
  5823  023D  0020               	movlb	0	; select bank0
  5824  023E  00BA               	movwf	___fladd@b+3
  5825  023F  3000               	movlw	0
  5826  0240  00B9               	movwf	___fladd@b+2
  5827  0241  3000               	movlw	0
  5828  0242  00B8               	movwf	___fladd@b+1
  5829  0243  3000               	movlw	0
  5830  0244  00B7               	movwf	___fladd@b
  5831  0245  0022               	movlb	2	; select bank2
  5832  0246  085D               	movf	(logf@f+3)^(0+256),w
  5833  0247  0020               	movlb	0	; select bank0
  5834  0248  00BE               	movwf	___fladd@a+3
  5835  0249  0022               	movlb	2	; select bank2
  5836  024A  085C               	movf	(logf@f+2)^(0+256),w
  5837  024B  0020               	movlb	0	; select bank0
  5838  024C  00BD               	movwf	___fladd@a+2
  5839  024D  0022               	movlb	2	; select bank2
  5840  024E  085B               	movf	(logf@f+1)^(0+256),w
  5841  024F  0020               	movlb	0	; select bank0
  5842  0250  00BC               	movwf	___fladd@a+1
  5843  0251  0022               	movlb	2	; select bank2
  5844  0252  085A               	movf	logf@f^(0+256),w
  5845  0253  0020               	movlb	0	; select bank0
  5846  0254  00BB               	movwf	___fladd@a
  5847  0255  3185  25D4  3180   	fcall	___fladd
  5848  0258  083A               	movf	?___fladd+3,w
  5849  0259  0021               	movlb	1	; select bank1
  5850  025A  00C0               	movwf	(___fldiv@a+3)^(0+128)
  5851  025B  0020               	movlb	0	; select bank0
  5852  025C  0839               	movf	?___fladd+2,w
  5853  025D  0021               	movlb	1	; select bank1
  5854  025E  00BF               	movwf	(___fldiv@a+2)^(0+128)
  5855  025F  0020               	movlb	0	; select bank0
  5856  0260  0838               	movf	?___fladd+1,w
  5857  0261  0021               	movlb	1	; select bank1
  5858  0262  00BE               	movwf	(___fldiv@a+1)^(0+128)
  5859  0263  0020               	movlb	0	; select bank0
  5860  0264  0837               	movf	?___fladd,w
  5861  0265  0021               	movlb	1	; select bank1
  5862  0266  00BD               	movwf	___fldiv@a^(0+128)
  5863  0267  0022               	movlb	2	; select bank2
  5864  0268  085D               	movf	(logf@f+3)^(0+256),w
  5865  0269  0021               	movlb	1	; select bank1
  5866  026A  00C4               	movwf	(___fldiv@b+3)^(0+128)
  5867  026B  0022               	movlb	2	; select bank2
  5868  026C  085C               	movf	(logf@f+2)^(0+256),w
  5869  026D  0021               	movlb	1	; select bank1
  5870  026E  00C3               	movwf	(___fldiv@b+2)^(0+128)
  5871  026F  0022               	movlb	2	; select bank2
  5872  0270  085B               	movf	(logf@f+1)^(0+256),w
  5873  0271  0021               	movlb	1	; select bank1
  5874  0272  00C2               	movwf	(___fldiv@b+1)^(0+128)
  5875  0273  0022               	movlb	2	; select bank2
  5876  0274  085A               	movf	logf@f^(0+256),w
  5877  0275  0021               	movlb	1	; select bank1
  5878  0276  00C1               	movwf	___fldiv@b^(0+128)
  5879  0277  3195  2508  3180   	fcall	___fldiv
  5880  027A  0840               	movf	(?___fldiv+3)^(0+128),w
  5881  027B  0022               	movlb	2	; select bank2
  5882  027C  00C9               	movwf	(logf@s+3)^(0+256)
  5883  027D  0021               	movlb	1	; select bank1
  5884  027E  083F               	movf	(?___fldiv+2)^(0+128),w
  5885  027F  0022               	movlb	2	; select bank2
  5886  0280  00C8               	movwf	(logf@s+2)^(0+256)
  5887  0281  0021               	movlb	1	; select bank1
  5888  0282  083E               	movf	(?___fldiv+1)^(0+128),w
  5889  0283  0022               	movlb	2	; select bank2
  5890  0284  00C7               	movwf	(logf@s+1)^(0+256)
  5891  0285  0021               	movlb	1	; select bank1
  5892  0286  083D               	movf	?___fldiv^(0+128),w
  5893  0287  0022               	movlb	2	; select bank2
  5894  0288  00C6               	movwf	logf@s^(0+256)
  5895  0289  0849               	movf	(logf@s+3)^(0+256),w
  5896  028A  0021               	movlb	1	; select bank1
  5897  028B  00AB               	movwf	(___flmul@b+3)^(0+128)
  5898  028C  0022               	movlb	2	; select bank2
  5899  028D  0848               	movf	(logf@s+2)^(0+256),w
  5900  028E  0021               	movlb	1	; select bank1
  5901  028F  00AA               	movwf	(___flmul@b+2)^(0+128)
  5902  0290  0022               	movlb	2	; select bank2
  5903  0291  0847               	movf	(logf@s+1)^(0+256),w
  5904  0292  0021               	movlb	1	; select bank1
  5905  0293  00A9               	movwf	(___flmul@b+1)^(0+128)
  5906  0294  0022               	movlb	2	; select bank2
  5907  0295  0846               	movf	logf@s^(0+256),w
  5908  0296  0021               	movlb	1	; select bank1
  5909  0297  00A8               	movwf	___flmul@b^(0+128)
  5910  0298  0022               	movlb	2	; select bank2
  5911  0299  0849               	movf	(logf@s+3)^(0+256),w
  5912  029A  0021               	movlb	1	; select bank1
  5913  029B  00AF               	movwf	(___flmul@a+3)^(0+128)
  5914  029C  0022               	movlb	2	; select bank2
  5915  029D  0848               	movf	(logf@s+2)^(0+256),w
  5916  029E  0021               	movlb	1	; select bank1
  5917  029F  00AE               	movwf	(___flmul@a+2)^(0+128)
  5918  02A0  0022               	movlb	2	; select bank2
  5919  02A1  0847               	movf	(logf@s+1)^(0+256),w
  5920  02A2  0021               	movlb	1	; select bank1
  5921  02A3  00AD               	movwf	(___flmul@a+1)^(0+128)
  5922  02A4  0022               	movlb	2	; select bank2
  5923  02A5  0846               	movf	logf@s^(0+256),w
  5924  02A6  0021               	movlb	1	; select bank1
  5925  02A7  00AC               	movwf	___flmul@a^(0+128)
  5926  02A8  318A  226F  3180   	fcall	___flmul
  5927  02AB  082B               	movf	(?___flmul+3)^(0+128),w
  5928  02AC  0022               	movlb	2	; select bank2
  5929  02AD  00CD               	movwf	(logf@z+3)^(0+256)
  5930  02AE  0021               	movlb	1	; select bank1
  5931  02AF  082A               	movf	(?___flmul+2)^(0+128),w
  5932  02B0  0022               	movlb	2	; select bank2
  5933  02B1  00CC               	movwf	(logf@z+2)^(0+256)
  5934  02B2  0021               	movlb	1	; select bank1
  5935  02B3  0829               	movf	(?___flmul+1)^(0+128),w
  5936  02B4  0022               	movlb	2	; select bank2
  5937  02B5  00CB               	movwf	(logf@z+1)^(0+256)
  5938  02B6  0021               	movlb	1	; select bank1
  5939  02B7  0828               	movf	?___flmul^(0+128),w
  5940  02B8  0022               	movlb	2	; select bank2
  5941  02B9  00CA               	movwf	logf@z^(0+256)
  5942  02BA  084D               	movf	(logf@z+3)^(0+256),w
  5943  02BB  0021               	movlb	1	; select bank1
  5944  02BC  00AB               	movwf	(___flmul@b+3)^(0+128)
  5945  02BD  0022               	movlb	2	; select bank2
  5946  02BE  084C               	movf	(logf@z+2)^(0+256),w
  5947  02BF  0021               	movlb	1	; select bank1
  5948  02C0  00AA               	movwf	(___flmul@b+2)^(0+128)
  5949  02C1  0022               	movlb	2	; select bank2
  5950  02C2  084B               	movf	(logf@z+1)^(0+256),w
  5951  02C3  0021               	movlb	1	; select bank1
  5952  02C4  00A9               	movwf	(___flmul@b+1)^(0+128)
  5953  02C5  0022               	movlb	2	; select bank2
  5954  02C6  084A               	movf	logf@z^(0+256),w
  5955  02C7  0021               	movlb	1	; select bank1
  5956  02C8  00A8               	movwf	___flmul@b^(0+128)
  5957  02C9  0022               	movlb	2	; select bank2
  5958  02CA  084D               	movf	(logf@z+3)^(0+256),w
  5959  02CB  0021               	movlb	1	; select bank1
  5960  02CC  00AF               	movwf	(___flmul@a+3)^(0+128)
  5961  02CD  0022               	movlb	2	; select bank2
  5962  02CE  084C               	movf	(logf@z+2)^(0+256),w
  5963  02CF  0021               	movlb	1	; select bank1
  5964  02D0  00AE               	movwf	(___flmul@a+2)^(0+128)
  5965  02D1  0022               	movlb	2	; select bank2
  5966  02D2  084B               	movf	(logf@z+1)^(0+256),w
  5967  02D3  0021               	movlb	1	; select bank1
  5968  02D4  00AD               	movwf	(___flmul@a+1)^(0+128)
  5969  02D5  0022               	movlb	2	; select bank2
  5970  02D6  084A               	movf	logf@z^(0+256),w
  5971  02D7  0021               	movlb	1	; select bank1
  5972  02D8  00AC               	movwf	___flmul@a^(0+128)
  5973  02D9  318A  226F  3180   	fcall	___flmul
  5974  02DC  082B               	movf	(?___flmul+3)^(0+128),w
  5975  02DD  0022               	movlb	2	; select bank2
  5976  02DE  00D1               	movwf	(logf@w+3)^(0+256)
  5977  02DF  0021               	movlb	1	; select bank1
  5978  02E0  082A               	movf	(?___flmul+2)^(0+128),w
  5979  02E1  0022               	movlb	2	; select bank2
  5980  02E2  00D0               	movwf	(logf@w+2)^(0+256)
  5981  02E3  0021               	movlb	1	; select bank1
  5982  02E4  0829               	movf	(?___flmul+1)^(0+128),w
  5983  02E5  0022               	movlb	2	; select bank2
  5984  02E6  00CF               	movwf	(logf@w+1)^(0+256)
  5985  02E7  0021               	movlb	1	; select bank1
  5986  02E8  0828               	movf	?___flmul^(0+128),w
  5987  02E9  0022               	movlb	2	; select bank2
  5988  02EA  00CE               	movwf	logf@w^(0+256)
  5989  02EB  303E               	movlw	62
  5990  02EC  0020               	movlb	0	; select bank0
  5991  02ED  00BA               	movwf	___fladd@b+3
  5992  02EE  30CC               	movlw	204
  5993  02EF  00B9               	movwf	___fladd@b+2
  5994  02F0  30CE               	movlw	206
  5995  02F1  00B8               	movwf	___fladd@b+1
  5996  02F2  3013               	movlw	19
  5997  02F3  00B7               	movwf	___fladd@b
  5998  02F4  303E               	movlw	62
  5999  02F5  0021               	movlb	1	; select bank1
  6000  02F6  00AB               	movwf	(___flmul@b+3)^(0+128)
  6001  02F7  3078               	movlw	120
  6002  02F8  00AA               	movwf	(___flmul@b+2)^(0+128)
  6003  02F9  309E               	movlw	158
  6004  02FA  00A9               	movwf	(___flmul@b+1)^(0+128)
  6005  02FB  3026               	movlw	38
  6006  02FC  00A8               	movwf	___flmul@b^(0+128)
  6007  02FD  0022               	movlb	2	; select bank2
  6008  02FE  0851               	movf	(logf@w+3)^(0+256),w
  6009  02FF  0021               	movlb	1	; select bank1
  6010  0300  00AF               	movwf	(___flmul@a+3)^(0+128)
  6011  0301  0022               	movlb	2	; select bank2
  6012  0302  0850               	movf	(logf@w+2)^(0+256),w
  6013  0303  0021               	movlb	1	; select bank1
  6014  0304  00AE               	movwf	(___flmul@a+2)^(0+128)
  6015  0305  0022               	movlb	2	; select bank2
  6016  0306  084F               	movf	(logf@w+1)^(0+256),w
  6017  0307  0021               	movlb	1	; select bank1
  6018  0308  00AD               	movwf	(___flmul@a+1)^(0+128)
  6019  0309  0022               	movlb	2	; select bank2
  6020  030A  084E               	movf	logf@w^(0+256),w
  6021  030B  0021               	movlb	1	; select bank1
  6022  030C  00AC               	movwf	___flmul@a^(0+128)
  6023  030D  318A  226F  3180   	fcall	___flmul
  6024  0310  082B               	movf	(?___flmul+3)^(0+128),w
  6025  0311  0020               	movlb	0	; select bank0
  6026  0312  00BE               	movwf	___fladd@a+3
  6027  0313  0021               	movlb	1	; select bank1
  6028  0314  082A               	movf	(?___flmul+2)^(0+128),w
  6029  0315  0020               	movlb	0	; select bank0
  6030  0316  00BD               	movwf	___fladd@a+2
  6031  0317  0021               	movlb	1	; select bank1
  6032  0318  0829               	movf	(?___flmul+1)^(0+128),w
  6033  0319  0020               	movlb	0	; select bank0
  6034  031A  00BC               	movwf	___fladd@a+1
  6035  031B  0021               	movlb	1	; select bank1
  6036  031C  0828               	movf	?___flmul^(0+128),w
  6037  031D  0020               	movlb	0	; select bank0
  6038  031E  00BB               	movwf	___fladd@a
  6039  031F  3185  25D4  3180   	fcall	___fladd
  6040  0322  083A               	movf	?___fladd+3,w
  6041  0323  0022               	movlb	2	; select bank2
  6042  0324  00D5               	movwf	(_logf$2277+3)^(0+256)
  6043  0325  0020               	movlb	0	; select bank0
  6044  0326  0839               	movf	?___fladd+2,w
  6045  0327  0022               	movlb	2	; select bank2
  6046  0328  00D4               	movwf	(_logf$2277+2)^(0+256)
  6047  0329  0020               	movlb	0	; select bank0
  6048  032A  0838               	movf	?___fladd+1,w
  6049  032B  0022               	movlb	2	; select bank2
  6050  032C  00D3               	movwf	(_logf$2277+1)^(0+256)
  6051  032D  0020               	movlb	0	; select bank0
  6052  032E  0837               	movf	?___fladd,w
  6053  032F  0022               	movlb	2	; select bank2
  6054  0330  00D2               	movwf	_logf$2277^(0+256)
  6055  0331  0851               	movf	(logf@w+3)^(0+256),w
  6056  0332  0021               	movlb	1	; select bank1
  6057  0333  00AB               	movwf	(___flmul@b+3)^(0+128)
  6058  0334  0022               	movlb	2	; select bank2
  6059  0335  0850               	movf	(logf@w+2)^(0+256),w
  6060  0336  0021               	movlb	1	; select bank1
  6061  0337  00AA               	movwf	(___flmul@b+2)^(0+128)
  6062  0338  0022               	movlb	2	; select bank2
  6063  0339  084F               	movf	(logf@w+1)^(0+256),w
  6064  033A  0021               	movlb	1	; select bank1
  6065  033B  00A9               	movwf	(___flmul@b+1)^(0+128)
  6066  033C  0022               	movlb	2	; select bank2
  6067  033D  084E               	movf	logf@w^(0+256),w
  6068  033E  0021               	movlb	1	; select bank1
  6069  033F  00A8               	movwf	___flmul@b^(0+128)
  6070  0340  0022               	movlb	2	; select bank2
  6071  0341  0855               	movf	(_logf$2277+3)^(0+256),w
  6072  0342  0021               	movlb	1	; select bank1
  6073  0343  00AF               	movwf	(___flmul@a+3)^(0+128)
  6074  0344  0022               	movlb	2	; select bank2
  6075  0345  0854               	movf	(_logf$2277+2)^(0+256),w
  6076  0346  0021               	movlb	1	; select bank1
  6077  0347  00AE               	movwf	(___flmul@a+2)^(0+128)
  6078  0348  0022               	movlb	2	; select bank2
  6079  0349  0853               	movf	(_logf$2277+1)^(0+256),w
  6080  034A  0021               	movlb	1	; select bank1
  6081  034B  00AD               	movwf	(___flmul@a+1)^(0+128)
  6082  034C  0022               	movlb	2	; select bank2
  6083  034D  0852               	movf	_logf$2277^(0+256),w
  6084  034E  0021               	movlb	1	; select bank1
  6085  034F  00AC               	movwf	___flmul@a^(0+128)
  6086  0350  318A  226F  3180   	fcall	___flmul
  6087  0353  082B               	movf	(?___flmul+3)^(0+128),w
  6088  0354  0022               	movlb	2	; select bank2
  6089  0355  00A7               	movwf	(logf@t1+3)^(0+256)
  6090  0356  0021               	movlb	1	; select bank1
  6091  0357  082A               	movf	(?___flmul+2)^(0+128),w
  6092  0358  0022               	movlb	2	; select bank2
  6093  0359  00A6               	movwf	(logf@t1+2)^(0+256)
  6094  035A  0021               	movlb	1	; select bank1
  6095  035B  0829               	movf	(?___flmul+1)^(0+128),w
  6096  035C  0022               	movlb	2	; select bank2
  6097  035D  00A5               	movwf	(logf@t1+1)^(0+256)
  6098  035E  0021               	movlb	1	; select bank1
  6099  035F  0828               	movf	?___flmul^(0+128),w
  6100  0360  0022               	movlb	2	; select bank2
  6101  0361  00A4               	movwf	logf@t1^(0+256)
  6102  0362  303F               	movlw	63
  6103  0363  0020               	movlb	0	; select bank0
  6104  0364  00BA               	movwf	___fladd@b+3
  6105  0365  302A               	movlw	42
  6106  0366  00B9               	movwf	___fladd@b+2
  6107  0367  30AA               	movlw	170
  6108  0368  00B8               	movwf	___fladd@b+1
  6109  0369  30AA               	movlw	170
  6110  036A  00B7               	movwf	___fladd@b
  6111  036B  303E               	movlw	62
  6112  036C  0021               	movlb	1	; select bank1
  6113  036D  00AB               	movwf	(___flmul@b+3)^(0+128)
  6114  036E  3091               	movlw	145
  6115  036F  00AA               	movwf	(___flmul@b+2)^(0+128)
  6116  0370  30E9               	movlw	233
  6117  0371  00A9               	movwf	(___flmul@b+1)^(0+128)
  6118  0372  30EE               	movlw	238
  6119  0373  00A8               	movwf	___flmul@b^(0+128)
  6120  0374  0022               	movlb	2	; select bank2
  6121  0375  0851               	movf	(logf@w+3)^(0+256),w
  6122  0376  0021               	movlb	1	; select bank1
  6123  0377  00AF               	movwf	(___flmul@a+3)^(0+128)
  6124  0378  0022               	movlb	2	; select bank2
  6125  0379  0850               	movf	(logf@w+2)^(0+256),w
  6126  037A  0021               	movlb	1	; select bank1
  6127  037B  00AE               	movwf	(___flmul@a+2)^(0+128)
  6128  037C  0022               	movlb	2	; select bank2
  6129  037D  084F               	movf	(logf@w+1)^(0+256),w
  6130  037E  0021               	movlb	1	; select bank1
  6131  037F  00AD               	movwf	(___flmul@a+1)^(0+128)
  6132  0380  0022               	movlb	2	; select bank2
  6133  0381  084E               	movf	logf@w^(0+256),w
  6134  0382  0021               	movlb	1	; select bank1
  6135  0383  00AC               	movwf	___flmul@a^(0+128)
  6136  0384  318A  226F  3180   	fcall	___flmul
  6137  0387  082B               	movf	(?___flmul+3)^(0+128),w
  6138  0388  0020               	movlb	0	; select bank0
  6139  0389  00BE               	movwf	___fladd@a+3
  6140  038A  0021               	movlb	1	; select bank1
  6141  038B  082A               	movf	(?___flmul+2)^(0+128),w
  6142  038C  0020               	movlb	0	; select bank0
  6143  038D  00BD               	movwf	___fladd@a+2
  6144  038E  0021               	movlb	1	; select bank1
  6145  038F  0829               	movf	(?___flmul+1)^(0+128),w
  6146  0390  0020               	movlb	0	; select bank0
  6147  0391  00BC               	movwf	___fladd@a+1
  6148  0392  0021               	movlb	1	; select bank1
  6149  0393  0828               	movf	?___flmul^(0+128),w
  6150  0394  0020               	movlb	0	; select bank0
  6151  0395  00BB               	movwf	___fladd@a
  6152  0396  3185  25D4  3180   	fcall	___fladd
  6153  0399  083A               	movf	?___fladd+3,w
  6154  039A  0022               	movlb	2	; select bank2
  6155  039B  00D5               	movwf	(_logf$2277+3)^(0+256)
  6156  039C  0020               	movlb	0	; select bank0
  6157  039D  0839               	movf	?___fladd+2,w
  6158  039E  0022               	movlb	2	; select bank2
  6159  039F  00D4               	movwf	(_logf$2277+2)^(0+256)
  6160  03A0  0020               	movlb	0	; select bank0
  6161  03A1  0838               	movf	?___fladd+1,w
  6162  03A2  0022               	movlb	2	; select bank2
  6163  03A3  00D3               	movwf	(_logf$2277+1)^(0+256)
  6164  03A4  0020               	movlb	0	; select bank0
  6165  03A5  0837               	movf	?___fladd,w
  6166  03A6  0022               	movlb	2	; select bank2
  6167  03A7  00D2               	movwf	_logf$2277^(0+256)
  6168  03A8  084D               	movf	(logf@z+3)^(0+256),w
  6169  03A9  0021               	movlb	1	; select bank1
  6170  03AA  00AB               	movwf	(___flmul@b+3)^(0+128)
  6171  03AB  0022               	movlb	2	; select bank2
  6172  03AC  084C               	movf	(logf@z+2)^(0+256),w
  6173  03AD  0021               	movlb	1	; select bank1
  6174  03AE  00AA               	movwf	(___flmul@b+2)^(0+128)
  6175  03AF  0022               	movlb	2	; select bank2
  6176  03B0  084B               	movf	(logf@z+1)^(0+256),w
  6177  03B1  0021               	movlb	1	; select bank1
  6178  03B2  00A9               	movwf	(___flmul@b+1)^(0+128)
  6179  03B3  0022               	movlb	2	; select bank2
  6180  03B4  084A               	movf	logf@z^(0+256),w
  6181  03B5  0021               	movlb	1	; select bank1
  6182  03B6  00A8               	movwf	___flmul@b^(0+128)
  6183  03B7  0022               	movlb	2	; select bank2
  6184  03B8  0855               	movf	(_logf$2277+3)^(0+256),w
  6185  03B9  0021               	movlb	1	; select bank1
  6186  03BA  00AF               	movwf	(___flmul@a+3)^(0+128)
  6187  03BB  0022               	movlb	2	; select bank2
  6188  03BC  0854               	movf	(_logf$2277+2)^(0+256),w
  6189  03BD  0021               	movlb	1	; select bank1
  6190  03BE  00AE               	movwf	(___flmul@a+2)^(0+128)
  6191  03BF  0022               	movlb	2	; select bank2
  6192  03C0  0853               	movf	(_logf$2277+1)^(0+256),w
  6193  03C1  0021               	movlb	1	; select bank1
  6194  03C2  00AD               	movwf	(___flmul@a+1)^(0+128)
  6195  03C3  0022               	movlb	2	; select bank2
  6196  03C4  0852               	movf	_logf$2277^(0+256),w
  6197  03C5  0021               	movlb	1	; select bank1
  6198  03C6  00AC               	movwf	___flmul@a^(0+128)
  6199  03C7  318A  226F  3180   	fcall	___flmul
  6200  03CA  082B               	movf	(?___flmul+3)^(0+128),w
  6201  03CB  0022               	movlb	2	; select bank2
  6202  03CC  00AB               	movwf	(logf@t2+3)^(0+256)
  6203  03CD  0021               	movlb	1	; select bank1
  6204  03CE  082A               	movf	(?___flmul+2)^(0+128),w
  6205  03CF  0022               	movlb	2	; select bank2
  6206  03D0  00AA               	movwf	(logf@t2+2)^(0+256)
  6207  03D1  0021               	movlb	1	; select bank1
  6208  03D2  0829               	movf	(?___flmul+1)^(0+128),w
  6209  03D3  0022               	movlb	2	; select bank2
  6210  03D4  00A9               	movwf	(logf@t2+1)^(0+256)
  6211  03D5  0021               	movlb	1	; select bank1
  6212  03D6  0828               	movf	?___flmul^(0+128),w
  6213  03D7  0022               	movlb	2	; select bank2
  6214  03D8  00A8               	movwf	logf@t2^(0+256)
  6215  03D9  0827               	movf	(logf@t1+3)^(0+256),w
  6216  03DA  0020               	movlb	0	; select bank0
  6217  03DB  00BA               	movwf	___fladd@b+3
  6218  03DC  0022               	movlb	2	; select bank2
  6219  03DD  0826               	movf	(logf@t1+2)^(0+256),w
  6220  03DE  0020               	movlb	0	; select bank0
  6221  03DF  00B9               	movwf	___fladd@b+2
  6222  03E0  0022               	movlb	2	; select bank2
  6223  03E1  0825               	movf	(logf@t1+1)^(0+256),w
  6224  03E2  0020               	movlb	0	; select bank0
  6225  03E3  00B8               	movwf	___fladd@b+1
  6226  03E4  0022               	movlb	2	; select bank2
  6227  03E5  0824               	movf	logf@t1^(0+256),w
  6228  03E6  0020               	movlb	0	; select bank0
  6229  03E7  00B7               	movwf	___fladd@b
  6230  03E8  0022               	movlb	2	; select bank2
  6231  03E9  082B               	movf	(logf@t2+3)^(0+256),w
  6232  03EA  0020               	movlb	0	; select bank0
  6233  03EB  00BE               	movwf	___fladd@a+3
  6234  03EC  0022               	movlb	2	; select bank2
  6235  03ED  082A               	movf	(logf@t2+2)^(0+256),w
  6236  03EE  0020               	movlb	0	; select bank0
  6237  03EF  00BD               	movwf	___fladd@a+2
  6238  03F0  0022               	movlb	2	; select bank2
  6239  03F1  0829               	movf	(logf@t2+1)^(0+256),w
  6240  03F2  0020               	movlb	0	; select bank0
  6241  03F3  00BC               	movwf	___fladd@a+1
  6242  03F4  0022               	movlb	2	; select bank2
  6243  03F5  0828               	movf	logf@t2^(0+256),w
  6244  03F6  0020               	movlb	0	; select bank0
  6245  03F7  00BB               	movwf	___fladd@a
  6246  03F8  3185  25D4  3180   	fcall	___fladd
  6247  03FB  083A               	movf	?___fladd+3,w
  6248  03FC  0022               	movlb	2	; select bank2
  6249  03FD  00A3               	movwf	(logf@R+3)^(0+256)
  6250  03FE  0020               	movlb	0	; select bank0
  6251  03FF  0839               	movf	?___fladd+2,w
  6252  0400  0022               	movlb	2	; select bank2
  6253  0401  00A2               	movwf	(logf@R+2)^(0+256)
  6254  0402  0020               	movlb	0	; select bank0
  6255  0403  0838               	movf	?___fladd+1,w
  6256  0404  0022               	movlb	2	; select bank2
  6257  0405  00A1               	movwf	(logf@R+1)^(0+256)
  6258  0406  0020               	movlb	0	; select bank0
  6259  0407  0837               	movf	?___fladd,w
  6260  0408  0022               	movlb	2	; select bank2
  6261  0409  00A0               	movwf	logf@R^(0+256)
  6262  040A  303F               	movlw	63
  6263  040B  0021               	movlb	1	; select bank1
  6264  040C  00AB               	movwf	(___flmul@b+3)^(0+128)
  6265  040D  3000               	movlw	0
  6266  040E  00AA               	movwf	(___flmul@b+2)^(0+128)
  6267  040F  3000               	movlw	0
  6268  0410  00A9               	movwf	(___flmul@b+1)^(0+128)
  6269  0411  3000               	movlw	0
  6270  0412  00A8               	movwf	___flmul@b^(0+128)
  6271  0413  0022               	movlb	2	; select bank2
  6272  0414  085D               	movf	(logf@f+3)^(0+256),w
  6273  0415  0021               	movlb	1	; select bank1
  6274  0416  00AF               	movwf	(___flmul@a+3)^(0+128)
  6275  0417  0022               	movlb	2	; select bank2
  6276  0418  085C               	movf	(logf@f+2)^(0+256),w
  6277  0419  0021               	movlb	1	; select bank1
  6278  041A  00AE               	movwf	(___flmul@a+2)^(0+128)
  6279  041B  0022               	movlb	2	; select bank2
  6280  041C  085B               	movf	(logf@f+1)^(0+256),w
  6281  041D  0021               	movlb	1	; select bank1
  6282  041E  00AD               	movwf	(___flmul@a+1)^(0+128)
  6283  041F  0022               	movlb	2	; select bank2
  6284  0420  085A               	movf	logf@f^(0+256),w
  6285  0421  0021               	movlb	1	; select bank1
  6286  0422  00AC               	movwf	___flmul@a^(0+128)
  6287  0423  318A  226F  3180   	fcall	___flmul
  6288  0426  082B               	movf	(?___flmul+3)^(0+128),w
  6289  0427  0022               	movlb	2	; select bank2
  6290  0428  00D5               	movwf	(_logf$2277+3)^(0+256)
  6291  0429  0021               	movlb	1	; select bank1
  6292  042A  082A               	movf	(?___flmul+2)^(0+128),w
  6293  042B  0022               	movlb	2	; select bank2
  6294  042C  00D4               	movwf	(_logf$2277+2)^(0+256)
  6295  042D  0021               	movlb	1	; select bank1
  6296  042E  0829               	movf	(?___flmul+1)^(0+128),w
  6297  042F  0022               	movlb	2	; select bank2
  6298  0430  00D3               	movwf	(_logf$2277+1)^(0+256)
  6299  0431  0021               	movlb	1	; select bank1
  6300  0432  0828               	movf	?___flmul^(0+128),w
  6301  0433  0022               	movlb	2	; select bank2
  6302  0434  00D2               	movwf	_logf$2277^(0+256)
  6303  0435  085D               	movf	(logf@f+3)^(0+256),w
  6304  0436  0021               	movlb	1	; select bank1
  6305  0437  00AB               	movwf	(___flmul@b+3)^(0+128)
  6306  0438  0022               	movlb	2	; select bank2
  6307  0439  085C               	movf	(logf@f+2)^(0+256),w
  6308  043A  0021               	movlb	1	; select bank1
  6309  043B  00AA               	movwf	(___flmul@b+2)^(0+128)
  6310  043C  0022               	movlb	2	; select bank2
  6311  043D  085B               	movf	(logf@f+1)^(0+256),w
  6312  043E  0021               	movlb	1	; select bank1
  6313  043F  00A9               	movwf	(___flmul@b+1)^(0+128)
  6314  0440  0022               	movlb	2	; select bank2
  6315  0441  085A               	movf	logf@f^(0+256),w
  6316  0442  0021               	movlb	1	; select bank1
  6317  0443  00A8               	movwf	___flmul@b^(0+128)
  6318  0444  0022               	movlb	2	; select bank2
  6319  0445  0855               	movf	(_logf$2277+3)^(0+256),w
  6320  0446  0021               	movlb	1	; select bank1
  6321  0447  00AF               	movwf	(___flmul@a+3)^(0+128)
  6322  0448  0022               	movlb	2	; select bank2
  6323  0449  0854               	movf	(_logf$2277+2)^(0+256),w
  6324  044A  0021               	movlb	1	; select bank1
  6325  044B  00AE               	movwf	(___flmul@a+2)^(0+128)
  6326  044C  0022               	movlb	2	; select bank2
  6327  044D  0853               	movf	(_logf$2277+1)^(0+256),w
  6328  044E  0021               	movlb	1	; select bank1
  6329  044F  00AD               	movwf	(___flmul@a+1)^(0+128)
  6330  0450  0022               	movlb	2	; select bank2
  6331  0451  0852               	movf	_logf$2277^(0+256),w
  6332  0452  0021               	movlb	1	; select bank1
  6333  0453  00AC               	movwf	___flmul@a^(0+128)
  6334  0454  318A  226F  3180   	fcall	___flmul
  6335  0457  082B               	movf	(?___flmul+3)^(0+128),w
  6336  0458  0022               	movlb	2	; select bank2
  6337  0459  00C1               	movwf	(logf@hfsq+3)^(0+256)
  6338  045A  0021               	movlb	1	; select bank1
  6339  045B  082A               	movf	(?___flmul+2)^(0+128),w
  6340  045C  0022               	movlb	2	; select bank2
  6341  045D  00C0               	movwf	(logf@hfsq+2)^(0+256)
  6342  045E  0021               	movlb	1	; select bank1
  6343  045F  0829               	movf	(?___flmul+1)^(0+128),w
  6344  0460  0022               	movlb	2	; select bank2
  6345  0461  00BF               	movwf	(logf@hfsq+1)^(0+256)
  6346  0462  0021               	movlb	1	; select bank1
  6347  0463  0828               	movf	?___flmul^(0+128),w
  6348  0464  0022               	movlb	2	; select bank2
  6349  0465  00BE               	movwf	logf@hfsq^(0+256)
  6350  0466  083C               	movf	logf@k^(0+256),w
  6351  0467  0020               	movlb	0	; select bank0
  6352  0468  00A9               	movwf	___xxtofl@val
  6353  0469  0022               	movlb	2	; select bank2
  6354  046A  083D               	movf	(logf@k+1)^(0+256),w
  6355  046B  0020               	movlb	0	; select bank0
  6356  046C  00AA               	movwf	___xxtofl@val+1
  6357  046D  0D89               	rlf	9,f
  6358  046E  3B89               	subwfb	9,f
  6359  046F  0989               	comf	9,f
  6360  0470  00AB               	movwf	___xxtofl@val+2
  6361  0471  00AC               	movwf	___xxtofl@val+3
  6362  0472  3001               	movlw	1
  6363  0473  3188  2052  3180   	fcall	___xxtofl
  6364  0476  082C               	movf	?___xxtofl+3,w
  6365  0477  0022               	movlb	2	; select bank2
  6366  0478  00C5               	movwf	(logf@dk+3)^(0+256)
  6367  0479  0020               	movlb	0	; select bank0
  6368  047A  082B               	movf	?___xxtofl+2,w
  6369  047B  0022               	movlb	2	; select bank2
  6370  047C  00C4               	movwf	(logf@dk+2)^(0+256)
  6371  047D  0020               	movlb	0	; select bank0
  6372  047E  082A               	movf	?___xxtofl+1,w
  6373  047F  0022               	movlb	2	; select bank2
  6374  0480  00C3               	movwf	(logf@dk+1)^(0+256)
  6375  0481  0020               	movlb	0	; select bank0
  6376  0482  0829               	movf	?___xxtofl,w
  6377  0483  0022               	movlb	2	; select bank2
  6378  0484  00C2               	movwf	logf@dk^(0+256)
  6379  0485  0849               	movf	(logf@s+3)^(0+256),w
  6380  0486  0021               	movlb	1	; select bank1
  6381  0487  00AB               	movwf	(___flmul@b+3)^(0+128)
  6382  0488  0022               	movlb	2	; select bank2
  6383  0489  0848               	movf	(logf@s+2)^(0+256),w
  6384  048A  0021               	movlb	1	; select bank1
  6385  048B  00AA               	movwf	(___flmul@b+2)^(0+128)
  6386  048C  0022               	movlb	2	; select bank2
  6387  048D  0847               	movf	(logf@s+1)^(0+256),w
  6388  048E  0021               	movlb	1	; select bank1
  6389  048F  00A9               	movwf	(___flmul@b+1)^(0+128)
  6390  0490  0022               	movlb	2	; select bank2
  6391  0491  0846               	movf	logf@s^(0+256),w
  6392  0492  0021               	movlb	1	; select bank1
  6393  0493  00A8               	movwf	___flmul@b^(0+128)
  6394  0494  0022               	movlb	2	; select bank2
  6395  0495  0823               	movf	(logf@R+3)^(0+256),w
  6396  0496  0020               	movlb	0	; select bank0
  6397  0497  00BA               	movwf	___fladd@b+3
  6398  0498  0022               	movlb	2	; select bank2
  6399  0499  0822               	movf	(logf@R+2)^(0+256),w
  6400  049A  0020               	movlb	0	; select bank0
  6401  049B  00B9               	movwf	___fladd@b+2
  6402  049C  0022               	movlb	2	; select bank2
  6403  049D  0821               	movf	(logf@R+1)^(0+256),w
  6404  049E  0020               	movlb	0	; select bank0
  6405  049F  00B8               	movwf	___fladd@b+1
  6406  04A0  0022               	movlb	2	; select bank2
  6407  04A1  0820               	movf	logf@R^(0+256),w
  6408  04A2  0020               	movlb	0	; select bank0
  6409  04A3  00B7               	movwf	___fladd@b
  6410  04A4  0022               	movlb	2	; select bank2
  6411  04A5  0841               	movf	(logf@hfsq+3)^(0+256),w
  6412  04A6  0020               	movlb	0	; select bank0
  6413  04A7  00BE               	movwf	___fladd@a+3
  6414  04A8  0022               	movlb	2	; select bank2
  6415  04A9  0840               	movf	(logf@hfsq+2)^(0+256),w
  6416  04AA  0020               	movlb	0	; select bank0
  6417  04AB  00BD               	movwf	___fladd@a+2
  6418  04AC  0022               	movlb	2	; select bank2
  6419  04AD  083F               	movf	(logf@hfsq+1)^(0+256),w
  6420  04AE  0020               	movlb	0	; select bank0
  6421  04AF  00BC               	movwf	___fladd@a+1
  6422  04B0  0022               	movlb	2	; select bank2
  6423  04B1  083E               	movf	logf@hfsq^(0+256),w
  6424  04B2  0020               	movlb	0	; select bank0
  6425  04B3  00BB               	movwf	___fladd@a
  6426  04B4  3185  25D4  3180   	fcall	___fladd
  6427  04B7  083A               	movf	?___fladd+3,w
  6428  04B8  0021               	movlb	1	; select bank1
  6429  04B9  00AF               	movwf	(___flmul@a+3)^(0+128)
  6430  04BA  0020               	movlb	0	; select bank0
  6431  04BB  0839               	movf	?___fladd+2,w
  6432  04BC  0021               	movlb	1	; select bank1
  6433  04BD  00AE               	movwf	(___flmul@a+2)^(0+128)
  6434  04BE  0020               	movlb	0	; select bank0
  6435  04BF  0838               	movf	?___fladd+1,w
  6436  04C0  0021               	movlb	1	; select bank1
  6437  04C1  00AD               	movwf	(___flmul@a+1)^(0+128)
  6438  04C2  0020               	movlb	0	; select bank0
  6439  04C3  0837               	movf	?___fladd,w
  6440  04C4  0021               	movlb	1	; select bank1
  6441  04C5  00AC               	movwf	___flmul@a^(0+128)
  6442  04C6  318A  226F  3180   	fcall	___flmul
  6443  04C9  082B               	movf	(?___flmul+3)^(0+128),w
  6444  04CA  0022               	movlb	2	; select bank2
  6445  04CB  00AF               	movwf	(_logf$2278+3)^(0+256)
  6446  04CC  0021               	movlb	1	; select bank1
  6447  04CD  082A               	movf	(?___flmul+2)^(0+128),w
  6448  04CE  0022               	movlb	2	; select bank2
  6449  04CF  00AE               	movwf	(_logf$2278+2)^(0+256)
  6450  04D0  0021               	movlb	1	; select bank1
  6451  04D1  0829               	movf	(?___flmul+1)^(0+128),w
  6452  04D2  0022               	movlb	2	; select bank2
  6453  04D3  00AD               	movwf	(_logf$2278+1)^(0+256)
  6454  04D4  0021               	movlb	1	; select bank1
  6455  04D5  0828               	movf	?___flmul^(0+128),w
  6456  04D6  0022               	movlb	2	; select bank2
  6457  04D7  00AC               	movwf	_logf$2278^(0+256)
  6458  04D8  3037               	movlw	55
  6459  04D9  0021               	movlb	1	; select bank1
  6460  04DA  00AB               	movwf	(___flmul@b+3)^(0+128)
  6461  04DB  3017               	movlw	23
  6462  04DC  00AA               	movwf	(___flmul@b+2)^(0+128)
  6463  04DD  30F7               	movlw	247
  6464  04DE  00A9               	movwf	(___flmul@b+1)^(0+128)
  6465  04DF  30D1               	movlw	209
  6466  04E0  00A8               	movwf	___flmul@b^(0+128)
  6467  04E1  0022               	movlb	2	; select bank2
  6468  04E2  0845               	movf	(logf@dk+3)^(0+256),w
  6469  04E3  0021               	movlb	1	; select bank1
  6470  04E4  00AF               	movwf	(___flmul@a+3)^(0+128)
  6471  04E5  0022               	movlb	2	; select bank2
  6472  04E6  0844               	movf	(logf@dk+2)^(0+256),w
  6473  04E7  0021               	movlb	1	; select bank1
  6474  04E8  00AE               	movwf	(___flmul@a+2)^(0+128)
  6475  04E9  0022               	movlb	2	; select bank2
  6476  04EA  0843               	movf	(logf@dk+1)^(0+256),w
  6477  04EB  0021               	movlb	1	; select bank1
  6478  04EC  00AD               	movwf	(___flmul@a+1)^(0+128)
  6479  04ED  0022               	movlb	2	; select bank2
  6480  04EE  0842               	movf	logf@dk^(0+256),w
  6481  04EF  0021               	movlb	1	; select bank1
  6482  04F0  00AC               	movwf	___flmul@a^(0+128)
  6483  04F1  318A  226F  3180   	fcall	___flmul
  6484  04F4  082B               	movf	(?___flmul+3)^(0+128),w
  6485  04F5  0020               	movlb	0	; select bank0
  6486  04F6  00BA               	movwf	___fladd@b+3
  6487  04F7  0021               	movlb	1	; select bank1
  6488  04F8  082A               	movf	(?___flmul+2)^(0+128),w
  6489  04F9  0020               	movlb	0	; select bank0
  6490  04FA  00B9               	movwf	___fladd@b+2
  6491  04FB  0021               	movlb	1	; select bank1
  6492  04FC  0829               	movf	(?___flmul+1)^(0+128),w
  6493  04FD  0020               	movlb	0	; select bank0
  6494  04FE  00B8               	movwf	___fladd@b+1
  6495  04FF  0021               	movlb	1	; select bank1
  6496  0500  0828               	movf	?___flmul^(0+128),w
  6497  0501  0020               	movlb	0	; select bank0
  6498  0502  00B7               	movwf	___fladd@b
  6499  0503  0022               	movlb	2	; select bank2
  6500  0504  082F               	movf	(_logf$2278+3)^(0+256),w
  6501  0505  0020               	movlb	0	; select bank0
  6502  0506  00BE               	movwf	___fladd@a+3
  6503  0507  0022               	movlb	2	; select bank2
  6504  0508  082E               	movf	(_logf$2278+2)^(0+256),w
  6505  0509  0020               	movlb	0	; select bank0
  6506  050A  00BD               	movwf	___fladd@a+2
  6507  050B  0022               	movlb	2	; select bank2
  6508  050C  082D               	movf	(_logf$2278+1)^(0+256),w
  6509  050D  0020               	movlb	0	; select bank0
  6510  050E  00BC               	movwf	___fladd@a+1
  6511  050F  0022               	movlb	2	; select bank2
  6512  0510  082C               	movf	_logf$2278^(0+256),w
  6513  0511  0020               	movlb	0	; select bank0
  6514  0512  00BB               	movwf	___fladd@a
  6515  0513  3185  25D4  3180   	fcall	___fladd
  6516  0516  083A               	movf	?___fladd+3,w
  6517  0517  0022               	movlb	2	; select bank2
  6518  0518  00B3               	movwf	(_logf$2279+3)^(0+256)
  6519  0519  0020               	movlb	0	; select bank0
  6520  051A  0839               	movf	?___fladd+2,w
  6521  051B  0022               	movlb	2	; select bank2
  6522  051C  00B2               	movwf	(_logf$2279+2)^(0+256)
  6523  051D  0020               	movlb	0	; select bank0
  6524  051E  0838               	movf	?___fladd+1,w
  6525  051F  0022               	movlb	2	; select bank2
  6526  0520  00B1               	movwf	(_logf$2279+1)^(0+256)
  6527  0521  0020               	movlb	0	; select bank0
  6528  0522  0837               	movf	?___fladd,w
  6529  0523  0022               	movlb	2	; select bank2
  6530  0524  00B0               	movwf	_logf$2279^(0+256)
  6531  0525  0841               	movf	(logf@hfsq+3)^(0+256),w
  6532  0526  0021               	movlb	1	; select bank1
  6533  0527  00A3               	movwf	(___flsub@a+3)^(0+128)
  6534  0528  0022               	movlb	2	; select bank2
  6535  0529  0840               	movf	(logf@hfsq+2)^(0+256),w
  6536  052A  0021               	movlb	1	; select bank1
  6537  052B  00A2               	movwf	(___flsub@a+2)^(0+128)
  6538  052C  0022               	movlb	2	; select bank2
  6539  052D  083F               	movf	(logf@hfsq+1)^(0+256),w
  6540  052E  0021               	movlb	1	; select bank1
  6541  052F  00A1               	movwf	(___flsub@a+1)^(0+128)
  6542  0530  0022               	movlb	2	; select bank2
  6543  0531  083E               	movf	logf@hfsq^(0+256),w
  6544  0532  0021               	movlb	1	; select bank1
  6545  0533  00A0               	movwf	___flsub@a^(0+128)
  6546  0534  0022               	movlb	2	; select bank2
  6547  0535  0833               	movf	(_logf$2279+3)^(0+256),w
  6548  0536  0021               	movlb	1	; select bank1
  6549  0537  00A7               	movwf	(___flsub@b+3)^(0+128)
  6550  0538  0022               	movlb	2	; select bank2
  6551  0539  0832               	movf	(_logf$2279+2)^(0+256),w
  6552  053A  0021               	movlb	1	; select bank1
  6553  053B  00A6               	movwf	(___flsub@b+2)^(0+128)
  6554  053C  0022               	movlb	2	; select bank2
  6555  053D  0831               	movf	(_logf$2279+1)^(0+256),w
  6556  053E  0021               	movlb	1	; select bank1
  6557  053F  00A5               	movwf	(___flsub@b+1)^(0+128)
  6558  0540  0022               	movlb	2	; select bank2
  6559  0541  0830               	movf	_logf$2279^(0+256),w
  6560  0542  0021               	movlb	1	; select bank1
  6561  0543  00A4               	movwf	___flsub@b^(0+128)
  6562  0544  3191  2186  3180   	fcall	___flsub
  6563  0547  0823               	movf	(?___flsub+3)^(0+128),w
  6564  0548  0022               	movlb	2	; select bank2
  6565  0549  00B7               	movwf	(_logf$2280+3)^(0+256)
  6566  054A  0021               	movlb	1	; select bank1
  6567  054B  0822               	movf	(?___flsub+2)^(0+128),w
  6568  054C  0022               	movlb	2	; select bank2
  6569  054D  00B6               	movwf	(_logf$2280+2)^(0+256)
  6570  054E  0021               	movlb	1	; select bank1
  6571  054F  0821               	movf	(?___flsub+1)^(0+128),w
  6572  0550  0022               	movlb	2	; select bank2
  6573  0551  00B5               	movwf	(_logf$2280+1)^(0+256)
  6574  0552  0021               	movlb	1	; select bank1
  6575  0553  0820               	movf	?___flsub^(0+128),w
  6576  0554  0022               	movlb	2	; select bank2
  6577  0555  00B4               	movwf	_logf$2280^(0+256)
  6578  0556  085D               	movf	(logf@f+3)^(0+256),w
  6579  0557  0020               	movlb	0	; select bank0
  6580  0558  00BA               	movwf	___fladd@b+3
  6581  0559  0022               	movlb	2	; select bank2
  6582  055A  085C               	movf	(logf@f+2)^(0+256),w
  6583  055B  0020               	movlb	0	; select bank0
  6584  055C  00B9               	movwf	___fladd@b+2
  6585  055D  0022               	movlb	2	; select bank2
  6586  055E  085B               	movf	(logf@f+1)^(0+256),w
  6587  055F  0020               	movlb	0	; select bank0
  6588  0560  00B8               	movwf	___fladd@b+1
  6589  0561  0022               	movlb	2	; select bank2
  6590  0562  085A               	movf	logf@f^(0+256),w
  6591  0563  0020               	movlb	0	; select bank0
  6592  0564  00B7               	movwf	___fladd@b
  6593  0565  0022               	movlb	2	; select bank2
  6594  0566  0837               	movf	(_logf$2280+3)^(0+256),w
  6595  0567  0020               	movlb	0	; select bank0
  6596  0568  00BE               	movwf	___fladd@a+3
  6597  0569  0022               	movlb	2	; select bank2
  6598  056A  0836               	movf	(_logf$2280+2)^(0+256),w
  6599  056B  0020               	movlb	0	; select bank0
  6600  056C  00BD               	movwf	___fladd@a+2
  6601  056D  0022               	movlb	2	; select bank2
  6602  056E  0835               	movf	(_logf$2280+1)^(0+256),w
  6603  056F  0020               	movlb	0	; select bank0
  6604  0570  00BC               	movwf	___fladd@a+1
  6605  0571  0022               	movlb	2	; select bank2
  6606  0572  0834               	movf	_logf$2280^(0+256),w
  6607  0573  0020               	movlb	0	; select bank0
  6608  0574  00BB               	movwf	___fladd@a
  6609  0575  3185  25D4  3180   	fcall	___fladd
  6610  0578  083A               	movf	?___fladd+3,w
  6611  0579  0022               	movlb	2	; select bank2
  6612  057A  00BB               	movwf	(_logf$2281+3)^(0+256)
  6613  057B  0020               	movlb	0	; select bank0
  6614  057C  0839               	movf	?___fladd+2,w
  6615  057D  0022               	movlb	2	; select bank2
  6616  057E  00BA               	movwf	(_logf$2281+2)^(0+256)
  6617  057F  0020               	movlb	0	; select bank0
  6618  0580  0838               	movf	?___fladd+1,w
  6619  0581  0022               	movlb	2	; select bank2
  6620  0582  00B9               	movwf	(_logf$2281+1)^(0+256)
  6621  0583  0020               	movlb	0	; select bank0
  6622  0584  0837               	movf	?___fladd,w
  6623  0585  0022               	movlb	2	; select bank2
  6624  0586  00B8               	movwf	_logf$2281^(0+256)
  6625  0587  303F               	movlw	63
  6626  0588  0021               	movlb	1	; select bank1
  6627  0589  00AB               	movwf	(___flmul@b+3)^(0+128)
  6628  058A  3031               	movlw	49
  6629  058B  00AA               	movwf	(___flmul@b+2)^(0+128)
  6630  058C  3071               	movlw	113
  6631  058D  00A9               	movwf	(___flmul@b+1)^(0+128)
  6632  058E  3080               	movlw	128
  6633  058F  00A8               	movwf	___flmul@b^(0+128)
  6634  0590  0022               	movlb	2	; select bank2
  6635  0591  0845               	movf	(logf@dk+3)^(0+256),w
  6636  0592  0021               	movlb	1	; select bank1
  6637  0593  00AF               	movwf	(___flmul@a+3)^(0+128)
  6638  0594  0022               	movlb	2	; select bank2
  6639  0595  0844               	movf	(logf@dk+2)^(0+256),w
  6640  0596  0021               	movlb	1	; select bank1
  6641  0597  00AE               	movwf	(___flmul@a+2)^(0+128)
  6642  0598  0022               	movlb	2	; select bank2
  6643  0599  0843               	movf	(logf@dk+1)^(0+256),w
  6644  059A  0021               	movlb	1	; select bank1
  6645  059B  00AD               	movwf	(___flmul@a+1)^(0+128)
  6646  059C  0022               	movlb	2	; select bank2
  6647  059D  0842               	movf	logf@dk^(0+256),w
  6648  059E  0021               	movlb	1	; select bank1
  6649  059F  00AC               	movwf	___flmul@a^(0+128)
  6650  05A0  318A  226F  3180   	fcall	___flmul
  6651  05A3  082B               	movf	(?___flmul+3)^(0+128),w
  6652  05A4  0020               	movlb	0	; select bank0
  6653  05A5  00BA               	movwf	___fladd@b+3
  6654  05A6  0021               	movlb	1	; select bank1
  6655  05A7  082A               	movf	(?___flmul+2)^(0+128),w
  6656  05A8  0020               	movlb	0	; select bank0
  6657  05A9  00B9               	movwf	___fladd@b+2
  6658  05AA  0021               	movlb	1	; select bank1
  6659  05AB  0829               	movf	(?___flmul+1)^(0+128),w
  6660  05AC  0020               	movlb	0	; select bank0
  6661  05AD  00B8               	movwf	___fladd@b+1
  6662  05AE  0021               	movlb	1	; select bank1
  6663  05AF  0828               	movf	?___flmul^(0+128),w
  6664  05B0  0020               	movlb	0	; select bank0
  6665  05B1  00B7               	movwf	___fladd@b
  6666  05B2  0022               	movlb	2	; select bank2
  6667  05B3  083B               	movf	(_logf$2281+3)^(0+256),w
  6668  05B4  0020               	movlb	0	; select bank0
  6669  05B5  00BE               	movwf	___fladd@a+3
  6670  05B6  0022               	movlb	2	; select bank2
  6671  05B7  083A               	movf	(_logf$2281+2)^(0+256),w
  6672  05B8  0020               	movlb	0	; select bank0
  6673  05B9  00BD               	movwf	___fladd@a+2
  6674  05BA  0022               	movlb	2	; select bank2
  6675  05BB  0839               	movf	(_logf$2281+1)^(0+256),w
  6676  05BC  0020               	movlb	0	; select bank0
  6677  05BD  00BC               	movwf	___fladd@a+1
  6678  05BE  0022               	movlb	2	; select bank2
  6679  05BF  0838               	movf	_logf$2281^(0+256),w
  6680  05C0  0020               	movlb	0	; select bank0
  6681  05C1  00BB               	movwf	___fladd@a
  6682  05C2  3185  25D4         	fcall	___fladd
  6683  05C4  083A               	movf	?___fladd+3,w
  6684  05C5  0021               	movlb	1	; select bank1
  6685  05C6  00DA               	movwf	(?_logf+3)^(0+128)
  6686  05C7  0020               	movlb	0	; select bank0
  6687  05C8  0839               	movf	?___fladd+2,w
  6688  05C9  0021               	movlb	1	; select bank1
  6689  05CA  00D9               	movwf	(?_logf+2)^(0+128)
  6690  05CB  0020               	movlb	0	; select bank0
  6691  05CC  0838               	movf	?___fladd+1,w
  6692  05CD  0021               	movlb	1	; select bank1
  6693  05CE  00D8               	movwf	(?_logf+1)^(0+128)
  6694  05CF  0020               	movlb	0	; select bank0
  6695  05D0  0837               	movf	?___fladd,w
  6696  05D1  0021               	movlb	1	; select bank1
  6697  05D2  00D7               	movwf	?_logf^(0+128)
  6698  05D3  0008               	return
  6699  05D4                     __end_of_logf:
  6700                           
  6701                           	psect	text5
  6702  1186                     __ptext5:	
  6703 ;; *************** function ___flsub *****************
  6704 ;; Defined at:
  6705 ;;		line 242 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcadd.c"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;  a               4    0[BANK1 ] float 
  6708 ;;  b               4    4[BANK1 ] float 
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;		None
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  4    0[BANK1 ] float 
  6713 ;; Registers used:
  6714 ;;		wreg, status,2, status,0, pclath, cstack
  6715 ;; Tracked objects:
  6716 ;;		On entry : 1F/1
  6717 ;;		On exit  : 1F/1
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6720 ;;      Params:         0       0       8       0       0       0       0       0
  6721 ;;      Locals:         0       0       0       0       0       0       0       0
  6722 ;;      Temps:          0       0       0       0       0       0       0       0
  6723 ;;      Totals:         0       0       8       0       0       0       0       0
  6724 ;;Total ram usage:        8 bytes
  6725 ;; Hardware stack levels used: 1
  6726 ;; Hardware stack levels required when called: 5
  6727 ;; This function calls:
  6728 ;;		___fladd
  6729 ;; This function is called by:
  6730 ;;		_map
  6731 ;;		_get_ntc_temperature
  6732 ;;		_logf
  6733 ;; This function uses a non-reentrant model
  6734 ;;
  6735                           
  6736  1186                     ___flsub:	
  6737                           ;psect for function ___flsub
  6738                           
  6739                           
  6740                           ;incstack = 0
  6741                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
  6742  1186  3080               	movlw	128
  6743  1187  06A3               	xorwf	(___flsub@a+3)^(0+128),f
  6744  1188  0827               	movf	(___flsub@b+3)^(0+128),w
  6745  1189  0020               	movlb	0	; select bank0
  6746  118A  00BA               	movwf	___fladd@b+3
  6747  118B  0021               	movlb	1	; select bank1
  6748  118C  0826               	movf	(___flsub@b+2)^(0+128),w
  6749  118D  0020               	movlb	0	; select bank0
  6750  118E  00B9               	movwf	___fladd@b+2
  6751  118F  0021               	movlb	1	; select bank1
  6752  1190  0825               	movf	(___flsub@b+1)^(0+128),w
  6753  1191  0020               	movlb	0	; select bank0
  6754  1192  00B8               	movwf	___fladd@b+1
  6755  1193  0021               	movlb	1	; select bank1
  6756  1194  0824               	movf	___flsub@b^(0+128),w
  6757  1195  0020               	movlb	0	; select bank0
  6758  1196  00B7               	movwf	___fladd@b
  6759  1197  0021               	movlb	1	; select bank1
  6760  1198  0823               	movf	(___flsub@a+3)^(0+128),w
  6761  1199  0020               	movlb	0	; select bank0
  6762  119A  00BE               	movwf	___fladd@a+3
  6763  119B  0021               	movlb	1	; select bank1
  6764  119C  0822               	movf	(___flsub@a+2)^(0+128),w
  6765  119D  0020               	movlb	0	; select bank0
  6766  119E  00BD               	movwf	___fladd@a+2
  6767  119F  0021               	movlb	1	; select bank1
  6768  11A0  0821               	movf	(___flsub@a+1)^(0+128),w
  6769  11A1  0020               	movlb	0	; select bank0
  6770  11A2  00BC               	movwf	___fladd@a+1
  6771  11A3  0021               	movlb	1	; select bank1
  6772  11A4  0820               	movf	___flsub@a^(0+128),w
  6773  11A5  0020               	movlb	0	; select bank0
  6774  11A6  00BB               	movwf	___fladd@a
  6775  11A7  3185  25D4         	fcall	___fladd
  6776  11A9  083A               	movf	?___fladd+3,w
  6777  11AA  0021               	movlb	1	; select bank1
  6778  11AB  00A3               	movwf	(?___flsub+3)^(0+128)
  6779  11AC  0020               	movlb	0	; select bank0
  6780  11AD  0839               	movf	?___fladd+2,w
  6781  11AE  0021               	movlb	1	; select bank1
  6782  11AF  00A2               	movwf	(?___flsub+2)^(0+128)
  6783  11B0  0020               	movlb	0	; select bank0
  6784  11B1  0838               	movf	?___fladd+1,w
  6785  11B2  0021               	movlb	1	; select bank1
  6786  11B3  00A1               	movwf	(?___flsub+1)^(0+128)
  6787  11B4  0020               	movlb	0	; select bank0
  6788  11B5  0837               	movf	?___fladd,w
  6789  11B6  0021               	movlb	1	; select bank1
  6790  11B7  00A0               	movwf	?___flsub^(0+128)
  6791  11B8  0008               	return
  6792  11B9                     __end_of___flsub:
  6793                           
  6794                           	psect	text6
  6795  05D4                     __ptext6:	
  6796 ;; *************** function ___fladd *****************
  6797 ;; Defined at:
  6798 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcadd.c"
  6799 ;; Parameters:    Size  Location     Type
  6800 ;;  b               4   23[BANK0 ] float 
  6801 ;;  a               4   27[BANK0 ] float 
  6802 ;; Auto vars:     Size  Location     Type
  6803 ;;  grs             1   42[BANK0 ] unsigned char 
  6804 ;;  bexp            1   41[BANK0 ] unsigned char 
  6805 ;;  aexp            1   40[BANK0 ] unsigned char 
  6806 ;;  signs           1   39[BANK0 ] unsigned char 
  6807 ;; Return value:  Size  Location     Type
  6808 ;;                  4   23[BANK0 ] unsigned char 
  6809 ;; Registers used:
  6810 ;;		wreg, status,2, status,0
  6811 ;; Tracked objects:
  6812 ;;		On entry : 1F/0
  6813 ;;		On exit  : 1F/0
  6814 ;;		Unchanged: 0/0
  6815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6816 ;;      Params:         0       8       0       0       0       0       0       0
  6817 ;;      Locals:         0       4       0       0       0       0       0       0
  6818 ;;      Temps:          0       8       0       0       0       0       0       0
  6819 ;;      Totals:         0      20       0       0       0       0       0       0
  6820 ;;Total ram usage:       20 bytes
  6821 ;; Hardware stack levels used: 1
  6822 ;; Hardware stack levels required when called: 4
  6823 ;; This function calls:
  6824 ;;		Nothing
  6825 ;; This function is called by:
  6826 ;;		_map
  6827 ;;		_get_ntc_temperature
  6828 ;;		___flsub
  6829 ;;		_logf
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833  05D4                     ___fladd:	
  6834                           ;psect for function ___fladd
  6835                           
  6836                           
  6837                           ;incstack = 0
  6838                           ; Regs used in ___fladd: [wreg+status,2+status,0]
  6839  05D4  083A               	movf	___fladd@b+3,w
  6840  05D5  3980               	andlw	128
  6841  05D6  00BF               	movwf	??___fladd
  6842  05D7  083F               	movf	??___fladd,w
  6843  05D8  00C7               	movwf	___fladd@signs
  6844  05D9  353A               	lslf	___fladd@b+3,w
  6845  05DA  00BF               	movwf	??___fladd
  6846  05DB  083F               	movf	??___fladd,w
  6847  05DC  00C9               	movwf	___fladd@bexp
  6848  05DD  1BB9               	btfsc	___fladd@b+2,7
  6849  05DE  1449               	bsf	___fladd@bexp,0
  6850  05DF  0849               	movf	___fladd@bexp,w
  6851  05E0  1903               	btfsc	3,2
  6852  05E1  2DF0               	goto	l5259
  6853  05E2  0A49               	incf	___fladd@bexp,w
  6854  05E3  1D03               	btfss	3,2
  6855  05E4  2DED               	goto	l5255
  6856  05E5  3000               	movlw	0
  6857  05E6  00BA               	movwf	___fladd@b+3
  6858  05E7  3000               	movlw	0
  6859  05E8  00B9               	movwf	___fladd@b+2
  6860  05E9  3000               	movlw	0
  6861  05EA  00B8               	movwf	___fladd@b+1
  6862  05EB  3000               	movlw	0
  6863  05EC  00B7               	movwf	___fladd@b
  6864  05ED                     l5255:
  6865  05ED  17B9               	bsf	___fladd@b+2,7
  6866  05EE  01BA               	clrf	___fladd@b+3
  6867  05EF  2DF8               	goto	l5261
  6868  05F0                     l5259:
  6869  05F0  3000               	movlw	0
  6870  05F1  00BA               	movwf	___fladd@b+3
  6871  05F2  3000               	movlw	0
  6872  05F3  00B9               	movwf	___fladd@b+2
  6873  05F4  3000               	movlw	0
  6874  05F5  00B8               	movwf	___fladd@b+1
  6875  05F6  3000               	movlw	0
  6876  05F7  00B7               	movwf	___fladd@b
  6877  05F8                     l5261:
  6878  05F8  083E               	movf	___fladd@a+3,w
  6879  05F9  3980               	andlw	128
  6880  05FA  00BF               	movwf	??___fladd
  6881  05FB  083F               	movf	??___fladd,w
  6882  05FC  00C8               	movwf	___fladd@aexp
  6883  05FD  0848               	movf	___fladd@aexp,w
  6884  05FE  0647               	xorwf	___fladd@signs,w
  6885  05FF  1D03               	btfss	3,2
  6886  0600  1747               	bsf	___fladd@signs,6
  6887  0601  353E               	lslf	___fladd@a+3,w
  6888  0602  00BF               	movwf	??___fladd
  6889  0603  083F               	movf	??___fladd,w
  6890  0604  00C8               	movwf	___fladd@aexp
  6891  0605  1BBD               	btfsc	___fladd@a+2,7
  6892  0606  1448               	bsf	___fladd@aexp,0
  6893  0607  0848               	movf	___fladd@aexp,w
  6894  0608  1903               	btfsc	3,2
  6895  0609  2E18               	goto	l5283
  6896  060A  0A48               	incf	___fladd@aexp,w
  6897  060B  1D03               	btfss	3,2
  6898  060C  2E15               	goto	l5279
  6899  060D  3000               	movlw	0
  6900  060E  00BE               	movwf	___fladd@a+3
  6901  060F  3000               	movlw	0
  6902  0610  00BD               	movwf	___fladd@a+2
  6903  0611  3000               	movlw	0
  6904  0612  00BC               	movwf	___fladd@a+1
  6905  0613  3000               	movlw	0
  6906  0614  00BB               	movwf	___fladd@a
  6907  0615                     l5279:
  6908  0615  17BD               	bsf	___fladd@a+2,7
  6909  0616  01BE               	clrf	___fladd@a+3
  6910  0617  2E20               	goto	l1354
  6911  0618                     l5283:
  6912  0618  3000               	movlw	0
  6913  0619  00BE               	movwf	___fladd@a+3
  6914  061A  3000               	movlw	0
  6915  061B  00BD               	movwf	___fladd@a+2
  6916  061C  3000               	movlw	0
  6917  061D  00BC               	movwf	___fladd@a+1
  6918  061E  3000               	movlw	0
  6919  061F  00BB               	movwf	___fladd@a
  6920  0620                     l1354:
  6921  0620  0849               	movf	___fladd@bexp,w
  6922  0621  0248               	subwf	___fladd@aexp,w
  6923  0622  1803               	skipnc
  6924  0623  2E66               	goto	l5319
  6925  0624  1F47               	btfss	___fladd@signs,6
  6926  0625  2E2A               	goto	l5289
  6927  0626  3080               	movlw	128
  6928  0627  00BF               	movwf	??___fladd
  6929  0628  083F               	movf	??___fladd,w
  6930  0629  06C7               	xorwf	___fladd@signs,f
  6931  062A                     l5289:
  6932  062A  0849               	movf	___fladd@bexp,w
  6933  062B  00BF               	movwf	??___fladd
  6934  062C  083F               	movf	??___fladd,w
  6935  062D  00CA               	movwf	___fladd@grs
  6936  062E  0848               	movf	___fladd@aexp,w
  6937  062F  00BF               	movwf	??___fladd
  6938  0630  083F               	movf	??___fladd,w
  6939  0631  00C9               	movwf	___fladd@bexp
  6940  0632  084A               	movf	___fladd@grs,w
  6941  0633  00BF               	movwf	??___fladd
  6942  0634  083F               	movf	??___fladd,w
  6943  0635  00C8               	movwf	___fladd@aexp
  6944  0636  0837               	movf	___fladd@b,w
  6945  0637  00BF               	movwf	??___fladd
  6946  0638  083F               	movf	??___fladd,w
  6947  0639  00CA               	movwf	___fladd@grs
  6948  063A  083B               	movf	___fladd@a,w
  6949  063B  00BF               	movwf	??___fladd
  6950  063C  083F               	movf	??___fladd,w
  6951  063D  00B7               	movwf	___fladd@b
  6952  063E  084A               	movf	___fladd@grs,w
  6953  063F  00BF               	movwf	??___fladd
  6954  0640  083F               	movf	??___fladd,w
  6955  0641  00BB               	movwf	___fladd@a
  6956  0642  0838               	movf	___fladd@b+1,w
  6957  0643  00BF               	movwf	??___fladd
  6958  0644  083F               	movf	??___fladd,w
  6959  0645  00CA               	movwf	___fladd@grs
  6960  0646  083C               	movf	___fladd@a+1,w
  6961  0647  00BF               	movwf	??___fladd
  6962  0648  083F               	movf	??___fladd,w
  6963  0649  00B8               	movwf	___fladd@b+1
  6964  064A  084A               	movf	___fladd@grs,w
  6965  064B  00BF               	movwf	??___fladd
  6966  064C  083F               	movf	??___fladd,w
  6967  064D  00BC               	movwf	___fladd@a+1
  6968  064E  0839               	movf	___fladd@b+2,w
  6969  064F  00BF               	movwf	??___fladd
  6970  0650  083F               	movf	??___fladd,w
  6971  0651  00CA               	movwf	___fladd@grs
  6972  0652  083D               	movf	___fladd@a+2,w
  6973  0653  00BF               	movwf	??___fladd
  6974  0654  083F               	movf	??___fladd,w
  6975  0655  00B9               	movwf	___fladd@b+2
  6976  0656  084A               	movf	___fladd@grs,w
  6977  0657  00BF               	movwf	??___fladd
  6978  0658  083F               	movf	??___fladd,w
  6979  0659  00BD               	movwf	___fladd@a+2
  6980  065A  083A               	movf	___fladd@b+3,w
  6981  065B  00BF               	movwf	??___fladd
  6982  065C  083F               	movf	??___fladd,w
  6983  065D  00CA               	movwf	___fladd@grs
  6984  065E  083E               	movf	___fladd@a+3,w
  6985  065F  00BF               	movwf	??___fladd
  6986  0660  083F               	movf	??___fladd,w
  6987  0661  00BA               	movwf	___fladd@b+3
  6988  0662  084A               	movf	___fladd@grs,w
  6989  0663  00BF               	movwf	??___fladd
  6990  0664  083F               	movf	??___fladd,w
  6991  0665  00BE               	movwf	___fladd@a+3
  6992  0666                     l5319:
  6993  0666  01CA               	clrf	___fladd@grs
  6994  0667  0848               	movf	___fladd@aexp,w
  6995  0668  00BF               	movwf	??___fladd
  6996  0669  01C0               	clrf	??___fladd+1
  6997  066A  0840               	movf	??___fladd+1,w
  6998  066B  00C2               	movwf	??___fladd+3
  6999  066C  0849               	movf	___fladd@bexp,w
  7000  066D  023F               	subwf	??___fladd,w
  7001  066E  00C1               	movwf	??___fladd+2
  7002  066F  1C03               	skipc
  7003  0670  03C2               	decf	??___fladd+3,f
  7004  0671  0842               	movf	??___fladd+3,w
  7005  0672  3A80               	xorlw	128
  7006  0673  00C3               	movwf	??___fladd+4
  7007  0674  3080               	movlw	128
  7008  0675  0243               	subwf	??___fladd+4,w
  7009  0676  1D03               	skipz
  7010  0677  2E7A               	goto	u4385
  7011  0678  301A               	movlw	26
  7012  0679  0241               	subwf	??___fladd+2,w
  7013  067A                     u4385:
  7014  067A  1C03               	skipc
  7015  067B  2EAE               	goto	l5337
  7016  067C  0020               	movlb	0	; select bank0
  7017  067D  083A               	movf	___fladd@b+3,w
  7018  067E  0439               	iorwf	___fladd@b+2,w
  7019  067F  0438               	iorwf	___fladd@b+1,w
  7020  0680  0437               	iorwf	___fladd@b,w
  7021  0681  1903               	btfsc	3,2
  7022  0682  2E85               	goto	u4390
  7023  0683  3001               	movlw	1
  7024  0684  2E86               	goto	u4400
  7025  0685                     u4390:
  7026  0685  3000               	movlw	0
  7027  0686                     u4400:
  7028  0686  00BF               	movwf	??___fladd
  7029  0687  083F               	movf	??___fladd,w
  7030  0688  00CA               	movwf	___fladd@grs
  7031  0689  3000               	movlw	0
  7032  068A  00BA               	movwf	___fladd@b+3
  7033  068B  3000               	movlw	0
  7034  068C  00B9               	movwf	___fladd@b+2
  7035  068D  3000               	movlw	0
  7036  068E  00B8               	movwf	___fladd@b+1
  7037  068F  3000               	movlw	0
  7038  0690  00B7               	movwf	___fladd@b
  7039  0691  0848               	movf	___fladd@aexp,w
  7040  0692  00BF               	movwf	??___fladd
  7041  0693  083F               	movf	??___fladd,w
  7042  0694  00C9               	movwf	___fladd@bexp
  7043  0695  2EB3               	goto	l1358
  7044  0696                     l1360:
  7045  0696  1C4A               	btfss	___fladd@grs,0
  7046  0697  2E9E               	goto	l5327
  7047  0698  364A               	lsrf	___fladd@grs,w
  7048  0699  3801               	iorlw	1
  7049  069A  00BF               	movwf	??___fladd
  7050  069B  083F               	movf	??___fladd,w
  7051  069C  00CA               	movwf	___fladd@grs
  7052  069D  2EA0               	goto	l5329
  7053  069E                     l5327:
  7054  069E  1003               	clrc
  7055  069F  0CCA               	rrf	___fladd@grs,f
  7056  06A0                     l5329:
  7057  06A0  1837               	btfsc	___fladd@b,0
  7058  06A1  17CA               	bsf	___fladd@grs,7
  7059  06A2  3001               	movlw	1
  7060  06A3  00BF               	movwf	??___fladd
  7061  06A4                     u4435:
  7062  06A4  37BA               	asrf	___fladd@b+3,f
  7063  06A5  0CB9               	rrf	___fladd@b+2,f
  7064  06A6  0CB8               	rrf	___fladd@b+1,f
  7065  06A7  0CB7               	rrf	___fladd@b,f
  7066  06A8  0BBF               	decfsz	??___fladd& (0+127),f
  7067  06A9  2EA4               	goto	u4435
  7068  06AA  3001               	movlw	1
  7069  06AB  00BF               	movwf	??___fladd
  7070  06AC  083F               	movf	??___fladd,w
  7071  06AD  07C9               	addwf	___fladd@bexp,f
  7072  06AE                     l5337:
  7073  06AE  0020               	movlb	0	; select bank0
  7074  06AF  0848               	movf	___fladd@aexp,w
  7075  06B0  0249               	subwf	___fladd@bexp,w
  7076  06B1  1C03               	skipc
  7077  06B2  2E96               	goto	l1360
  7078  06B3                     l1358:
  7079  06B3  1B47               	btfsc	___fladd@signs,6
  7080  06B4  2EE4               	goto	l5363
  7081  06B5  0849               	movf	___fladd@bexp,w
  7082  06B6  1D03               	btfss	3,2
  7083  06B7  2EC1               	goto	l5345
  7084  06B8  3000               	movlw	0
  7085  06B9  00BA               	movwf	?___fladd+3
  7086  06BA  3000               	movlw	0
  7087  06BB  00B9               	movwf	?___fladd+2
  7088  06BC  3000               	movlw	0
  7089  06BD  00B8               	movwf	?___fladd+1
  7090  06BE  3000               	movlw	0
  7091  06BF  00B7               	movwf	?___fladd
  7092  06C0  0008               	return
  7093  06C1                     l5345:
  7094  06C1  083B               	movf	___fladd@a,w
  7095  06C2  07B7               	addwf	___fladd@b,f
  7096  06C3  083C               	movf	___fladd@a+1,w
  7097  06C4  3DB8               	addwfc	___fladd@b+1,f
  7098  06C5  083D               	movf	___fladd@a+2,w
  7099  06C6  3DB9               	addwfc	___fladd@b+2,f
  7100  06C7  083E               	movf	___fladd@a+3,w
  7101  06C8  3DBA               	addwfc	___fladd@b+3,f
  7102  06C9  1C3A               	btfss	___fladd@b+3,0
  7103  06CA  2F5E               	goto	l5397
  7104  06CB  1C4A               	btfss	___fladd@grs,0
  7105  06CC  2ED3               	goto	l5353
  7106  06CD  364A               	lsrf	___fladd@grs,w
  7107  06CE  3801               	iorlw	1
  7108  06CF  00BF               	movwf	??___fladd
  7109  06D0  083F               	movf	??___fladd,w
  7110  06D1  00CA               	movwf	___fladd@grs
  7111  06D2  2ED5               	goto	l5355
  7112  06D3                     l5353:
  7113  06D3  1003               	clrc
  7114  06D4  0CCA               	rrf	___fladd@grs,f
  7115  06D5                     l5355:
  7116  06D5  1837               	btfsc	___fladd@b,0
  7117  06D6  17CA               	bsf	___fladd@grs,7
  7118  06D7  3001               	movlw	1
  7119  06D8  00BF               	movwf	??___fladd
  7120  06D9                     u4505:
  7121  06D9  37BA               	asrf	___fladd@b+3,f
  7122  06DA  0CB9               	rrf	___fladd@b+2,f
  7123  06DB  0CB8               	rrf	___fladd@b+1,f
  7124  06DC  0CB7               	rrf	___fladd@b,f
  7125  06DD  0BBF               	decfsz	??___fladd& (0+127),f
  7126  06DE  2ED9               	goto	u4505
  7127  06DF  3001               	movlw	1
  7128  06E0  00BF               	movwf	??___fladd
  7129  06E1  083F               	movf	??___fladd,w
  7130  06E2  07C9               	addwf	___fladd@bexp,f
  7131  06E3  2F5E               	goto	l5397
  7132  06E4                     l5363:
  7133  06E4  083A               	movf	___fladd@b+3,w
  7134  06E5  3A80               	xorlw	128
  7135  06E6  00BF               	movwf	??___fladd
  7136  06E7  083E               	movf	___fladd@a+3,w
  7137  06E8  3A80               	xorlw	128
  7138  06E9  023F               	subwf	??___fladd,w
  7139  06EA  1D03               	skipz
  7140  06EB  2EF6               	goto	u4513
  7141  06EC  083D               	movf	___fladd@a+2,w
  7142  06ED  0239               	subwf	___fladd@b+2,w
  7143  06EE  1D03               	skipz
  7144  06EF  2EF6               	goto	u4513
  7145  06F0  083C               	movf	___fladd@a+1,w
  7146  06F1  0238               	subwf	___fladd@b+1,w
  7147  06F2  1D03               	skipz
  7148  06F3  2EF6               	goto	u4513
  7149  06F4  083B               	movf	___fladd@a,w
  7150  06F5  0237               	subwf	___fladd@b,w
  7151  06F6                     u4513:
  7152  06F6  1803               	skipnc
  7153  06F7  2F2E               	goto	l5373
  7154  06F8  30FF               	movlw	255
  7155  06F9  00BF               	movwf	??___fladd
  7156  06FA  30FF               	movlw	255
  7157  06FB  00C0               	movwf	??___fladd+1
  7158  06FC  30FF               	movlw	255
  7159  06FD  00C1               	movwf	??___fladd+2
  7160  06FE  30FF               	movlw	255
  7161  06FF  00C2               	movwf	??___fladd+3
  7162  0700  0837               	movf	___fladd@b,w
  7163  0701  023B               	subwf	___fladd@a,w
  7164  0702  00C3               	movwf	??___fladd+4
  7165  0703  0838               	movf	___fladd@b+1,w
  7166  0704  3B3C               	subwfb	___fladd@a+1,w
  7167  0705  00C4               	movwf	??___fladd+5
  7168  0706  0839               	movf	___fladd@b+2,w
  7169  0707  3B3D               	subwfb	___fladd@a+2,w
  7170  0708  00C5               	movwf	??___fladd+6
  7171  0709  083A               	movf	___fladd@b+3,w
  7172  070A  3B3E               	subwfb	___fladd@a+3,w
  7173  070B  00C6               	movwf	??___fladd+7
  7174  070C  0843               	movf	??___fladd+4,w
  7175  070D  07BF               	addwf	??___fladd,f
  7176  070E  0844               	movf	??___fladd+5,w
  7177  070F  3DC0               	addwfc	??___fladd+1,f
  7178  0710  0845               	movf	??___fladd+6,w
  7179  0711  3DC1               	addwfc	??___fladd+2,f
  7180  0712  0846               	movf	??___fladd+7,w
  7181  0713  3DC2               	addwfc	??___fladd+3,f
  7182  0714  0842               	movf	??___fladd+3,w
  7183  0715  00BA               	movwf	___fladd@b+3
  7184  0716  0841               	movf	??___fladd+2,w
  7185  0717  00B9               	movwf	___fladd@b+2
  7186  0718  0840               	movf	??___fladd+1,w
  7187  0719  00B8               	movwf	___fladd@b+1
  7188  071A  083F               	movf	??___fladd,w
  7189  071B  00B7               	movwf	___fladd@b
  7190  071C  3080               	movlw	128
  7191  071D  00BF               	movwf	??___fladd
  7192  071E  083F               	movf	??___fladd,w
  7193  071F  06C7               	xorwf	___fladd@signs,f
  7194  0720  09CA               	comf	___fladd@grs,f
  7195  0721  0ACA               	incf	___fladd@grs,f
  7196  0722  084A               	movf	___fladd@grs,w
  7197  0723  1D03               	btfss	3,2
  7198  0724  2F36               	goto	l1375
  7199  0725  3001               	movlw	1
  7200  0726  07B7               	addwf	___fladd@b,f
  7201  0727  3000               	movlw	0
  7202  0728  3DB8               	addwfc	___fladd@b+1,f
  7203  0729  3000               	movlw	0
  7204  072A  3DB9               	addwfc	___fladd@b+2,f
  7205  072B  3000               	movlw	0
  7206  072C  3DBA               	addwfc	___fladd@b+3,f
  7207  072D  2F36               	goto	l1375
  7208  072E                     l5373:
  7209  072E  083B               	movf	___fladd@a,w
  7210  072F  02B7               	subwf	___fladd@b,f
  7211  0730  083C               	movf	___fladd@a+1,w
  7212  0731  3BB8               	subwfb	___fladd@b+1,f
  7213  0732  083D               	movf	___fladd@a+2,w
  7214  0733  3BB9               	subwfb	___fladd@b+2,f
  7215  0734  083E               	movf	___fladd@a+3,w
  7216  0735  3BBA               	subwfb	___fladd@b+3,f
  7217  0736                     l1375:
  7218  0736  083A               	movf	___fladd@b+3,w
  7219  0737  0439               	iorwf	___fladd@b+2,w
  7220  0738  0438               	iorwf	___fladd@b+1,w
  7221  0739  0437               	iorwf	___fladd@b,w
  7222  073A  1D03               	skipz
  7223  073B  2F5C               	goto	l5395
  7224  073C  084A               	movf	___fladd@grs,w
  7225  073D  1D03               	btfss	3,2
  7226  073E  2F5C               	goto	l5395
  7227  073F  3000               	movlw	0
  7228  0740  00BA               	movwf	?___fladd+3
  7229  0741  3000               	movlw	0
  7230  0742  00B9               	movwf	?___fladd+2
  7231  0743  3000               	movlw	0
  7232  0744  00B8               	movwf	?___fladd+1
  7233  0745  3000               	movlw	0
  7234  0746  00B7               	movwf	?___fladd
  7235  0747  0008               	return
  7236  0748                     l5381:
  7237  0748  3001               	movlw	1
  7238  0749                     u4555:
  7239  0749  35B7               	lslf	___fladd@b,f
  7240  074A  0DB8               	rlf	___fladd@b+1,f
  7241  074B  0DB9               	rlf	___fladd@b+2,f
  7242  074C  0DBA               	rlf	___fladd@b+3,f
  7243  074D  0B89               	decfsz	9,f
  7244  074E  2F49               	goto	u4555
  7245  074F  1BCA               	btfsc	___fladd@grs,7
  7246  0750  1437               	bsf	___fladd@b,0
  7247  0751  1C4A               	btfss	___fladd@grs,0
  7248  0752  2F55               	goto	l5389
  7249  0753  1403               	setc
  7250  0754  2F56               	goto	L3
  7251  0755                     l5389:
  7252  0755  1003               	clrc
  7253  0756                     L3:
  7254  0756  0DCA               	rlf	___fladd@grs,f
  7255  0757  0849               	movf	___fladd@bexp,w
  7256  0758  1903               	btfsc	3,2
  7257  0759  2F5C               	goto	l5395
  7258  075A  3001               	movlw	1
  7259  075B  02C9               	subwf	___fladd@bexp,f
  7260  075C                     l5395:
  7261  075C  1FB9               	btfss	___fladd@b+2,7
  7262  075D  2F48               	goto	l5381
  7263  075E                     l5397:
  7264  075E  01C8               	clrf	___fladd@aexp
  7265  075F  1FCA               	btfss	___fladd@grs,7
  7266  0760  2F69               	goto	l5407
  7267  0761  084A               	movf	___fladd@grs,w
  7268  0762  397F               	andlw	127
  7269  0763  1903               	btfsc	3,2
  7270  0764  1837               	btfsc	___fladd@b,0
  7271  0765  2F67               	goto	l5403
  7272  0766  2F69               	goto	l5407
  7273  0767                     l5403:
  7274  0767  01C8               	clrf	___fladd@aexp
  7275  0768  0AC8               	incf	___fladd@aexp,f
  7276  0769                     l5407:
  7277  0769  0848               	movf	___fladd@aexp,w
  7278  076A  1903               	btfsc	3,2
  7279  076B  2F95               	goto	l1388
  7280  076C  3001               	movlw	1
  7281  076D  07B7               	addwf	___fladd@b,f
  7282  076E  3000               	movlw	0
  7283  076F  3DB8               	addwfc	___fladd@b+1,f
  7284  0770  3000               	movlw	0
  7285  0771  3DB9               	addwfc	___fladd@b+2,f
  7286  0772  3000               	movlw	0
  7287  0773  3DBA               	addwfc	___fladd@b+3,f
  7288  0774  1C3A               	btfss	___fladd@b+3,0
  7289  0775  2F95               	goto	l1388
  7290  0776  0837               	movf	___fladd@b,w
  7291  0777  00BF               	movwf	??___fladd
  7292  0778  0838               	movf	___fladd@b+1,w
  7293  0779  00C0               	movwf	??___fladd+1
  7294  077A  0839               	movf	___fladd@b+2,w
  7295  077B  00C1               	movwf	??___fladd+2
  7296  077C  083A               	movf	___fladd@b+3,w
  7297  077D  00C2               	movwf	??___fladd+3
  7298  077E  3001               	movlw	1
  7299  077F  00C3               	movwf	??___fladd+4
  7300  0780                     u4655:
  7301  0780  37C2               	asrf	??___fladd+3,f
  7302  0781  0CC1               	rrf	??___fladd+2,f
  7303  0782  0CC0               	rrf	??___fladd+1,f
  7304  0783  0CBF               	rrf	??___fladd,f
  7305  0784  0BC3               	decfsz	??___fladd+4,f
  7306  0785  2F80               	goto	u4655
  7307  0786  0842               	movf	??___fladd+3,w
  7308  0787  00BA               	movwf	___fladd@b+3
  7309  0788  0841               	movf	??___fladd+2,w
  7310  0789  00B9               	movwf	___fladd@b+2
  7311  078A  0840               	movf	??___fladd+1,w
  7312  078B  00B8               	movwf	___fladd@b+1
  7313  078C  083F               	movf	??___fladd,w
  7314  078D  00B7               	movwf	___fladd@b
  7315  078E  0A49               	incf	___fladd@bexp,w
  7316  078F  1903               	btfsc	3,2
  7317  0790  2F95               	goto	l1388
  7318  0791  3001               	movlw	1
  7319  0792  00BF               	movwf	??___fladd
  7320  0793  083F               	movf	??___fladd,w
  7321  0794  07C9               	addwf	___fladd@bexp,f
  7322  0795                     l1388:
  7323  0795  0A49               	incf	___fladd@bexp,w
  7324  0796  1D03               	btfss	3,2
  7325  0797  0849               	movf	___fladd@bexp,w
  7326  0798  1D03               	btfss	3,2
  7327  0799  2FA5               	goto	l5425
  7328  079A  3000               	movlw	0
  7329  079B  00BA               	movwf	___fladd@b+3
  7330  079C  3000               	movlw	0
  7331  079D  00B9               	movwf	___fladd@b+2
  7332  079E  3000               	movlw	0
  7333  079F  00B8               	movwf	___fladd@b+1
  7334  07A0  3000               	movlw	0
  7335  07A1  00B7               	movwf	___fladd@b
  7336  07A2  0849               	movf	___fladd@bexp,w
  7337  07A3  1903               	btfsc	3,2
  7338  07A4  01C7               	clrf	___fladd@signs
  7339  07A5                     l5425:
  7340  07A5  1C49               	btfss	___fladd@bexp,0
  7341  07A6  2FA9               	goto	l5429
  7342  07A7  17B9               	bsf	___fladd@b+2,7
  7343  07A8  2FAD               	goto	l1396
  7344  07A9                     l5429:
  7345  07A9  307F               	movlw	127
  7346  07AA  00BF               	movwf	??___fladd
  7347  07AB  083F               	movf	??___fladd,w
  7348  07AC  05B9               	andwf	___fladd@b+2,f
  7349  07AD                     l1396:
  7350  07AD  3649               	lsrf	___fladd@bexp,w
  7351  07AE  00BF               	movwf	??___fladd
  7352  07AF  083F               	movf	??___fladd,w
  7353  07B0  00BA               	movwf	___fladd@b+3
  7354  07B1  1FC7               	btfss	___fladd@signs,7
  7355  07B2  0008               	return
  7356  07B3  17BA               	bsf	___fladd@b+3,7
  7357  07B4  0008               	return
  7358  07B5                     __end_of___fladd:
  7359                           
  7360                           	psect	text7
  7361  1508                     __ptext7:	
  7362 ;; *************** function ___fldiv *****************
  7363 ;; Defined at:
  7364 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcdiv.c"
  7365 ;; Parameters:    Size  Location     Type
  7366 ;;  a               4   29[BANK1 ] unsigned char 
  7367 ;;  b               4   33[BANK1 ] unsigned char 
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;  grs             4   49[BANK1 ] unsigned long 
  7370 ;;  rem             4   42[BANK1 ] unsigned long 
  7371 ;;  new_exp         2   47[BANK1 ] int 
  7372 ;;  aexp            1   54[BANK1 ] unsigned char 
  7373 ;;  bexp            1   53[BANK1 ] unsigned char 
  7374 ;;  sign            1   46[BANK1 ] unsigned char 
  7375 ;; Return value:  Size  Location     Type
  7376 ;;                  4   29[BANK1 ] unsigned char 
  7377 ;; Registers used:
  7378 ;;		wreg, status,2, status,0
  7379 ;; Tracked objects:
  7380 ;;		On entry : 1F/1
  7381 ;;		On exit  : 1F/1
  7382 ;;		Unchanged: 0/0
  7383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7384 ;;      Params:         0       0       8       0       0       0       0       0
  7385 ;;      Locals:         0       0      13       0       0       0       0       0
  7386 ;;      Temps:          0       0       5       0       0       0       0       0
  7387 ;;      Totals:         0       0      26       0       0       0       0       0
  7388 ;;Total ram usage:       26 bytes
  7389 ;; Hardware stack levels used: 1
  7390 ;; Hardware stack levels required when called: 4
  7391 ;; This function calls:
  7392 ;;		Nothing
  7393 ;; This function is called by:
  7394 ;;		_map
  7395 ;;		_get_ntc_temperature
  7396 ;;		_logf
  7397 ;; This function uses a non-reentrant model
  7398 ;;
  7399                           
  7400  1508                     ___fldiv:	
  7401                           ;psect for function ___fldiv
  7402                           
  7403                           
  7404                           ;incstack = 0
  7405                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
  7406  1508  0844               	movf	(___fldiv@b^(0+128)+3),w
  7407  1509  3980               	andlw	128
  7408  150A  00C5               	movwf	??___fldiv^(0+128)
  7409  150B  0845               	movf	??___fldiv^(0+128),w
  7410  150C  00CE               	movwf	___fldiv@sign^(0+128)
  7411  150D  3544               	lslf	(___fldiv@b^(0+128)+3),w
  7412  150E  00C5               	movwf	??___fldiv^(0+128)
  7413  150F  0845               	movf	??___fldiv^(0+128),w
  7414  1510  00D5               	movwf	___fldiv@bexp^(0+128)
  7415  1511  1BC3               	btfsc	(___fldiv@b^(0+128)+2),7
  7416  1512  1455               	bsf	___fldiv@bexp^(0+128),0
  7417  1513  0855               	movf	___fldiv@bexp^(0+128),w
  7418  1514  1903               	btfsc	3,2
  7419  1515  2D24               	goto	l5473
  7420  1516  0A55               	incf	___fldiv@bexp^(0+128),w
  7421  1517  1D03               	btfss	3,2
  7422  1518  2D21               	goto	l5469
  7423  1519  3000               	movlw	0
  7424  151A  00C4               	movwf	(___fldiv@b+3)^(0+128)
  7425  151B  3000               	movlw	0
  7426  151C  00C3               	movwf	(___fldiv@b+2)^(0+128)
  7427  151D  3000               	movlw	0
  7428  151E  00C2               	movwf	(___fldiv@b+1)^(0+128)
  7429  151F  3000               	movlw	0
  7430  1520  00C1               	movwf	___fldiv@b^(0+128)
  7431  1521                     l5469:
  7432  1521  17C3               	bsf	(___fldiv@b^(0+128)+2),7
  7433  1522  01C4               	clrf	(___fldiv@b^(0+128)+3)
  7434  1523  2D2C               	goto	l5475
  7435  1524                     l5473:
  7436  1524  3000               	movlw	0
  7437  1525  00C4               	movwf	(___fldiv@b+3)^(0+128)
  7438  1526  3000               	movlw	0
  7439  1527  00C3               	movwf	(___fldiv@b+2)^(0+128)
  7440  1528  3000               	movlw	0
  7441  1529  00C2               	movwf	(___fldiv@b+1)^(0+128)
  7442  152A  3000               	movlw	0
  7443  152B  00C1               	movwf	___fldiv@b^(0+128)
  7444  152C                     l5475:
  7445  152C  0840               	movf	(___fldiv@a^(0+128)+3),w
  7446  152D  3980               	andlw	128
  7447  152E  00C5               	movwf	??___fldiv^(0+128)
  7448  152F  0845               	movf	??___fldiv^(0+128),w
  7449  1530  06CE               	xorwf	___fldiv@sign^(0+128),f
  7450  1531  3540               	lslf	(___fldiv@a^(0+128)+3),w
  7451  1532  00C5               	movwf	??___fldiv^(0+128)
  7452  1533  0845               	movf	??___fldiv^(0+128),w
  7453  1534  00D6               	movwf	___fldiv@aexp^(0+128)
  7454  1535  1BBF               	btfsc	(___fldiv@a^(0+128)+2),7
  7455  1536  1456               	bsf	___fldiv@aexp^(0+128),0
  7456  1537  0856               	movf	___fldiv@aexp^(0+128),w
  7457  1538  1903               	btfsc	3,2
  7458  1539  2D48               	goto	l5493
  7459  153A  0A56               	incf	___fldiv@aexp^(0+128),w
  7460  153B  1D03               	btfss	3,2
  7461  153C  2D45               	goto	l5489
  7462  153D  3000               	movlw	0
  7463  153E  00C0               	movwf	(___fldiv@a+3)^(0+128)
  7464  153F  3000               	movlw	0
  7465  1540  00BF               	movwf	(___fldiv@a+2)^(0+128)
  7466  1541  3000               	movlw	0
  7467  1542  00BE               	movwf	(___fldiv@a+1)^(0+128)
  7468  1543  3000               	movlw	0
  7469  1544  00BD               	movwf	___fldiv@a^(0+128)
  7470  1545                     l5489:
  7471  1545  17BF               	bsf	(___fldiv@a^(0+128)+2),7
  7472  1546  01C0               	clrf	(___fldiv@a^(0+128)+3)
  7473  1547  2D50               	goto	l1410
  7474  1548                     l5493:
  7475  1548  3000               	movlw	0
  7476  1549  00C0               	movwf	(___fldiv@a+3)^(0+128)
  7477  154A  3000               	movlw	0
  7478  154B  00BF               	movwf	(___fldiv@a+2)^(0+128)
  7479  154C  3000               	movlw	0
  7480  154D  00BE               	movwf	(___fldiv@a+1)^(0+128)
  7481  154E  3000               	movlw	0
  7482  154F  00BD               	movwf	___fldiv@a^(0+128)
  7483  1550                     l1410:
  7484  1550  0840               	movf	(___fldiv@a+3)^(0+128),w
  7485  1551  043F               	iorwf	(___fldiv@a+2)^(0+128),w
  7486  1552  043E               	iorwf	(___fldiv@a+1)^(0+128),w
  7487  1553  043D               	iorwf	___fldiv@a^(0+128),w
  7488  1554  1D03               	skipz
  7489  1555  2D6F               	goto	l5503
  7490  1556  3000               	movlw	0
  7491  1557  00C4               	movwf	(___fldiv@b+3)^(0+128)
  7492  1558  3000               	movlw	0
  7493  1559  00C3               	movwf	(___fldiv@b+2)^(0+128)
  7494  155A  3000               	movlw	0
  7495  155B  00C2               	movwf	(___fldiv@b+1)^(0+128)
  7496  155C  3000               	movlw	0
  7497  155D  00C1               	movwf	___fldiv@b^(0+128)
  7498  155E  3080               	movlw	128
  7499  155F  04C3               	iorwf	(___fldiv@b^(0+128)+2),f
  7500  1560  307F               	movlw	127
  7501  1561  04C4               	iorwf	((___fldiv@b+1)^(0+128)+2),f
  7502  1562                     L4:
  7503  1562  084E               	movf	___fldiv@sign^(0+128),w
  7504  1563  00C5               	movwf	??___fldiv^(0+128)
  7505  1564  0845               	movf	??___fldiv^(0+128),w
  7506  1565  04C4               	iorwf	(___fldiv@b^(0+128)+3),f
  7507  1566  0844               	movf	(___fldiv@b+3)^(0+128),w
  7508  1567  00C0               	movwf	(?___fldiv+3)^(0+128)
  7509  1568  0843               	movf	(___fldiv@b+2)^(0+128),w
  7510  1569  00BF               	movwf	(?___fldiv+2)^(0+128)
  7511  156A  0842               	movf	(___fldiv@b+1)^(0+128),w
  7512  156B  00BE               	movwf	(?___fldiv+1)^(0+128)
  7513  156C  0841               	movf	___fldiv@b^(0+128),w
  7514  156D  00BD               	movwf	?___fldiv^(0+128)
  7515  156E  0008               	return
  7516  156F                     l5503:
  7517  156F  0855               	movf	___fldiv@bexp^(0+128),w
  7518  1570  1D03               	btfss	3,2
  7519  1571  2D7B               	goto	l5509
  7520  1572  3000               	movlw	0
  7521  1573  00C0               	movwf	(?___fldiv+3)^(0+128)
  7522  1574  3000               	movlw	0
  7523  1575  00BF               	movwf	(?___fldiv+2)^(0+128)
  7524  1576  3000               	movlw	0
  7525  1577  00BE               	movwf	(?___fldiv+1)^(0+128)
  7526  1578  3000               	movlw	0
  7527  1579  00BD               	movwf	?___fldiv^(0+128)
  7528  157A  0008               	return
  7529  157B                     l5509:
  7530  157B  0855               	movf	___fldiv@bexp^(0+128),w
  7531  157C  00C5               	movwf	??___fldiv^(0+128)
  7532  157D  01C6               	clrf	(??___fldiv^(0+128)+1)
  7533  157E  0846               	movf	(??___fldiv+1)^(0+128),w
  7534  157F  00C8               	movwf	((??___fldiv+2)^(0+128)+1)
  7535  1580  0856               	movf	___fldiv@aexp^(0+128),w
  7536  1581  0245               	subwf	??___fldiv^(0+128),w
  7537  1582  00C7               	movwf	(??___fldiv+2)^(0+128)
  7538  1583  1C03               	skipc
  7539  1584  03C8               	decf	((??___fldiv+2)^(0+128)+1),f
  7540  1585  0847               	movf	(??___fldiv+2)^(0+128),w
  7541  1586  3E7F               	addlw	127
  7542  1587  00CF               	movwf	___fldiv@new_exp^(0+128)
  7543  1588  3000               	movlw	0
  7544  1589  3D48               	addwfc	(??___fldiv+3)^(0+128),w
  7545  158A  00D0               	movwf	(___fldiv@new_exp+1)^(0+128)
  7546  158B  0844               	movf	(___fldiv@b+3)^(0+128),w
  7547  158C  00CD               	movwf	(___fldiv@rem+3)^(0+128)
  7548  158D  0843               	movf	(___fldiv@b+2)^(0+128),w
  7549  158E  00CC               	movwf	(___fldiv@rem+2)^(0+128)
  7550  158F  0842               	movf	(___fldiv@b+1)^(0+128),w
  7551  1590  00CB               	movwf	(___fldiv@rem+1)^(0+128)
  7552  1591  0841               	movf	___fldiv@b^(0+128),w
  7553  1592  00CA               	movwf	___fldiv@rem^(0+128)
  7554  1593  3000               	movlw	0
  7555  1594  00C4               	movwf	(___fldiv@b+3)^(0+128)
  7556  1595  3000               	movlw	0
  7557  1596  00C3               	movwf	(___fldiv@b+2)^(0+128)
  7558  1597  3000               	movlw	0
  7559  1598  00C2               	movwf	(___fldiv@b+1)^(0+128)
  7560  1599  3000               	movlw	0
  7561  159A  00C1               	movwf	___fldiv@b^(0+128)
  7562  159B  3000               	movlw	0
  7563  159C  00D4               	movwf	(___fldiv@grs+3)^(0+128)
  7564  159D  3000               	movlw	0
  7565  159E  00D3               	movwf	(___fldiv@grs+2)^(0+128)
  7566  159F  3000               	movlw	0
  7567  15A0  00D2               	movwf	(___fldiv@grs+1)^(0+128)
  7568  15A1  3000               	movlw	0
  7569  15A2  00D1               	movwf	___fldiv@grs^(0+128)
  7570  15A3  01D6               	clrf	___fldiv@aexp^(0+128)
  7571  15A4                     l5537:
  7572  15A4  301A               	movlw	26
  7573  15A5  0256               	subwf	___fldiv@aexp^(0+128),w
  7574  15A6  1803               	btfsc	3,0
  7575  15A7  2DE0               	goto	l5539
  7576  15A8  0856               	movf	___fldiv@aexp^(0+128),w
  7577  15A9  1903               	btfsc	3,2
  7578  15AA  2DC2               	goto	l5529
  7579  15AB  3001               	movlw	1
  7580  15AC                     u4845:
  7581  15AC  35CA               	lslf	___fldiv@rem^(0+128),f
  7582  15AD  0DCB               	rlf	(___fldiv@rem+1)^(0+128),f
  7583  15AE  0DCC               	rlf	(___fldiv@rem+2)^(0+128),f
  7584  15AF  0DCD               	rlf	(___fldiv@rem+3)^(0+128),f
  7585  15B0  0B89               	decfsz	9,f
  7586  15B1  2DAC               	goto	u4845
  7587  15B2  3001               	movlw	1
  7588  15B3                     u4855:
  7589  15B3  35C1               	lslf	___fldiv@b^(0+128),f
  7590  15B4  0DC2               	rlf	(___fldiv@b+1)^(0+128),f
  7591  15B5  0DC3               	rlf	(___fldiv@b+2)^(0+128),f
  7592  15B6  0DC4               	rlf	(___fldiv@b+3)^(0+128),f
  7593  15B7  0B89               	decfsz	9,f
  7594  15B8  2DB3               	goto	u4855
  7595  15B9  1BD4               	btfsc	(___fldiv@grs+3)^(0+128),7
  7596  15BA  1441               	bsf	___fldiv@b^(0+128),0
  7597  15BB  3001               	movlw	1
  7598  15BC                     u4875:
  7599  15BC  35D1               	lslf	___fldiv@grs^(0+128),f
  7600  15BD  0DD2               	rlf	(___fldiv@grs+1)^(0+128),f
  7601  15BE  0DD3               	rlf	(___fldiv@grs+2)^(0+128),f
  7602  15BF  0DD4               	rlf	(___fldiv@grs+3)^(0+128),f
  7603  15C0  0B89               	decfsz	9,f
  7604  15C1  2DBC               	goto	u4875
  7605  15C2                     l5529:
  7606  15C2  0840               	movf	(___fldiv@a+3)^(0+128),w
  7607  15C3  024D               	subwf	(___fldiv@rem+3)^(0+128),w
  7608  15C4  1D03               	skipz
  7609  15C5  2DD0               	goto	u4885
  7610  15C6  083F               	movf	(___fldiv@a+2)^(0+128),w
  7611  15C7  024C               	subwf	(___fldiv@rem+2)^(0+128),w
  7612  15C8  1D03               	skipz
  7613  15C9  2DD0               	goto	u4885
  7614  15CA  083E               	movf	(___fldiv@a+1)^(0+128),w
  7615  15CB  024B               	subwf	(___fldiv@rem+1)^(0+128),w
  7616  15CC  1D03               	skipz
  7617  15CD  2DD0               	goto	u4885
  7618  15CE  083D               	movf	___fldiv@a^(0+128),w
  7619  15CF  024A               	subwf	___fldiv@rem^(0+128),w
  7620  15D0                     u4885:
  7621  15D0  1C03               	skipc
  7622  15D1  2DDB               	goto	l5535
  7623  15D2  1754               	bsf	(___fldiv@grs^(0+128)+3),6
  7624  15D3  083D               	movf	___fldiv@a^(0+128),w
  7625  15D4  02CA               	subwf	___fldiv@rem^(0+128),f
  7626  15D5  083E               	movf	(___fldiv@a+1)^(0+128),w
  7627  15D6  3BCB               	subwfb	(___fldiv@rem+1)^(0+128),f
  7628  15D7  083F               	movf	(___fldiv@a+2)^(0+128),w
  7629  15D8  3BCC               	subwfb	(___fldiv@rem+2)^(0+128),f
  7630  15D9  0840               	movf	(___fldiv@a+3)^(0+128),w
  7631  15DA  3BCD               	subwfb	(___fldiv@rem+3)^(0+128),f
  7632  15DB                     l5535:
  7633  15DB  3001               	movlw	1
  7634  15DC  00C5               	movwf	??___fldiv^(0+128)
  7635  15DD  0845               	movf	??___fldiv^(0+128),w
  7636  15DE  07D6               	addwf	___fldiv@aexp^(0+128),f
  7637  15DF  2DA4               	goto	l5537
  7638  15E0                     l5539:
  7639  15E0  084D               	movf	(___fldiv@rem+3)^(0+128),w
  7640  15E1  044C               	iorwf	(___fldiv@rem+2)^(0+128),w
  7641  15E2  044B               	iorwf	(___fldiv@rem+1)^(0+128),w
  7642  15E3  044A               	iorwf	___fldiv@rem^(0+128),w
  7643  15E4  1D03               	btfss	3,2
  7644  15E5  1451               	bsf	___fldiv@grs^(0+128),0
  7645  15E6                     l5553:
  7646  15E6  1BC3               	btfsc	(___fldiv@b+2)^(0+128),7
  7647  15E7  2DFD               	goto	l5555
  7648  15E8  3001               	movlw	1
  7649  15E9                     u4915:
  7650  15E9  35C1               	lslf	___fldiv@b^(0+128),f
  7651  15EA  0DC2               	rlf	(___fldiv@b+1)^(0+128),f
  7652  15EB  0DC3               	rlf	(___fldiv@b+2)^(0+128),f
  7653  15EC  0DC4               	rlf	(___fldiv@b+3)^(0+128),f
  7654  15ED  0B89               	decfsz	9,f
  7655  15EE  2DE9               	goto	u4915
  7656  15EF  1BD4               	btfsc	(___fldiv@grs+3)^(0+128),7
  7657  15F0  1441               	bsf	___fldiv@b^(0+128),0
  7658  15F1  3001               	movlw	1
  7659  15F2                     u4935:
  7660  15F2  35D1               	lslf	___fldiv@grs^(0+128),f
  7661  15F3  0DD2               	rlf	(___fldiv@grs+1)^(0+128),f
  7662  15F4  0DD3               	rlf	(___fldiv@grs+2)^(0+128),f
  7663  15F5  0DD4               	rlf	(___fldiv@grs+3)^(0+128),f
  7664  15F6  0B89               	decfsz	9,f
  7665  15F7  2DF2               	goto	u4935
  7666  15F8  30FF               	movlw	255
  7667  15F9  07CF               	addwf	___fldiv@new_exp^(0+128),f
  7668  15FA  30FF               	movlw	255
  7669  15FB  3DD0               	addwfc	(___fldiv@new_exp+1)^(0+128),f
  7670  15FC  2DE6               	goto	l5553
  7671  15FD                     l5555:
  7672  15FD  01D6               	clrf	___fldiv@aexp^(0+128)
  7673  15FE  1FD4               	btfss	(___fldiv@grs+3)^(0+128),7
  7674  15FF  2E16               	goto	l5565
  7675  1600  30FF               	movlw	255
  7676  1601  0551               	andwf	___fldiv@grs^(0+128),w
  7677  1602  00C5               	movwf	??___fldiv^(0+128)
  7678  1603  30FF               	movlw	255
  7679  1604  0552               	andwf	(___fldiv@grs+1)^(0+128),w
  7680  1605  00C6               	movwf	(??___fldiv^(0+128)+1)
  7681  1606  30FF               	movlw	255
  7682  1607  0553               	andwf	(___fldiv@grs+2)^(0+128),w
  7683  1608  00C7               	movwf	(??___fldiv^(0+128)+2)
  7684  1609  307F               	movlw	127
  7685  160A  0554               	andwf	(___fldiv@grs+3)^(0+128),w
  7686  160B  00C8               	movwf	(??___fldiv^(0+128)+3)
  7687  160C  0848               	movf	(??___fldiv+3)^(0+128),w
  7688  160D  0447               	iorwf	(??___fldiv+2)^(0+128),w
  7689  160E  0446               	iorwf	(??___fldiv+1)^(0+128),w
  7690  160F  0445               	iorwf	??___fldiv^(0+128),w
  7691  1610  1903               	skipnz
  7692  1611  1841               	btfsc	___fldiv@b^(0+128),0
  7693  1612  2E14               	goto	l5561
  7694  1613  2E16               	goto	l5565
  7695  1614                     l5561:
  7696  1614  01D6               	clrf	___fldiv@aexp^(0+128)
  7697  1615  0AD6               	incf	___fldiv@aexp^(0+128),f
  7698  1616                     l5565:
  7699  1616  0856               	movf	___fldiv@aexp^(0+128),w
  7700  1617  1903               	btfsc	3,2
  7701  1618  2E3F               	goto	l5575
  7702  1619  3001               	movlw	1
  7703  161A  07C1               	addwf	___fldiv@b^(0+128),f
  7704  161B  3000               	movlw	0
  7705  161C  3DC2               	addwfc	(___fldiv@b+1)^(0+128),f
  7706  161D  3000               	movlw	0
  7707  161E  3DC3               	addwfc	(___fldiv@b+2)^(0+128),f
  7708  161F  3000               	movlw	0
  7709  1620  3DC4               	addwfc	(___fldiv@b+3)^(0+128),f
  7710  1621  1C44               	btfss	(___fldiv@b+3)^(0+128),0
  7711  1622  2E3F               	goto	l5575
  7712  1623  0841               	movf	___fldiv@b^(0+128),w
  7713  1624  00C5               	movwf	??___fldiv^(0+128)
  7714  1625  0842               	movf	(___fldiv@b+1)^(0+128),w
  7715  1626  00C6               	movwf	(??___fldiv^(0+128)+1)
  7716  1627  0843               	movf	(___fldiv@b+2)^(0+128),w
  7717  1628  00C7               	movwf	(??___fldiv^(0+128)+2)
  7718  1629  0844               	movf	(___fldiv@b+3)^(0+128),w
  7719  162A  00C8               	movwf	(??___fldiv^(0+128)+3)
  7720  162B  3001               	movlw	1
  7721  162C  00C9               	movwf	(??___fldiv+4)^(0+128)
  7722  162D                     u5005:
  7723  162D  37C8               	asrf	(??___fldiv^(0+128)+3),f
  7724  162E  0CC7               	rrf	(??___fldiv^(0+128)+2),f
  7725  162F  0CC6               	rrf	(??___fldiv^(0+128)+1),f
  7726  1630  0CC5               	rrf	??___fldiv^(0+128),f
  7727  1631  0BC9               	decfsz	(??___fldiv+4)^(0+128),f
  7728  1632  2E2D               	goto	u5005
  7729  1633  0848               	movf	(??___fldiv+3)^(0+128),w
  7730  1634  00C4               	movwf	(___fldiv@b+3)^(0+128)
  7731  1635  0847               	movf	(??___fldiv+2)^(0+128),w
  7732  1636  00C3               	movwf	(___fldiv@b+2)^(0+128)
  7733  1637  0846               	movf	(??___fldiv+1)^(0+128),w
  7734  1638  00C2               	movwf	(___fldiv@b+1)^(0+128)
  7735  1639  0845               	movf	??___fldiv^(0+128),w
  7736  163A  00C1               	movwf	___fldiv@b^(0+128)
  7737  163B  3001               	movlw	1
  7738  163C  07CF               	addwf	___fldiv@new_exp^(0+128),f
  7739  163D  3000               	movlw	0
  7740  163E  3DD0               	addwfc	(___fldiv@new_exp+1)^(0+128),f
  7741  163F                     l5575:
  7742  163F  0850               	movf	(___fldiv@new_exp+1)^(0+128),w
  7743  1640  3A80               	xorlw	128
  7744  1641  00C5               	movwf	??___fldiv^(0+128)
  7745  1642  3080               	movlw	128
  7746  1643  0245               	subwf	??___fldiv^(0+128),w
  7747  1644  1D03               	skipz
  7748  1645  2E48               	goto	u5015
  7749  1646  30FF               	movlw	255
  7750  1647  024F               	subwf	___fldiv@new_exp^(0+128),w
  7751  1648                     u5015:
  7752  1648  1C03               	skipc
  7753  1649  2E57               	goto	l1431
  7754  164A  30FF               	movlw	255
  7755  164B  0021               	movlb	1	; select bank1
  7756  164C  00CF               	movwf	___fldiv@new_exp^(0+128)
  7757  164D  3000               	movlw	0
  7758  164E  00D0               	movwf	(___fldiv@new_exp^(0+128)+1)
  7759  164F  3000               	movlw	0
  7760  1650  00C4               	movwf	(___fldiv@b+3)^(0+128)
  7761  1651  3000               	movlw	0
  7762  1652  00C3               	movwf	(___fldiv@b+2)^(0+128)
  7763  1653  3000               	movlw	0
  7764  1654  00C2               	movwf	(___fldiv@b+1)^(0+128)
  7765  1655  3000               	movlw	0
  7766  1656  00C1               	movwf	___fldiv@b^(0+128)
  7767  1657                     l1431:
  7768  1657  0021               	movlb	1	; select bank1
  7769  1658  0850               	movf	(___fldiv@new_exp+1)^(0+128),w
  7770  1659  3A80               	xorlw	128
  7771  165A  00C5               	movwf	??___fldiv^(0+128)
  7772  165B  3080               	movlw	128
  7773  165C  0245               	subwf	??___fldiv^(0+128),w
  7774  165D  1D03               	skipz
  7775  165E  2E61               	goto	u5025
  7776  165F  3001               	movlw	1
  7777  1660  024F               	subwf	___fldiv@new_exp^(0+128),w
  7778  1661                     u5025:
  7779  1661  1803               	skipnc
  7780  1662  2E6F               	goto	l1432
  7781  1663  0021               	movlb	1	; select bank1
  7782  1664  01CF               	clrf	___fldiv@new_exp^(0+128)
  7783  1665  01D0               	clrf	(___fldiv@new_exp+1)^(0+128)
  7784  1666  3000               	movlw	0
  7785  1667  00C4               	movwf	(___fldiv@b+3)^(0+128)
  7786  1668  3000               	movlw	0
  7787  1669  00C3               	movwf	(___fldiv@b+2)^(0+128)
  7788  166A  3000               	movlw	0
  7789  166B  00C2               	movwf	(___fldiv@b+1)^(0+128)
  7790  166C  3000               	movlw	0
  7791  166D  00C1               	movwf	___fldiv@b^(0+128)
  7792  166E  01CE               	clrf	___fldiv@sign^(0+128)
  7793  166F                     l1432:
  7794  166F  0021               	movlb	1	; select bank1
  7795  1670  084F               	movf	___fldiv@new_exp^(0+128),w
  7796  1671  00C5               	movwf	??___fldiv^(0+128)
  7797  1672  0845               	movf	??___fldiv^(0+128),w
  7798  1673  00D5               	movwf	___fldiv@bexp^(0+128)
  7799  1674  1C55               	btfss	___fldiv@bexp^(0+128),0
  7800  1675  2E78               	goto	l5589
  7801  1676  17C3               	bsf	(___fldiv@b^(0+128)+2),7
  7802  1677  2E7C               	goto	l1434
  7803  1678                     l5589:
  7804  1678  307F               	movlw	127
  7805  1679  00C5               	movwf	??___fldiv^(0+128)
  7806  167A  0845               	movf	??___fldiv^(0+128),w
  7807  167B  05C3               	andwf	(___fldiv@b^(0+128)+2),f
  7808  167C                     l1434:
  7809  167C  3655               	lsrf	___fldiv@bexp^(0+128),w
  7810  167D  00C5               	movwf	??___fldiv^(0+128)
  7811  167E  0845               	movf	??___fldiv^(0+128),w
  7812  167F  00C4               	movwf	(___fldiv@b^(0+128)+3)
  7813  1680  2D62               	goto	L4
  7814  1681                     __end_of___fldiv:
  7815                           
  7816                           	psect	text8
  7817  137F                     __ptext8:	
  7818 ;; *************** function ___flge *****************
  7819 ;; Defined at:
  7820 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\flge.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;  ff1             4   23[BANK0 ] unsigned char 
  7823 ;;  ff2             4   27[BANK0 ] unsigned char 
  7824 ;; Auto vars:     Size  Location     Type
  7825 ;;		None
  7826 ;; Return value:  Size  Location     Type
  7827 ;;		None               void
  7828 ;; Registers used:
  7829 ;;		wreg, status,2, status,0
  7830 ;; Tracked objects:
  7831 ;;		On entry : 1F/0
  7832 ;;		On exit  : 1F/0
  7833 ;;		Unchanged: 0/0
  7834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7835 ;;      Params:         0       8       0       0       0       0       0       0
  7836 ;;      Locals:         0       0       0       0       0       0       0       0
  7837 ;;      Temps:          0       4       0       0       0       0       0       0
  7838 ;;      Totals:         0      12       0       0       0       0       0       0
  7839 ;;Total ram usage:       12 bytes
  7840 ;; Hardware stack levels used: 1
  7841 ;; Hardware stack levels required when called: 4
  7842 ;; This function calls:
  7843 ;;		Nothing
  7844 ;; This function is called by:
  7845 ;;		_main
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849  137F                     ___flge:	
  7850                           ;psect for function ___flge
  7851                           
  7852                           
  7853                           ;incstack = 0
  7854                           ; Regs used in ___flge: [wreg+status,2+status,0]
  7855  137F  3000               	movlw	0
  7856  1380  0537               	andwf	___flge@ff1,w
  7857  1381  00BF               	movwf	??___flge
  7858  1382  3000               	movlw	0
  7859  1383  0538               	andwf	___flge@ff1+1,w
  7860  1384  00C0               	movwf	??___flge+1
  7861  1385  3080               	movlw	128
  7862  1386  0539               	andwf	___flge@ff1+2,w
  7863  1387  00C1               	movwf	??___flge+2
  7864  1388  307F               	movlw	127
  7865  1389  053A               	andwf	___flge@ff1+3,w
  7866  138A  00C2               	movwf	??___flge+3
  7867  138B  0842               	movf	??___flge+3,w
  7868  138C  0441               	iorwf	??___flge+2,w
  7869  138D  0440               	iorwf	??___flge+1,w
  7870  138E  043F               	iorwf	??___flge,w
  7871  138F  1D03               	skipz
  7872  1390  2B99               	goto	l1231
  7873  1391  3000               	movlw	0
  7874  1392  00BA               	movwf	___flge@ff1+3
  7875  1393  3000               	movlw	0
  7876  1394  00B9               	movwf	___flge@ff1+2
  7877  1395  3000               	movlw	0
  7878  1396  00B8               	movwf	___flge@ff1+1
  7879  1397  3000               	movlw	0
  7880  1398  00B7               	movwf	___flge@ff1
  7881  1399                     l1231:
  7882  1399  3000               	movlw	0
  7883  139A  053B               	andwf	___flge@ff2,w
  7884  139B  00BF               	movwf	??___flge
  7885  139C  3000               	movlw	0
  7886  139D  053C               	andwf	___flge@ff2+1,w
  7887  139E  00C0               	movwf	??___flge+1
  7888  139F  3080               	movlw	128
  7889  13A0  053D               	andwf	___flge@ff2+2,w
  7890  13A1  00C1               	movwf	??___flge+2
  7891  13A2  307F               	movlw	127
  7892  13A3  053E               	andwf	___flge@ff2+3,w
  7893  13A4  00C2               	movwf	??___flge+3
  7894  13A5  0842               	movf	??___flge+3,w
  7895  13A6  0441               	iorwf	??___flge+2,w
  7896  13A7  0440               	iorwf	??___flge+1,w
  7897  13A8  043F               	iorwf	??___flge,w
  7898  13A9  1D03               	skipz
  7899  13AA  2BB3               	goto	l4937
  7900  13AB  3000               	movlw	0
  7901  13AC  00BE               	movwf	___flge@ff2+3
  7902  13AD  3000               	movlw	0
  7903  13AE  00BD               	movwf	___flge@ff2+2
  7904  13AF  3000               	movlw	0
  7905  13B0  00BC               	movwf	___flge@ff2+1
  7906  13B1  3000               	movlw	0
  7907  13B2  00BB               	movwf	___flge@ff2
  7908  13B3                     l4937:
  7909  13B3  1FBA               	btfss	___flge@ff1+3,7
  7910  13B4  2BCD               	goto	l4941
  7911  13B5  3000               	movlw	0
  7912  13B6  00BF               	movwf	??___flge
  7913  13B7  3000               	movlw	0
  7914  13B8  00C0               	movwf	??___flge+1
  7915  13B9  3000               	movlw	0
  7916  13BA  00C1               	movwf	??___flge+2
  7917  13BB  3080               	movlw	128
  7918  13BC  00C2               	movwf	??___flge+3
  7919  13BD  0837               	movf	___flge@ff1,w
  7920  13BE  02BF               	subwf	??___flge,f
  7921  13BF  0838               	movf	___flge@ff1+1,w
  7922  13C0  3BC0               	subwfb	??___flge+1,f
  7923  13C1  0839               	movf	___flge@ff1+2,w
  7924  13C2  3BC1               	subwfb	??___flge+2,f
  7925  13C3  083A               	movf	___flge@ff1+3,w
  7926  13C4  3BC2               	subwfb	??___flge+3,f
  7927  13C5  0842               	movf	??___flge+3,w
  7928  13C6  00BA               	movwf	___flge@ff1+3
  7929  13C7  0841               	movf	??___flge+2,w
  7930  13C8  00B9               	movwf	___flge@ff1+2
  7931  13C9  0840               	movf	??___flge+1,w
  7932  13CA  00B8               	movwf	___flge@ff1+1
  7933  13CB  083F               	movf	??___flge,w
  7934  13CC  00B7               	movwf	___flge@ff1
  7935  13CD                     l4941:
  7936  13CD  1FBE               	btfss	___flge@ff2+3,7
  7937  13CE  2BE7               	goto	l1234
  7938  13CF  3000               	movlw	0
  7939  13D0  00BF               	movwf	??___flge
  7940  13D1  3000               	movlw	0
  7941  13D2  00C0               	movwf	??___flge+1
  7942  13D3  3000               	movlw	0
  7943  13D4  00C1               	movwf	??___flge+2
  7944  13D5  3080               	movlw	128
  7945  13D6  00C2               	movwf	??___flge+3
  7946  13D7  083B               	movf	___flge@ff2,w
  7947  13D8  02BF               	subwf	??___flge,f
  7948  13D9  083C               	movf	___flge@ff2+1,w
  7949  13DA  3BC0               	subwfb	??___flge+1,f
  7950  13DB  083D               	movf	___flge@ff2+2,w
  7951  13DC  3BC1               	subwfb	??___flge+2,f
  7952  13DD  083E               	movf	___flge@ff2+3,w
  7953  13DE  3BC2               	subwfb	??___flge+3,f
  7954  13DF  0842               	movf	??___flge+3,w
  7955  13E0  00BE               	movwf	___flge@ff2+3
  7956  13E1  0841               	movf	??___flge+2,w
  7957  13E2  00BD               	movwf	___flge@ff2+2
  7958  13E3  0840               	movf	??___flge+1,w
  7959  13E4  00BC               	movwf	___flge@ff2+1
  7960  13E5  083F               	movf	??___flge,w
  7961  13E6  00BB               	movwf	___flge@ff2
  7962  13E7                     l1234:
  7963  13E7  3080               	movlw	128
  7964  13E8  06BA               	xorwf	___flge@ff1+3,f
  7965  13E9  3080               	movlw	128
  7966  13EA  06BE               	xorwf	___flge@ff2+3,f
  7967  13EB  083E               	movf	___flge@ff2+3,w
  7968  13EC  023A               	subwf	___flge@ff1+3,w
  7969  13ED  1D03               	skipz
  7970  13EE  0008               	return
  7971  13EF  083D               	movf	___flge@ff2+2,w
  7972  13F0  0239               	subwf	___flge@ff1+2,w
  7973  13F1  1D03               	skipz
  7974  13F2  0008               	return
  7975  13F3  083C               	movf	___flge@ff2+1,w
  7976  13F4  0238               	subwf	___flge@ff1+1,w
  7977  13F5  1D03               	skipz
  7978  13F6  0008               	return
  7979  13F7  083B               	movf	___flge@ff2,w
  7980  13F8  0237               	subwf	___flge@ff1,w
  7981  13F9  0008               	return
  7982  13FA                     __end_of___flge:
  7983                           
  7984                           	psect	text9
  7985  1F0F                     __ptext9:	
  7986 ;; *************** function _SYSTEM_Initialize *****************
  7987 ;; Defined at:
  7988 ;;		line 50 in file "mcc_generated_files/mcc.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;		None
  7991 ;; Auto vars:     Size  Location     Type
  7992 ;;		None
  7993 ;; Return value:  Size  Location     Type
  7994 ;;                  1    wreg      void 
  7995 ;; Registers used:
  7996 ;;		wreg, status,2, status,0, pclath, cstack
  7997 ;; Tracked objects:
  7998 ;;		On entry : B1F/0
  7999 ;;		On exit  : 1F/1
  8000 ;;		Unchanged: 0/0
  8001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8002 ;;      Params:         0       0       0       0       0       0       0       0
  8003 ;;      Locals:         0       0       0       0       0       0       0       0
  8004 ;;      Temps:          0       0       0       0       0       0       0       0
  8005 ;;      Totals:         0       0       0       0       0       0       0       0
  8006 ;;Total ram usage:        0 bytes
  8007 ;; Hardware stack levels used: 1
  8008 ;; Hardware stack levels required when called: 6
  8009 ;; This function calls:
  8010 ;;		_EUSART_Initialize
  8011 ;;		_I2C_Initialize
  8012 ;;		_OSCILLATOR_Initialize
  8013 ;;		_PIN_MANAGER_Initialize
  8014 ;;		_TMR0_Initialize
  8015 ;;		_TMR1_Initialize
  8016 ;;		_WDT_Initialize
  8017 ;; This function is called by:
  8018 ;;		_main
  8019 ;; This function uses a non-reentrant model
  8020 ;;
  8021                           
  8022  1F0F                     _SYSTEM_Initialize:	
  8023                           ;psect for function _SYSTEM_Initialize
  8024                           
  8025                           
  8026                           ;mcc_generated_files/mcc.c: 53:     I2C_Initialize();
  8027                           
  8028                           ;incstack = 0
  8029                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8030  1F0F  319E  2619  319F   	fcall	_I2C_Initialize
  8031                           
  8032                           ;mcc_generated_files/mcc.c: 54:     PIN_MANAGER_Initialize();
  8033  1F12  319F  2754  319F   	fcall	_PIN_MANAGER_Initialize
  8034                           
  8035                           ;mcc_generated_files/mcc.c: 55:     OSCILLATOR_Initialize();
  8036  1F15  319D  25BA  319F   	fcall	_OSCILLATOR_Initialize
  8037                           
  8038                           ;mcc_generated_files/mcc.c: 56:     WDT_Initialize();
  8039  1F18  3187  27FC  319F   	fcall	_WDT_Initialize
  8040                           
  8041                           ;mcc_generated_files/mcc.c: 57:     TMR1_Initialize();
  8042  1F1B  319F  2724  319F   	fcall	_TMR1_Initialize
  8043                           
  8044                           ;mcc_generated_files/mcc.c: 58:     TMR0_Initialize();
  8045  1F1E  319E  26FA  319F   	fcall	_TMR0_Initialize
  8046                           
  8047                           ;mcc_generated_files/mcc.c: 59:     EUSART_Initialize();
  8048  1F21  3191  21F6         	fcall	_EUSART_Initialize
  8049  1F23  0008               	return
  8050  1F24                     __end_of_SYSTEM_Initialize:
  8051                           
  8052                           	psect	text10
  8053  07FC                     __ptext10:	
  8054 ;; *************** function _WDT_Initialize *****************
  8055 ;; Defined at:
  8056 ;;		line 70 in file "mcc_generated_files/mcc.c"
  8057 ;; Parameters:    Size  Location     Type
  8058 ;;		None
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;		None
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  1    wreg      void 
  8063 ;; Registers used:
  8064 ;;		wreg
  8065 ;; Tracked objects:
  8066 ;;		On entry : B1F/2
  8067 ;;		On exit  : B1F/1
  8068 ;;		Unchanged: B00/0
  8069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8070 ;;      Params:         0       0       0       0       0       0       0       0
  8071 ;;      Locals:         0       0       0       0       0       0       0       0
  8072 ;;      Temps:          0       0       0       0       0       0       0       0
  8073 ;;      Totals:         0       0       0       0       0       0       0       0
  8074 ;;Total ram usage:        0 bytes
  8075 ;; Hardware stack levels used: 1
  8076 ;; Hardware stack levels required when called: 4
  8077 ;; This function calls:
  8078 ;;		Nothing
  8079 ;; This function is called by:
  8080 ;;		_SYSTEM_Initialize
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084  07FC                     _WDT_Initialize:	
  8085                           ;psect for function _WDT_Initialize
  8086                           
  8087                           
  8088                           ;mcc_generated_files/mcc.c: 73:     WDTCON = 0x1A;
  8089                           
  8090                           ;incstack = 0
  8091                           ; Regs used in _WDT_Initialize: [wreg]
  8092  07FC  301A               	movlw	26
  8093  07FD  0021               	movlb	1	; select bank1
  8094  07FE  0097               	movwf	23	;volatile
  8095  07FF  0008               	return
  8096  0800                     __end_of_WDT_Initialize:
  8097                           
  8098                           	psect	text11
  8099  1F24                     __ptext11:	
  8100 ;; *************** function _TMR1_Initialize *****************
  8101 ;; Defined at:
  8102 ;;		line 65 in file "mcc_generated_files/tmr1.c"
  8103 ;; Parameters:    Size  Location     Type
  8104 ;;		None
  8105 ;; Auto vars:     Size  Location     Type
  8106 ;;		None
  8107 ;; Return value:  Size  Location     Type
  8108 ;;                  1    wreg      void 
  8109 ;; Registers used:
  8110 ;;		wreg, status,2, status,0, pclath, cstack
  8111 ;; Tracked objects:
  8112 ;;		On entry : B1F/1
  8113 ;;		On exit  : B1F/0
  8114 ;;		Unchanged: B00/0
  8115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8116 ;;      Params:         0       0       0       0       0       0       0       0
  8117 ;;      Locals:         0       0       0       0       0       0       0       0
  8118 ;;      Temps:          0       0       0       0       0       0       0       0
  8119 ;;      Totals:         0       0       0       0       0       0       0       0
  8120 ;;Total ram usage:        0 bytes
  8121 ;; Hardware stack levels used: 1
  8122 ;; Hardware stack levels required when called: 5
  8123 ;; This function calls:
  8124 ;;		_TMR1_SetInterruptHandler
  8125 ;; This function is called by:
  8126 ;;		_SYSTEM_Initialize
  8127 ;; This function uses a non-reentrant model
  8128 ;;
  8129                           
  8130  1F24                     _TMR1_Initialize:	
  8131                           ;psect for function _TMR1_Initialize
  8132                           
  8133                           
  8134                           ;mcc_generated_files/tmr1.c: 70:     T1GCON = 0x00;
  8135                           
  8136                           ;incstack = 0
  8137                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8138  1F24  0020               	movlb	0	; select bank0
  8139  1F25  0199               	clrf	25	;volatile
  8140                           
  8141                           ;mcc_generated_files/tmr1.c: 73:     TMR1H = 0xB1;
  8142  1F26  30B1               	movlw	177
  8143  1F27  0097               	movwf	23	;volatile
  8144                           
  8145                           ;mcc_generated_files/tmr1.c: 76:     TMR1L = 0xE0;
  8146  1F28  30E0               	movlw	224
  8147  1F29  0096               	movwf	22	;volatile
  8148                           
  8149                           ;mcc_generated_files/tmr1.c: 79:     PIR1bits.TMR1IF = 0;
  8150  1F2A  1011               	bcf	17,0	;volatile
  8151                           
  8152                           ;mcc_generated_files/tmr1.c: 82:     timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  8153  1F2B  0817               	movf	23,w	;volatile
  8154  1F2C  00E3               	movwf	_timer1ReloadVal+1	;volatile
  8155  1F2D  0816               	movf	22,w	;volatile
  8156  1F2E  00E2               	movwf	_timer1ReloadVal	;volatile
  8157                           
  8158                           ;mcc_generated_files/tmr1.c: 85:     PIE1bits.TMR1IE = 1;
  8159  1F2F  0021               	movlb	1	; select bank1
  8160  1F30  1411               	bsf	17,0	;volatile
  8161                           
  8162                           ;mcc_generated_files/tmr1.c: 88:     TMR1_SetInterruptHandler(mbus_timer_handler);
  8163  1F31  3023               	movlw	low _mbus_timer_handler
  8164  1F32  0020               	movlb	0	; select bank0
  8165  1F33  00A9               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  8166  1F34  301E               	movlw	high _mbus_timer_handler
  8167  1F35  00AA               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  8168  1F36  319D  25A3         	fcall	_TMR1_SetInterruptHandler
  8169                           
  8170                           ;mcc_generated_files/tmr1.c: 91:     T1CON = 0x01;
  8171  1F38  3001               	movlw	1
  8172  1F39  0098               	movwf	24	;volatile
  8173  1F3A  0008               	return
  8174  1F3B                     __end_of_TMR1_Initialize:
  8175                           
  8176                           	psect	text12
  8177  1DA3                     __ptext12:	
  8178 ;; *************** function _TMR1_SetInterruptHandler *****************
  8179 ;; Defined at:
  8180 ;;		line 179 in file "mcc_generated_files/tmr1.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
  8183 ;;		 -> mbus_timer_handler(1), 
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;		None
  8186 ;; Return value:  Size  Location     Type
  8187 ;;                  1    wreg      void 
  8188 ;; Registers used:
  8189 ;;		wreg
  8190 ;; Tracked objects:
  8191 ;;		On entry : B1F/0
  8192 ;;		On exit  : B1F/0
  8193 ;;		Unchanged: B00/0
  8194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8195 ;;      Params:         0       2       0       0       0       0       0       0
  8196 ;;      Locals:         0       0       0       0       0       0       0       0
  8197 ;;      Temps:          0       0       0       0       0       0       0       0
  8198 ;;      Totals:         0       2       0       0       0       0       0       0
  8199 ;;Total ram usage:        2 bytes
  8200 ;; Hardware stack levels used: 1
  8201 ;; Hardware stack levels required when called: 4
  8202 ;; This function calls:
  8203 ;;		Nothing
  8204 ;; This function is called by:
  8205 ;;		_TMR1_Initialize
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209  1DA3                     _TMR1_SetInterruptHandler:	
  8210                           ;psect for function _TMR1_SetInterruptHandler
  8211                           
  8212                           
  8213                           ;mcc_generated_files/tmr1.c: 180:     TMR1_InterruptHandler = InterruptHandler;
  8214                           
  8215                           ;incstack = 0
  8216                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  8217  1DA3  082A               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  8218  1DA4  00E1               	movwf	_TMR1_InterruptHandler+1
  8219  1DA5  0829               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  8220  1DA6  00E0               	movwf	_TMR1_InterruptHandler
  8221  1DA7  0008               	return
  8222  1DA8                     __end_of_TMR1_SetInterruptHandler:
  8223                           
  8224                           	psect	text13
  8225  1EFA                     __ptext13:	
  8226 ;; *************** function _TMR0_Initialize *****************
  8227 ;; Defined at:
  8228 ;;		line 64 in file "mcc_generated_files/tmr0.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;		None
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  1    wreg      void 
  8235 ;; Registers used:
  8236 ;;		wreg, status,2, status,0, pclath, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : B1F/0
  8239 ;;		On exit  : B1F/0
  8240 ;;		Unchanged: B00/0
  8241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8242 ;;      Params:         0       0       0       0       0       0       0       0
  8243 ;;      Locals:         0       0       0       0       0       0       0       0
  8244 ;;      Temps:          0       1       0       0       0       0       0       0
  8245 ;;      Totals:         0       1       0       0       0       0       0       0
  8246 ;;Total ram usage:        1 bytes
  8247 ;; Hardware stack levels used: 1
  8248 ;; Hardware stack levels required when called: 5
  8249 ;; This function calls:
  8250 ;;		_TMR0_SetInterruptHandler
  8251 ;; This function is called by:
  8252 ;;		_SYSTEM_Initialize
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256  1EFA                     _TMR0_Initialize:	
  8257                           ;psect for function _TMR0_Initialize
  8258                           
  8259                           
  8260                           ;mcc_generated_files/tmr0.c: 69:     OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | (0xD7 
      +                          & 0x3F));
  8261                           
  8262                           ;incstack = 0
  8263                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8264  1EFA  0021               	movlb	1	; select bank1
  8265  1EFB  0815               	movf	21,w	;volatile
  8266  1EFC  39C0               	andlw	192
  8267  1EFD  3817               	iorlw	23
  8268  1EFE  0095               	movwf	21	;volatile
  8269                           
  8270                           ;mcc_generated_files/tmr0.c: 72:     TMR0 = 0xF8;
  8271  1EFF  30F8               	movlw	248
  8272  1F00  0020               	movlb	0	; select bank0
  8273  1F01  0095               	movwf	21	;volatile
  8274                           
  8275                           ;mcc_generated_files/tmr0.c: 75:     timer0ReloadVal= 248;
  8276  1F02  30F8               	movlw	248
  8277  1F03  00AB               	movwf	??_TMR0_Initialize
  8278  1F04  082B               	movf	??_TMR0_Initialize,w
  8279  1F05  00E6               	movwf	_timer0ReloadVal	;volatile
  8280                           
  8281                           ;mcc_generated_files/tmr0.c: 78:     INTCONbits.TMR0IF = 0;
  8282  1F06  110B               	bcf	11,2	;volatile
  8283                           
  8284                           ;mcc_generated_files/tmr0.c: 81:     INTCONbits.TMR0IE = 1;
  8285  1F07  168B               	bsf	11,5	;volatile
  8286                           
  8287                           ;mcc_generated_files/tmr0.c: 84:     TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandl
      +                          er);
  8288  1F08  3044               	movlw	low _TMR0_DefaultInterruptHandler
  8289  1F09  00A9               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  8290  1F0A  301D               	movlw	high _TMR0_DefaultInterruptHandler
  8291  1F0B  00AA               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  8292  1F0C  319D  259E         	fcall	_TMR0_SetInterruptHandler
  8293  1F0E  0008               	return
  8294  1F0F                     __end_of_TMR0_Initialize:
  8295                           
  8296                           	psect	text14
  8297  1D9E                     __ptext14:	
  8298 ;; *************** function _TMR0_SetInterruptHandler *****************
  8299 ;; Defined at:
  8300 ;;		line 133 in file "mcc_generated_files/tmr0.c"
  8301 ;; Parameters:    Size  Location     Type
  8302 ;;  InterruptHan    2    9[BANK0 ] PTR FTN()void 
  8303 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  8304 ;; Auto vars:     Size  Location     Type
  8305 ;;		None
  8306 ;; Return value:  Size  Location     Type
  8307 ;;                  1    wreg      void 
  8308 ;; Registers used:
  8309 ;;		wreg
  8310 ;; Tracked objects:
  8311 ;;		On entry : B1F/0
  8312 ;;		On exit  : B1F/0
  8313 ;;		Unchanged: B00/0
  8314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8315 ;;      Params:         0       2       0       0       0       0       0       0
  8316 ;;      Locals:         0       0       0       0       0       0       0       0
  8317 ;;      Temps:          0       0       0       0       0       0       0       0
  8318 ;;      Totals:         0       2       0       0       0       0       0       0
  8319 ;;Total ram usage:        2 bytes
  8320 ;; Hardware stack levels used: 1
  8321 ;; Hardware stack levels required when called: 4
  8322 ;; This function calls:
  8323 ;;		Nothing
  8324 ;; This function is called by:
  8325 ;;		_TMR0_Initialize
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329  1D9E                     _TMR0_SetInterruptHandler:	
  8330                           ;psect for function _TMR0_SetInterruptHandler
  8331                           
  8332                           
  8333                           ;mcc_generated_files/tmr0.c: 134:     TMR0_InterruptHandler = InterruptHandler;
  8334                           
  8335                           ;incstack = 0
  8336                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  8337  1D9E  082A               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  8338  1D9F  00DF               	movwf	_TMR0_InterruptHandler+1
  8339  1DA0  0829               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  8340  1DA1  00DE               	movwf	_TMR0_InterruptHandler
  8341  1DA2  0008               	return
  8342  1DA3                     __end_of_TMR0_SetInterruptHandler:
  8343                           
  8344                           	psect	text15
  8345  1F54                     __ptext15:	
  8346 ;; *************** function _PIN_MANAGER_Initialize *****************
  8347 ;; Defined at:
  8348 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  8349 ;; Parameters:    Size  Location     Type
  8350 ;;		None
  8351 ;; Auto vars:     Size  Location     Type
  8352 ;;		None
  8353 ;; Return value:  Size  Location     Type
  8354 ;;                  1    wreg      void 
  8355 ;; Registers used:
  8356 ;;		wreg, status,2
  8357 ;; Tracked objects:
  8358 ;;		On entry : B1F/4
  8359 ;;		On exit  : B1F/2
  8360 ;;		Unchanged: B00/0
  8361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8362 ;;      Params:         0       0       0       0       0       0       0       0
  8363 ;;      Locals:         0       0       0       0       0       0       0       0
  8364 ;;      Temps:          0       0       0       0       0       0       0       0
  8365 ;;      Totals:         0       0       0       0       0       0       0       0
  8366 ;;Total ram usage:        0 bytes
  8367 ;; Hardware stack levels used: 1
  8368 ;; Hardware stack levels required when called: 4
  8369 ;; This function calls:
  8370 ;;		Nothing
  8371 ;; This function is called by:
  8372 ;;		_SYSTEM_Initialize
  8373 ;; This function uses a non-reentrant model
  8374 ;;
  8375                           
  8376  1F54                     _PIN_MANAGER_Initialize:	
  8377                           ;psect for function _PIN_MANAGER_Initialize
  8378                           
  8379                           
  8380                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
  8381                           
  8382                           ;incstack = 0
  8383                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  8384  1F54  0022               	movlb	2	; select bank2
  8385  1F55  018C               	clrf	12	;volatile
  8386                           
  8387                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
  8388  1F56  018D               	clrf	13	;volatile
  8389                           
  8390                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
  8391  1F57  018E               	clrf	14	;volatile
  8392                           
  8393                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0x3F;
  8394  1F58  303F               	movlw	63
  8395  1F59  0021               	movlb	1	; select bank1
  8396  1F5A  008C               	movwf	12	;volatile
  8397                           
  8398                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0x70;
  8399  1F5B  3070               	movlw	112
  8400  1F5C  008D               	movwf	13	;volatile
  8401                           
  8402                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0x3F;
  8403  1F5D  303F               	movlw	63
  8404  1F5E  008E               	movwf	14	;volatile
  8405                           
  8406                           ;mcc_generated_files/pin_manager.c: 74:     ANSELC = 0x0F;
  8407  1F5F  300F               	movlw	15
  8408  1F60  0023               	movlb	3	; select bank3
  8409  1F61  008E               	movwf	14	;volatile
  8410                           
  8411                           ;mcc_generated_files/pin_manager.c: 75:     ANSELB = 0x00;
  8412  1F62  018D               	clrf	13	;volatile
  8413                           
  8414                           ;mcc_generated_files/pin_manager.c: 76:     ANSELA = 0x17;
  8415  1F63  3017               	movlw	23
  8416  1F64  008C               	movwf	12	;volatile
  8417                           
  8418                           ;mcc_generated_files/pin_manager.c: 81:     WPUB = 0x00;
  8419  1F65  0024               	movlb	4	; select bank4
  8420  1F66  018D               	clrf	13	;volatile
  8421                           
  8422                           ;mcc_generated_files/pin_manager.c: 82:     WPUA = 0x00;
  8423  1F67  018C               	clrf	12	;volatile
  8424                           
  8425                           ;mcc_generated_files/pin_manager.c: 83:     OPTION_REGbits.nWPUEN = 1;
  8426  1F68  0021               	movlb	1	; select bank1
  8427  1F69  1795               	bsf	21,7	;volatile
  8428                           
  8429                           ;mcc_generated_files/pin_manager.c: 89:     APFCON = 0x00;
  8430  1F6A  0022               	movlb	2	; select bank2
  8431  1F6B  019D               	clrf	29	;volatile
  8432  1F6C  0008               	return
  8433  1F6D                     __end_of_PIN_MANAGER_Initialize:
  8434                           
  8435                           	psect	text16
  8436  1DBA                     __ptext16:	
  8437 ;; *************** function _OSCILLATOR_Initialize *****************
  8438 ;; Defined at:
  8439 ;;		line 62 in file "mcc_generated_files/mcc.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;		None
  8442 ;; Auto vars:     Size  Location     Type
  8443 ;;		None
  8444 ;; Return value:  Size  Location     Type
  8445 ;;                  1    wreg      void 
  8446 ;; Registers used:
  8447 ;;		wreg, status,2
  8448 ;; Tracked objects:
  8449 ;;		On entry : B1F/2
  8450 ;;		On exit  : B1F/2
  8451 ;;		Unchanged: B00/0
  8452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8453 ;;      Params:         0       0       0       0       0       0       0       0
  8454 ;;      Locals:         0       0       0       0       0       0       0       0
  8455 ;;      Temps:          0       0       0       0       0       0       0       0
  8456 ;;      Totals:         0       0       0       0       0       0       0       0
  8457 ;;Total ram usage:        0 bytes
  8458 ;; Hardware stack levels used: 1
  8459 ;; Hardware stack levels required when called: 4
  8460 ;; This function calls:
  8461 ;;		Nothing
  8462 ;; This function is called by:
  8463 ;;		_SYSTEM_Initialize
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467  1DBA                     _OSCILLATOR_Initialize:	
  8468                           ;psect for function _OSCILLATOR_Initialize
  8469                           
  8470                           
  8471                           ;mcc_generated_files/mcc.c: 65:     OSCCON = 0x70;
  8472                           
  8473                           ;incstack = 0
  8474                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  8475  1DBA  3070               	movlw	112
  8476  1DBB  0021               	movlb	1	; select bank1
  8477  1DBC  0099               	movwf	25	;volatile
  8478                           
  8479                           ;mcc_generated_files/mcc.c: 67:     BORCON = 0x00;
  8480  1DBD  0022               	movlb	2	; select bank2
  8481  1DBE  0196               	clrf	22	;volatile
  8482  1DBF  0008               	return
  8483  1DC0                     __end_of_OSCILLATOR_Initialize:
  8484                           
  8485                           	psect	text17
  8486  1E19                     __ptext17:	
  8487 ;; *************** function _I2C_Initialize *****************
  8488 ;; Defined at:
  8489 ;;		line 167 in file "mcc_generated_files/i2c_master.c"
  8490 ;; Parameters:    Size  Location     Type
  8491 ;;		None
  8492 ;; Auto vars:     Size  Location     Type
  8493 ;;		None
  8494 ;; Return value:  Size  Location     Type
  8495 ;;                  1    wreg      void 
  8496 ;; Registers used:
  8497 ;;		wreg, status,2
  8498 ;; Tracked objects:
  8499 ;;		On entry : B1F/0
  8500 ;;		On exit  : B1F/4
  8501 ;;		Unchanged: B00/0
  8502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8503 ;;      Params:         0       0       0       0       0       0       0       0
  8504 ;;      Locals:         0       0       0       0       0       0       0       0
  8505 ;;      Temps:          0       0       0       0       0       0       0       0
  8506 ;;      Totals:         0       0       0       0       0       0       0       0
  8507 ;;Total ram usage:        0 bytes
  8508 ;; Hardware stack levels used: 1
  8509 ;; Hardware stack levels required when called: 4
  8510 ;; This function calls:
  8511 ;;		Nothing
  8512 ;; This function is called by:
  8513 ;;		_SYSTEM_Initialize
  8514 ;; This function uses a non-reentrant model
  8515 ;;
  8516                           
  8517  1E19                     _I2C_Initialize:	
  8518                           ;psect for function _I2C_Initialize
  8519                           
  8520                           
  8521                           ;mcc_generated_files/i2c_master.c: 169:     SSP1STAT = 0x80;
  8522                           
  8523                           ;incstack = 0
  8524                           ; Regs used in _I2C_Initialize: [wreg+status,2]
  8525  1E19  3080               	movlw	128
  8526  1E1A  0024               	movlb	4	; select bank4
  8527  1E1B  0094               	movwf	20	;volatile
  8528                           
  8529                           ;mcc_generated_files/i2c_master.c: 170:     SSP1CON1 = 0x08;
  8530  1E1C  3008               	movlw	8
  8531  1E1D  0095               	movwf	21	;volatile
  8532                           
  8533                           ;mcc_generated_files/i2c_master.c: 171:     SSP1CON2 = 0x00;
  8534  1E1E  0196               	clrf	22	;volatile
  8535                           
  8536                           ;mcc_generated_files/i2c_master.c: 172:     SSP1ADD = 0x13;
  8537  1E1F  3013               	movlw	19
  8538  1E20  0092               	movwf	18	;volatile
  8539                           
  8540                           ;mcc_generated_files/i2c_master.c: 173:     SSP1CON1bits.SSPEN = 0;
  8541  1E21  1295               	bcf	21,5	;volatile
  8542  1E22  0008               	return
  8543  1E23                     __end_of_I2C_Initialize:
  8544                           
  8545                           	psect	text18
  8546  11F6                     __ptext18:	
  8547 ;; *************** function _EUSART_Initialize *****************
  8548 ;; Defined at:
  8549 ;;		line 88 in file "mcc_generated_files/eusart.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;		None
  8552 ;; Auto vars:     Size  Location     Type
  8553 ;;		None
  8554 ;; Return value:  Size  Location     Type
  8555 ;;                  1    wreg      void 
  8556 ;; Registers used:
  8557 ;;		wreg, status,2, status,0, pclath, cstack
  8558 ;; Tracked objects:
  8559 ;;		On entry : B1F/0
  8560 ;;		On exit  : 1F/1
  8561 ;;		Unchanged: 0/0
  8562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8563 ;;      Params:         0       0       0       0       0       0       0       0
  8564 ;;      Locals:         0       0       0       0       0       0       0       0
  8565 ;;      Temps:          0       1       0       0       0       0       0       0
  8566 ;;      Totals:         0       1       0       0       0       0       0       0
  8567 ;;Total ram usage:        1 bytes
  8568 ;; Hardware stack levels used: 1
  8569 ;; Hardware stack levels required when called: 5
  8570 ;; This function calls:
  8571 ;;		_EUSART_SetErrorHandler
  8572 ;;		_EUSART_SetFramingErrorHandler
  8573 ;;		_EUSART_SetOverrunErrorHandler
  8574 ;;		_EUSART_SetRxInterruptHandler
  8575 ;;		_EUSART_SetTxInterruptHandler
  8576 ;; This function is called by:
  8577 ;;		_SYSTEM_Initialize
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581  11F6                     _EUSART_Initialize:	
  8582                           ;psect for function _EUSART_Initialize
  8583                           
  8584                           
  8585                           ;mcc_generated_files/eusart.c: 91:     PIE1bits.RCIE = 0;
  8586                           
  8587                           ;incstack = 0
  8588                           ; Regs used in _EUSART_Initialize: [wreg+status,2+status,0+pclath+cstack]
  8589  11F6  0021               	movlb	1	; select bank1
  8590  11F7  1291               	bcf	17,5	;volatile
  8591                           
  8592                           ;mcc_generated_files/eusart.c: 92:     EUSART_SetRxInterruptHandler(mbus_rx_handler);
  8593  11F8  3088               	movlw	low _mbus_rx_handler
  8594  11F9  0020               	movlb	0	; select bank0
  8595  11FA  00A9               	movwf	EUSART_SetRxInterruptHandler@interruptHandler
  8596  11FB  3010               	movlw	high _mbus_rx_handler
  8597  11FC  00AA               	movwf	EUSART_SetRxInterruptHandler@interruptHandler+1
  8598  11FD  319D  25F4  3191   	fcall	_EUSART_SetRxInterruptHandler
  8599                           
  8600                           ;mcc_generated_files/eusart.c: 93:     PIE1bits.TXIE = 0;
  8601  1200  0021               	movlb	1	; select bank1
  8602  1201  1211               	bcf	17,4	;volatile
  8603                           
  8604                           ;mcc_generated_files/eusart.c: 94:     EUSART_SetTxInterruptHandler(mbus_tx_handler);
  8605  1202  30AF               	movlw	low _mbus_tx_handler
  8606  1203  0020               	movlb	0	; select bank0
  8607  1204  00A9               	movwf	EUSART_SetTxInterruptHandler@interruptHandler
  8608  1205  3010               	movlw	high _mbus_tx_handler
  8609  1206  00AA               	movwf	EUSART_SetTxInterruptHandler@interruptHandler+1
  8610  1207  319D  2599  3191   	fcall	_EUSART_SetTxInterruptHandler
  8611                           
  8612                           ;mcc_generated_files/eusart.c: 98:     BAUDCON = 0x08;
  8613  120A  3008               	movlw	8
  8614  120B  0023               	movlb	3	; select bank3
  8615  120C  009F               	movwf	31	;volatile
  8616                           
  8617                           ;mcc_generated_files/eusart.c: 101:     RCSTA = 0x90;
  8618  120D  3090               	movlw	144
  8619  120E  009D               	movwf	29	;volatile
  8620                           
  8621                           ;mcc_generated_files/eusart.c: 104:     TXSTA = 0x24;
  8622  120F  3024               	movlw	36
  8623  1210  009E               	movwf	30	;volatile
  8624                           
  8625                           ;mcc_generated_files/eusart.c: 107:     SPBRGL = 0xCF;
  8626  1211  30CF               	movlw	207
  8627  1212  009B               	movwf	27	;volatile
  8628                           
  8629                           ;mcc_generated_files/eusart.c: 110:     SPBRGH = 0x00;
  8630  1213  019C               	clrf	28	;volatile
  8631                           
  8632                           ;mcc_generated_files/eusart.c: 113:     EUSART_SetFramingErrorHandler(EUSART_DefaultFram
      +                          ingErrorHandler);
  8633  1214  3000               	movlw	0
  8634  1215  0020               	movlb	0	; select bank0
  8635  1216  00A9               	movwf	EUSART_SetFramingErrorHandler@interruptHandler
  8636  1217  3000               	movlw	0
  8637  1218  00AA               	movwf	EUSART_SetFramingErrorHandler@interruptHandler+1
  8638  1219  319D  25E4  3191   	fcall	_EUSART_SetFramingErrorHandler
  8639                           
  8640                           ;mcc_generated_files/eusart.c: 114:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOver
      +                          runErrorHandler);
  8641  121C  3000               	movlw	0
  8642  121D  0020               	movlb	0	; select bank0
  8643  121E  00A9               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler
  8644  121F  3000               	movlw	0
  8645  1220  00AA               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler+1
  8646  1221  319D  25EC  3191   	fcall	_EUSART_SetOverrunErrorHandler
  8647                           
  8648                           ;mcc_generated_files/eusart.c: 115:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandle
      +                          r);
  8649  1224  3000               	movlw	0
  8650  1225  0020               	movlb	0	; select bank0
  8651  1226  00A9               	movwf	EUSART_SetErrorHandler@interruptHandler
  8652  1227  3000               	movlw	0
  8653  1228  00AA               	movwf	EUSART_SetErrorHandler@interruptHandler+1
  8654  1229  319D  25DC         	fcall	_EUSART_SetErrorHandler
  8655                           
  8656                           ;mcc_generated_files/eusart.c: 117:     eusartRxLastError.status = 0;
  8657  122B  0020               	movlb	0	; select bank0
  8658  122C  01D8               	clrf	_eusartRxLastError	;volatile
  8659                           
  8660                           ;mcc_generated_files/eusart.c: 120:     eusartTxHead = 0;
  8661  122D  01DD               	clrf	_eusartTxHead	;volatile
  8662                           
  8663                           ;mcc_generated_files/eusart.c: 121:     eusartTxTail = 0;
  8664  122E  01DC               	clrf	_eusartTxTail	;volatile
  8665                           
  8666                           ;mcc_generated_files/eusart.c: 122:     eusartTxBufferRemaining = sizeof(eusartTxBuffer)
      +                          ;
  8667  122F  3040               	movlw	64
  8668  1230  00AB               	movwf	??_EUSART_Initialize
  8669  1231  082B               	movf	??_EUSART_Initialize,w
  8670  1232  0021               	movlb	1	; select bank1
  8671  1233  00EE               	movwf	_eusartTxBufferRemaining^(0+128)	;volatile
  8672                           
  8673                           ;mcc_generated_files/eusart.c: 124:     eusartRxHead = 0;
  8674  1234  0020               	movlb	0	; select bank0
  8675  1235  01DB               	clrf	_eusartRxHead	;volatile
  8676                           
  8677                           ;mcc_generated_files/eusart.c: 125:     eusartRxTail = 0;
  8678  1236  01DA               	clrf	_eusartRxTail	;volatile
  8679                           
  8680                           ;mcc_generated_files/eusart.c: 126:     eusartRxCount = 0;
  8681  1237  01D9               	clrf	_eusartRxCount	;volatile
  8682                           
  8683                           ;mcc_generated_files/eusart.c: 129:     PIE1bits.RCIE = 1;
  8684  1238  0021               	movlb	1	; select bank1
  8685  1239  1691               	bsf	17,5	;volatile
  8686  123A  0008               	return
  8687  123B                     __end_of_EUSART_Initialize:
  8688                           
  8689                           	psect	text19
  8690  1D99                     __ptext19:	
  8691 ;; *************** function _EUSART_SetTxInterruptHandler *****************
  8692 ;; Defined at:
  8693 ;;		line 276 in file "mcc_generated_files/eusart.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
  8696 ;;		 -> mbus_tx_handler(1), 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;		None
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  1    wreg      void 
  8701 ;; Registers used:
  8702 ;;		wreg
  8703 ;; Tracked objects:
  8704 ;;		On entry : B1F/0
  8705 ;;		On exit  : B1F/0
  8706 ;;		Unchanged: B00/0
  8707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8708 ;;      Params:         0       2       0       0       0       0       0       0
  8709 ;;      Locals:         0       0       0       0       0       0       0       0
  8710 ;;      Temps:          0       0       0       0       0       0       0       0
  8711 ;;      Totals:         0       2       0       0       0       0       0       0
  8712 ;;Total ram usage:        2 bytes
  8713 ;; Hardware stack levels used: 1
  8714 ;; Hardware stack levels required when called: 4
  8715 ;; This function calls:
  8716 ;;		Nothing
  8717 ;; This function is called by:
  8718 ;;		_EUSART_Initialize
  8719 ;; This function uses a non-reentrant model
  8720 ;;
  8721                           
  8722  1D99                     _EUSART_SetTxInterruptHandler:	
  8723                           ;psect for function _EUSART_SetTxInterruptHandler
  8724                           
  8725                           
  8726                           ;mcc_generated_files/eusart.c: 277:     EUSART_TxDefaultInterruptHandler = interruptHand
      +                          ler;
  8727                           
  8728                           ;incstack = 0
  8729                           ; Regs used in _EUSART_SetTxInterruptHandler: [wreg]
  8730  1D99  082A               	movf	EUSART_SetTxInterruptHandler@interruptHandler+1,w
  8731  1D9A  00E5               	movwf	_EUSART_TxDefaultInterruptHandler+1
  8732  1D9B  0829               	movf	EUSART_SetTxInterruptHandler@interruptHandler,w
  8733  1D9C  00E4               	movwf	_EUSART_TxDefaultInterruptHandler
  8734  1D9D  0008               	return
  8735  1D9E                     __end_of_EUSART_SetTxInterruptHandler:
  8736                           
  8737                           	psect	text20
  8738  1DF4                     __ptext20:	
  8739 ;; *************** function _EUSART_SetRxInterruptHandler *****************
  8740 ;; Defined at:
  8741 ;;		line 280 in file "mcc_generated_files/eusart.c"
  8742 ;; Parameters:    Size  Location     Type
  8743 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
  8744 ;;		 -> mbus_rx_handler(1), 
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;		None
  8747 ;; Return value:  Size  Location     Type
  8748 ;;                  1    wreg      void 
  8749 ;; Registers used:
  8750 ;;		wreg
  8751 ;; Tracked objects:
  8752 ;;		On entry : B1F/0
  8753 ;;		On exit  : B1F/3
  8754 ;;		Unchanged: B00/0
  8755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8756 ;;      Params:         0       2       0       0       0       0       0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0
  8759 ;;      Totals:         0       2       0       0       0       0       0       0
  8760 ;;Total ram usage:        2 bytes
  8761 ;; Hardware stack levels used: 1
  8762 ;; Hardware stack levels required when called: 4
  8763 ;; This function calls:
  8764 ;;		Nothing
  8765 ;; This function is called by:
  8766 ;;		_EUSART_Initialize
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770  1DF4                     _EUSART_SetRxInterruptHandler:	
  8771                           ;psect for function _EUSART_SetRxInterruptHandler
  8772                           
  8773                           
  8774                           ;mcc_generated_files/eusart.c: 281:     EUSART_RxDefaultInterruptHandler = interruptHand
      +                          ler;
  8775                           
  8776                           ;incstack = 0
  8777                           ; Regs used in _EUSART_SetRxInterruptHandler: [wreg]
  8778  1DF4  082A               	movf	EUSART_SetRxInterruptHandler@interruptHandler+1,w
  8779  1DF5  0023               	movlb	3	; select bank3
  8780  1DF6  00EF               	movwf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384)
  8781  1DF7  0020               	movlb	0	; select bank0
  8782  1DF8  0829               	movf	EUSART_SetRxInterruptHandler@interruptHandler,w
  8783  1DF9  0023               	movlb	3	; select bank3
  8784  1DFA  00EE               	movwf	_EUSART_RxDefaultInterruptHandler^(0+384)
  8785  1DFB  0008               	return
  8786  1DFC                     __end_of_EUSART_SetRxInterruptHandler:
  8787                           
  8788                           	psect	text21
  8789  1DEC                     __ptext21:	
  8790 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
  8791 ;; Defined at:
  8792 ;;		line 268 in file "mcc_generated_files/eusart.c"
  8793 ;; Parameters:    Size  Location     Type
  8794 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
  8795 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
  8796 ;; Auto vars:     Size  Location     Type
  8797 ;;		None
  8798 ;; Return value:  Size  Location     Type
  8799 ;;                  1    wreg      void 
  8800 ;; Registers used:
  8801 ;;		wreg
  8802 ;; Tracked objects:
  8803 ;;		On entry : 1F/0
  8804 ;;		On exit  : 1F/4
  8805 ;;		Unchanged: 0/0
  8806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8807 ;;      Params:         0       2       0       0       0       0       0       0
  8808 ;;      Locals:         0       0       0       0       0       0       0       0
  8809 ;;      Temps:          0       0       0       0       0       0       0       0
  8810 ;;      Totals:         0       2       0       0       0       0       0       0
  8811 ;;Total ram usage:        2 bytes
  8812 ;; Hardware stack levels used: 1
  8813 ;; Hardware stack levels required when called: 4
  8814 ;; This function calls:
  8815 ;;		Nothing
  8816 ;; This function is called by:
  8817 ;;		_EUSART_Initialize
  8818 ;; This function uses a non-reentrant model
  8819 ;;
  8820                           
  8821  1DEC                     _EUSART_SetOverrunErrorHandler:	
  8822                           ;psect for function _EUSART_SetOverrunErrorHandler
  8823                           
  8824                           
  8825                           ;mcc_generated_files/eusart.c: 269:     EUSART_OverrunErrorHandler = interruptHandler;
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in _EUSART_SetOverrunErrorHandler: [wreg]
  8829  1DEC  082A               	movf	EUSART_SetOverrunErrorHandler@interruptHandler+1,w
  8830  1DED  0024               	movlb	4	; select bank4
  8831  1DEE  00EE               	movwf	(_EUSART_OverrunErrorHandler+1)^(0+512)
  8832  1DEF  0020               	movlb	0	; select bank0
  8833  1DF0  0829               	movf	EUSART_SetOverrunErrorHandler@interruptHandler,w
  8834  1DF1  0024               	movlb	4	; select bank4
  8835  1DF2  00ED               	movwf	_EUSART_OverrunErrorHandler^(0+512)
  8836  1DF3  0008               	return
  8837  1DF4                     __end_of_EUSART_SetOverrunErrorHandler:
  8838                           
  8839                           	psect	text22
  8840  1DE4                     __ptext22:	
  8841 ;; *************** function _EUSART_SetFramingErrorHandler *****************
  8842 ;; Defined at:
  8843 ;;		line 264 in file "mcc_generated_files/eusart.c"
  8844 ;; Parameters:    Size  Location     Type
  8845 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
  8846 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;		None
  8849 ;; Return value:  Size  Location     Type
  8850 ;;                  1    wreg      void 
  8851 ;; Registers used:
  8852 ;;		wreg
  8853 ;; Tracked objects:
  8854 ;;		On entry : 1F/0
  8855 ;;		On exit  : 1F/3
  8856 ;;		Unchanged: 0/0
  8857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8858 ;;      Params:         0       2       0       0       0       0       0       0
  8859 ;;      Locals:         0       0       0       0       0       0       0       0
  8860 ;;      Temps:          0       0       0       0       0       0       0       0
  8861 ;;      Totals:         0       2       0       0       0       0       0       0
  8862 ;;Total ram usage:        2 bytes
  8863 ;; Hardware stack levels used: 1
  8864 ;; Hardware stack levels required when called: 4
  8865 ;; This function calls:
  8866 ;;		Nothing
  8867 ;; This function is called by:
  8868 ;;		_EUSART_Initialize
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872  1DE4                     _EUSART_SetFramingErrorHandler:	
  8873                           ;psect for function _EUSART_SetFramingErrorHandler
  8874                           
  8875                           
  8876                           ;mcc_generated_files/eusart.c: 265:     EUSART_FramingErrorHandler = interruptHandler;
  8877                           
  8878                           ;incstack = 0
  8879                           ; Regs used in _EUSART_SetFramingErrorHandler: [wreg]
  8880  1DE4  082A               	movf	EUSART_SetFramingErrorHandler@interruptHandler+1,w
  8881  1DE5  0023               	movlb	3	; select bank3
  8882  1DE6  00ED               	movwf	(_EUSART_FramingErrorHandler+1)^(0+384)
  8883  1DE7  0020               	movlb	0	; select bank0
  8884  1DE8  0829               	movf	EUSART_SetFramingErrorHandler@interruptHandler,w
  8885  1DE9  0023               	movlb	3	; select bank3
  8886  1DEA  00EC               	movwf	_EUSART_FramingErrorHandler^(0+384)
  8887  1DEB  0008               	return
  8888  1DEC                     __end_of_EUSART_SetFramingErrorHandler:
  8889                           
  8890                           	psect	text23
  8891  1DDC                     __ptext23:	
  8892 ;; *************** function _EUSART_SetErrorHandler *****************
  8893 ;; Defined at:
  8894 ;;		line 272 in file "mcc_generated_files/eusart.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;  interruptHan    2    9[BANK0 ] PTR FTN()void 
  8897 ;;		 -> EUSART_DefaultErrorHandler(1), 
  8898 ;; Auto vars:     Size  Location     Type
  8899 ;;		None
  8900 ;; Return value:  Size  Location     Type
  8901 ;;                  1    wreg      void 
  8902 ;; Registers used:
  8903 ;;		wreg
  8904 ;; Tracked objects:
  8905 ;;		On entry : 1F/0
  8906 ;;		On exit  : 1F/5
  8907 ;;		Unchanged: 0/0
  8908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8909 ;;      Params:         0       2       0       0       0       0       0       0
  8910 ;;      Locals:         0       0       0       0       0       0       0       0
  8911 ;;      Temps:          0       0       0       0       0       0       0       0
  8912 ;;      Totals:         0       2       0       0       0       0       0       0
  8913 ;;Total ram usage:        2 bytes
  8914 ;; Hardware stack levels used: 1
  8915 ;; Hardware stack levels required when called: 4
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;;		_EUSART_Initialize
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923  1DDC                     _EUSART_SetErrorHandler:	
  8924                           ;psect for function _EUSART_SetErrorHandler
  8925                           
  8926                           
  8927                           ;mcc_generated_files/eusart.c: 273:     EUSART_ErrorHandler = interruptHandler;
  8928                           
  8929                           ;incstack = 0
  8930                           ; Regs used in _EUSART_SetErrorHandler: [wreg]
  8931  1DDC  082A               	movf	EUSART_SetErrorHandler@interruptHandler+1,w
  8932  1DDD  0025               	movlb	5	; select bank5
  8933  1DDE  00E1               	movwf	(_EUSART_ErrorHandler+1)^(0+640)
  8934  1DDF  0020               	movlb	0	; select bank0
  8935  1DE0  0829               	movf	EUSART_SetErrorHandler@interruptHandler,w
  8936  1DE1  0025               	movlb	5	; select bank5
  8937  1DE2  00E0               	movwf	_EUSART_ErrorHandler^(0+640)
  8938  1DE3  0008               	return
  8939  1DE4                     __end_of_EUSART_SetErrorHandler:
  8940                           
  8941                           	psect	text24
  8942  1306                     __ptext24:	
  8943 ;; *************** function _MCP3422_ReadVoltage *****************
  8944 ;; Defined at:
  8945 ;;		line 113 in file "main.c"
  8946 ;; Parameters:    Size  Location     Type
  8947 ;;  channel         1    wreg     unsigned char 
  8948 ;; Auto vars:     Size  Location     Type
  8949 ;;  channel         1   37[BANK1 ] unsigned char 
  8950 ;;  adc_value       4   41[BANK1 ] unsigned long 
  8951 ;;  data            3   38[BANK1 ] unsigned char [3]
  8952 ;; Return value:  Size  Location     Type
  8953 ;;                  4   29[BANK1 ] float 
  8954 ;; Registers used:
  8955 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8956 ;; Tracked objects:
  8957 ;;		On entry : 0/2
  8958 ;;		On exit  : 1F/1
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8961 ;;      Params:         0       0       4       0       0       0       0       0
  8962 ;;      Locals:         0       0       8       0       0       0       0       0
  8963 ;;      Temps:          0       0       4       0       0       0       0       0
  8964 ;;      Totals:         0       0      16       0       0       0       0       0
  8965 ;;Total ram usage:       16 bytes
  8966 ;; Hardware stack levels used: 1
  8967 ;; Hardware stack levels required when called: 14
  8968 ;; This function calls:
  8969 ;;		_MCP3422_Read
  8970 ;;		_MCP3422_Write
  8971 ;;		___flmul
  8972 ;;		___xxtofl
  8973 ;; This function is called by:
  8974 ;;		_main
  8975 ;; This function uses a non-reentrant model
  8976 ;;
  8977                           
  8978  1306                     _MCP3422_ReadVoltage:	
  8979                           ;psect for function _MCP3422_ReadVoltage
  8980                           
  8981                           
  8982                           ;incstack = 0
  8983                           ; Regs used in _MCP3422_ReadVoltage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8984                           ;MCP3422_ReadVoltage@channel stored from wreg
  8985  1306  0021               	movlb	1	; select bank1
  8986  1307  00C5               	movwf	MCP3422_ReadVoltage@channel^(0+128)
  8987                           
  8988                           ;main.c: 116:     uint8_t data[3] = {0U};
  8989  1308  3000               	movlw	0
  8990  1309  00C6               	movwf	MCP3422_ReadVoltage@data^(0+128)
  8991  130A  3000               	movlw	0
  8992  130B  00C7               	movwf	(MCP3422_ReadVoltage@data+1)^(0+128)
  8993  130C  3000               	movlw	0
  8994  130D  00C8               	movwf	(MCP3422_ReadVoltage@data+2)^(0+128)
  8995                           
  8996                           ;main.c: 118:     MCP3422_Write(((0x10 | 0x00 | 0x0C) | channel));
  8997  130E  0845               	movf	MCP3422_ReadVoltage@channel^(0+128),w
  8998  130F  381C               	iorlw	28
  8999  1310  319E  266B  3193   	fcall	_MCP3422_Write
  9000                           
  9001                           ;main.c: 119:     _delay((unsigned long)((420)*(8000000/4000.0)));
  9002  1313  3005               	movlw	5
  9003  1314  0021               	movlb	1	; select bank1
  9004  1315  00C2               	movwf	(??_MCP3422_ReadVoltage^(0+128)+1)
  9005  1316  3043               	movlw	67
  9006  1317  00C1               	movwf	??_MCP3422_ReadVoltage^(0+128)
  9007  1318  30E3               	movlw	227
  9008  1319                     u6107:
  9009  1319  0B89               	decfsz	9,f
  9010  131A  2B19               	goto	u6107
  9011  131B  0BC1               	decfsz	??_MCP3422_ReadVoltage^(0+128),f
  9012  131C  2B19               	goto	u6107
  9013  131D  0BC2               	decfsz	(??_MCP3422_ReadVoltage^(0+128)+1),f
  9014  131E  2B19               	goto	u6107
  9015  131F  3200               	nop2
  9016                           
  9017                           ;main.c: 121:     MCP3422_Read(data, 3U);
  9018  1320  3003               	movlw	3
  9019  1321  0021               	movlb	1	; select bank1
  9020  1322  00C1               	movwf	??_MCP3422_ReadVoltage^(0+128)
  9021  1323  0841               	movf	??_MCP3422_ReadVoltage^(0+128),w
  9022  1324  0020               	movlb	0	; select bank0
  9023  1325  00C0               	movwf	MCP3422_Read@count
  9024  1326  30C6               	movlw	(low (MCP3422_ReadVoltage@data| 0))& (0+255)
  9025  1327  319E  2679  3193   	fcall	_MCP3422_Read
  9026                           
  9027                           ;main.c: 122:     adc_value = data[0];
  9028  132A  0021               	movlb	1	; select bank1
  9029  132B  0846               	movf	MCP3422_ReadVoltage@data^(0+128),w
  9030  132C  00C1               	movwf	??_MCP3422_ReadVoltage^(0+128)
  9031  132D  01C2               	clrf	(??_MCP3422_ReadVoltage^(0+128)+1)
  9032  132E  01C3               	clrf	(??_MCP3422_ReadVoltage^(0+128)+2)
  9033  132F  01C4               	clrf	(??_MCP3422_ReadVoltage^(0+128)+3)
  9034  1330  0844               	movf	(??_MCP3422_ReadVoltage+3)^(0+128),w
  9035  1331  00CC               	movwf	(MCP3422_ReadVoltage@adc_value+3)^(0+128)
  9036  1332  0843               	movf	(??_MCP3422_ReadVoltage+2)^(0+128),w
  9037  1333  00CB               	movwf	(MCP3422_ReadVoltage@adc_value+2)^(0+128)
  9038  1334  0842               	movf	(??_MCP3422_ReadVoltage+1)^(0+128),w
  9039  1335  00CA               	movwf	(MCP3422_ReadVoltage@adc_value+1)^(0+128)
  9040  1336  0841               	movf	??_MCP3422_ReadVoltage^(0+128),w
  9041  1337  00C9               	movwf	MCP3422_ReadVoltage@adc_value^(0+128)
  9042                           
  9043                           ;main.c: 123:     adc_value <<= 8U;
  9044  1338  3008               	movlw	8
  9045  1339                     u5725:
  9046  1339  35C9               	lslf	MCP3422_ReadVoltage@adc_value^(0+128),f
  9047  133A  0DCA               	rlf	(MCP3422_ReadVoltage@adc_value+1)^(0+128),f
  9048  133B  0DCB               	rlf	(MCP3422_ReadVoltage@adc_value+2)^(0+128),f
  9049  133C  0DCC               	rlf	(MCP3422_ReadVoltage@adc_value+3)^(0+128),f
  9050  133D  0B89               	decfsz	9,f
  9051  133E  2B39               	goto	u5725
  9052                           
  9053                           ;main.c: 124:     adc_value |= data[1];
  9054  133F  0847               	movf	(MCP3422_ReadVoltage@data^(0+128)+1),w
  9055  1340  04C9               	iorwf	MCP3422_ReadVoltage@adc_value^(0+128),f
  9056                           
  9057                           ;main.c: 125:     adc_value <<= 8U;
  9058  1341  3008               	movlw	8
  9059  1342                     u5735:
  9060  1342  35C9               	lslf	MCP3422_ReadVoltage@adc_value^(0+128),f
  9061  1343  0DCA               	rlf	(MCP3422_ReadVoltage@adc_value+1)^(0+128),f
  9062  1344  0DCB               	rlf	(MCP3422_ReadVoltage@adc_value+2)^(0+128),f
  9063  1345  0DCC               	rlf	(MCP3422_ReadVoltage@adc_value+3)^(0+128),f
  9064  1346  0B89               	decfsz	9,f
  9065  1347  2B42               	goto	u5735
  9066                           
  9067                           ;main.c: 126:     adc_value |= data[2];
  9068  1348  0848               	movf	(MCP3422_ReadVoltage@data^(0+128)+2),w
  9069  1349  04C9               	iorwf	MCP3422_ReadVoltage@adc_value^(0+128),f
  9070                           
  9071                           ;main.c: 131:     return ((float)adc_value * 0.015625f);
  9072  134A  303C               	movlw	60
  9073  134B  00AB               	movwf	(___flmul@b+3)^(0+128)
  9074  134C  3080               	movlw	128
  9075  134D  00AA               	movwf	(___flmul@b+2)^(0+128)
  9076  134E  3000               	movlw	0
  9077  134F  00A9               	movwf	(___flmul@b+1)^(0+128)
  9078  1350  3000               	movlw	0
  9079  1351  00A8               	movwf	___flmul@b^(0+128)
  9080  1352  084C               	movf	(MCP3422_ReadVoltage@adc_value+3)^(0+128),w
  9081  1353  0020               	movlb	0	; select bank0
  9082  1354  00AC               	movwf	___xxtofl@val+3
  9083  1355  0021               	movlb	1	; select bank1
  9084  1356  084B               	movf	(MCP3422_ReadVoltage@adc_value+2)^(0+128),w
  9085  1357  0020               	movlb	0	; select bank0
  9086  1358  00AB               	movwf	___xxtofl@val+2
  9087  1359  0021               	movlb	1	; select bank1
  9088  135A  084A               	movf	(MCP3422_ReadVoltage@adc_value+1)^(0+128),w
  9089  135B  0020               	movlb	0	; select bank0
  9090  135C  00AA               	movwf	___xxtofl@val+1
  9091  135D  0021               	movlb	1	; select bank1
  9092  135E  0849               	movf	MCP3422_ReadVoltage@adc_value^(0+128),w
  9093  135F  0020               	movlb	0	; select bank0
  9094  1360  00A9               	movwf	___xxtofl@val
  9095  1361  3000               	movlw	0
  9096  1362  3188  2052  3193   	fcall	___xxtofl
  9097  1365  082C               	movf	?___xxtofl+3,w
  9098  1366  0021               	movlb	1	; select bank1
  9099  1367  00AF               	movwf	(___flmul@a+3)^(0+128)
  9100  1368  0020               	movlb	0	; select bank0
  9101  1369  082B               	movf	?___xxtofl+2,w
  9102  136A  0021               	movlb	1	; select bank1
  9103  136B  00AE               	movwf	(___flmul@a+2)^(0+128)
  9104  136C  0020               	movlb	0	; select bank0
  9105  136D  082A               	movf	?___xxtofl+1,w
  9106  136E  0021               	movlb	1	; select bank1
  9107  136F  00AD               	movwf	(___flmul@a+1)^(0+128)
  9108  1370  0020               	movlb	0	; select bank0
  9109  1371  0829               	movf	?___xxtofl,w
  9110  1372  0021               	movlb	1	; select bank1
  9111  1373  00AC               	movwf	___flmul@a^(0+128)
  9112  1374  318A  226F         	fcall	___flmul
  9113  1376  082B               	movf	(?___flmul+3)^(0+128),w
  9114  1377  00C0               	movwf	(?_MCP3422_ReadVoltage+3)^(0+128)
  9115  1378  082A               	movf	(?___flmul+2)^(0+128),w
  9116  1379  00BF               	movwf	(?_MCP3422_ReadVoltage+2)^(0+128)
  9117  137A  0829               	movf	(?___flmul+1)^(0+128),w
  9118  137B  00BE               	movwf	(?_MCP3422_ReadVoltage+1)^(0+128)
  9119  137C  0828               	movf	?___flmul^(0+128),w
  9120  137D  00BD               	movwf	?_MCP3422_ReadVoltage^(0+128)
  9121  137E  0008               	return
  9122  137F                     __end_of_MCP3422_ReadVoltage:
  9123                           
  9124                           	psect	text25
  9125  0852                     __ptext25:	
  9126 ;; *************** function ___xxtofl *****************
  9127 ;; Defined at:
  9128 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\xxtofl.c"
  9129 ;; Parameters:    Size  Location     Type
  9130 ;;  sign            1    wreg     unsigned char 
  9131 ;;  val             4    9[BANK0 ] long 
  9132 ;; Auto vars:     Size  Location     Type
  9133 ;;  sign            1   17[BANK0 ] unsigned char 
  9134 ;;  arg             4   19[BANK0 ] unsigned long 
  9135 ;;  exp             1   18[BANK0 ] unsigned char 
  9136 ;; Return value:  Size  Location     Type
  9137 ;;                  4    9[BANK0 ] unsigned char 
  9138 ;; Registers used:
  9139 ;;		wreg, status,2, status,0
  9140 ;; Tracked objects:
  9141 ;;		On entry : 1F/0
  9142 ;;		On exit  : 1F/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9145 ;;      Params:         0       4       0       0       0       0       0       0
  9146 ;;      Locals:         0       6       0       0       0       0       0       0
  9147 ;;      Temps:          0       4       0       0       0       0       0       0
  9148 ;;      Totals:         0      14       0       0       0       0       0       0
  9149 ;;Total ram usage:       14 bytes
  9150 ;; Hardware stack levels used: 1
  9151 ;; Hardware stack levels required when called: 4
  9152 ;; This function calls:
  9153 ;;		Nothing
  9154 ;; This function is called by:
  9155 ;;		_map
  9156 ;;		_MCP3422_ReadVoltage
  9157 ;;		_main
  9158 ;;		_logf
  9159 ;; This function uses a non-reentrant model
  9160 ;;
  9161                           
  9162  0852                     ___xxtofl:	
  9163                           ;psect for function ___xxtofl
  9164                           
  9165                           
  9166                           ;incstack = 0
  9167                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  9168                           ;___xxtofl@sign stored from wreg
  9169  0852  00B1               	movwf	___xxtofl@sign
  9170  0853  0831               	movf	___xxtofl@sign,w
  9171  0854  1D03               	btfss	3,2
  9172  0855  1FAC               	btfss	___xxtofl@val+3,7
  9173  0856  2867               	goto	l5741
  9174  0857  0929               	comf	___xxtofl@val,w
  9175  0858  00B3               	movwf	___xxtofl@arg
  9176  0859  092A               	comf	___xxtofl@val+1,w
  9177  085A  00B4               	movwf	___xxtofl@arg+1
  9178  085B  092B               	comf	___xxtofl@val+2,w
  9179  085C  00B5               	movwf	___xxtofl@arg+2
  9180  085D  092C               	comf	___xxtofl@val+3,w
  9181  085E  00B6               	movwf	___xxtofl@arg+3
  9182  085F  0AB3               	incf	___xxtofl@arg,f
  9183  0860  1903               	skipnz
  9184  0861  0AB4               	incf	___xxtofl@arg+1,f
  9185  0862  1903               	skipnz
  9186  0863  0AB5               	incf	___xxtofl@arg+2,f
  9187  0864  1903               	skipnz
  9188  0865  0AB6               	incf	___xxtofl@arg+3,f
  9189  0866  286F               	goto	l1494
  9190  0867                     l5741:
  9191  0867  082C               	movf	___xxtofl@val+3,w
  9192  0868  00B6               	movwf	___xxtofl@arg+3
  9193  0869  082B               	movf	___xxtofl@val+2,w
  9194  086A  00B5               	movwf	___xxtofl@arg+2
  9195  086B  082A               	movf	___xxtofl@val+1,w
  9196  086C  00B4               	movwf	___xxtofl@arg+1
  9197  086D  0829               	movf	___xxtofl@val,w
  9198  086E  00B3               	movwf	___xxtofl@arg
  9199  086F                     l1494:
  9200  086F  082C               	movf	___xxtofl@val+3,w
  9201  0870  042B               	iorwf	___xxtofl@val+2,w
  9202  0871  042A               	iorwf	___xxtofl@val+1,w
  9203  0872  0429               	iorwf	___xxtofl@val,w
  9204  0873  1D03               	skipz
  9205  0874  287E               	goto	l5747
  9206  0875  3000               	movlw	0
  9207  0876  00AC               	movwf	?___xxtofl+3
  9208  0877  3000               	movlw	0
  9209  0878  00AB               	movwf	?___xxtofl+2
  9210  0879  3000               	movlw	0
  9211  087A  00AA               	movwf	?___xxtofl+1
  9212  087B  3000               	movlw	0
  9213  087C  00A9               	movwf	?___xxtofl
  9214  087D  0008               	return
  9215  087E                     l5747:
  9216  087E  3096               	movlw	150
  9217  087F  00AD               	movwf	??___xxtofl
  9218  0880  082D               	movf	??___xxtofl,w
  9219  0881  00B2               	movwf	___xxtofl@exp
  9220  0882                     l5751:
  9221  0882  30FE               	movlw	254
  9222  0883  0536               	andwf	___xxtofl@arg+3,w
  9223  0884  1903               	btfsc	3,2
  9224  0885  28A5               	goto	l1500
  9225  0886  3001               	movlw	1
  9226  0887  00AD               	movwf	??___xxtofl
  9227  0888  082D               	movf	??___xxtofl,w
  9228  0889  07B2               	addwf	___xxtofl@exp,f
  9229  088A  3001               	movlw	1
  9230  088B                     u5325:
  9231  088B  36B6               	lsrf	___xxtofl@arg+3,f
  9232  088C  0CB5               	rrf	___xxtofl@arg+2,f
  9233  088D  0CB4               	rrf	___xxtofl@arg+1,f
  9234  088E  0CB3               	rrf	___xxtofl@arg,f
  9235  088F  0B89               	decfsz	9,f
  9236  0890  288B               	goto	u5325
  9237  0891  2882               	goto	l5751
  9238  0892                     l5753:
  9239  0892  3001               	movlw	1
  9240  0893  00AD               	movwf	??___xxtofl
  9241  0894  082D               	movf	??___xxtofl,w
  9242  0895  07B2               	addwf	___xxtofl@exp,f
  9243  0896  3001               	movlw	1
  9244  0897  07B3               	addwf	___xxtofl@arg,f
  9245  0898  3000               	movlw	0
  9246  0899  3DB4               	addwfc	___xxtofl@arg+1,f
  9247  089A  3000               	movlw	0
  9248  089B  3DB5               	addwfc	___xxtofl@arg+2,f
  9249  089C  3000               	movlw	0
  9250  089D  3DB6               	addwfc	___xxtofl@arg+3,f
  9251  089E  3001               	movlw	1
  9252  089F                     u5345:
  9253  089F  36B6               	lsrf	___xxtofl@arg+3,f
  9254  08A0  0CB5               	rrf	___xxtofl@arg+2,f
  9255  08A1  0CB4               	rrf	___xxtofl@arg+1,f
  9256  08A2  0CB3               	rrf	___xxtofl@arg,f
  9257  08A3  0B89               	decfsz	9,f
  9258  08A4  289F               	goto	u5345
  9259  08A5                     l1500:
  9260  08A5  30FF               	movlw	255
  9261  08A6  0536               	andwf	___xxtofl@arg+3,w
  9262  08A7  1903               	btfsc	3,2
  9263  08A8  28B7               	goto	l5761
  9264  08A9  2892               	goto	l5753
  9265  08AA                     l5763:
  9266  08AA  3002               	movlw	2
  9267  08AB  0232               	subwf	___xxtofl@exp,w
  9268  08AC  1C03               	btfss	3,0
  9269  08AD  28B9               	goto	l1507
  9270  08AE  3001               	movlw	1
  9271  08AF  02B2               	subwf	___xxtofl@exp,f
  9272  08B0  3001               	movlw	1
  9273  08B1                     u5365:
  9274  08B1  35B3               	lslf	___xxtofl@arg,f
  9275  08B2  0DB4               	rlf	___xxtofl@arg+1,f
  9276  08B3  0DB5               	rlf	___xxtofl@arg+2,f
  9277  08B4  0DB6               	rlf	___xxtofl@arg+3,f
  9278  08B5  0B89               	decfsz	9,f
  9279  08B6  28B1               	goto	u5365
  9280  08B7                     l5761:
  9281  08B7  1FB5               	btfss	___xxtofl@arg+2,7
  9282  08B8  28AA               	goto	l5763
  9283  08B9                     l1507:
  9284  08B9  1832               	btfsc	___xxtofl@exp,0
  9285  08BA  28C3               	goto	l1508
  9286  08BB  30FF               	movlw	255
  9287  08BC  05B3               	andwf	___xxtofl@arg,f
  9288  08BD  30FF               	movlw	255
  9289  08BE  05B4               	andwf	___xxtofl@arg+1,f
  9290  08BF  307F               	movlw	127
  9291  08C0  05B5               	andwf	___xxtofl@arg+2,f
  9292  08C1  30FF               	movlw	255
  9293  08C2  05B6               	andwf	___xxtofl@arg+3,f
  9294  08C3                     l1508:
  9295  08C3  1003               	clrc
  9296  08C4  0CB2               	rrf	___xxtofl@exp,f
  9297  08C5  0832               	movf	___xxtofl@exp,w
  9298  08C6  00AD               	movwf	??___xxtofl
  9299  08C7  01AE               	clrf	??___xxtofl+1
  9300  08C8  01AF               	clrf	??___xxtofl+2
  9301  08C9  01B0               	clrf	??___xxtofl+3
  9302  08CA  3018               	movlw	24
  9303  08CB                     u5405:
  9304  08CB  35AD               	lslf	??___xxtofl,f
  9305  08CC  0DAE               	rlf	??___xxtofl+1,f
  9306  08CD  0DAF               	rlf	??___xxtofl+2,f
  9307  08CE  0DB0               	rlf	??___xxtofl+3,f
  9308  08CF  0B89               	decfsz	9,f
  9309  08D0  28CB               	goto	u5405
  9310  08D1  082D               	movf	??___xxtofl,w
  9311  08D2  04B3               	iorwf	___xxtofl@arg,f
  9312  08D3  082E               	movf	??___xxtofl+1,w
  9313  08D4  04B4               	iorwf	___xxtofl@arg+1,f
  9314  08D5  082F               	movf	??___xxtofl+2,w
  9315  08D6  04B5               	iorwf	___xxtofl@arg+2,f
  9316  08D7  0830               	movf	??___xxtofl+3,w
  9317  08D8  04B6               	iorwf	___xxtofl@arg+3,f
  9318  08D9  0831               	movf	___xxtofl@sign,w
  9319  08DA  1D03               	btfss	3,2
  9320  08DB  1FAC               	btfss	___xxtofl@val+3,7
  9321  08DC  28DE               	goto	l5775
  9322  08DD  17B6               	bsf	___xxtofl@arg+3,7
  9323  08DE                     l5775:
  9324  08DE  0836               	movf	___xxtofl@arg+3,w
  9325  08DF  00AC               	movwf	?___xxtofl+3
  9326  08E0  0835               	movf	___xxtofl@arg+2,w
  9327  08E1  00AB               	movwf	?___xxtofl+2
  9328  08E2  0834               	movf	___xxtofl@arg+1,w
  9329  08E3  00AA               	movwf	?___xxtofl+1
  9330  08E4  0833               	movf	___xxtofl@arg,w
  9331  08E5  00A9               	movwf	?___xxtofl
  9332  08E6  0008               	return
  9333  08E7                     __end_of___xxtofl:
  9334                           
  9335                           	psect	text26
  9336  0A6F                     __ptext26:	
  9337 ;; *************** function ___flmul *****************
  9338 ;; Defined at:
  9339 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\sprcmul.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  b               4    8[BANK1 ] unsigned char 
  9342 ;;  a               4   12[BANK1 ] unsigned char 
  9343 ;; Auto vars:     Size  Location     Type
  9344 ;;  prod            4   23[BANK1 ] struct .
  9345 ;;  grs             4   19[BANK1 ] unsigned long 
  9346 ;;  temp            2   27[BANK1 ] struct .
  9347 ;;  bexp            1   18[BANK1 ] unsigned char 
  9348 ;;  aexp            1   17[BANK1 ] unsigned char 
  9349 ;;  sign            1   16[BANK1 ] unsigned char 
  9350 ;; Return value:  Size  Location     Type
  9351 ;;                  4    8[BANK1 ] unsigned char 
  9352 ;; Registers used:
  9353 ;;		wreg, status,2, status,0, pclath, cstack
  9354 ;; Tracked objects:
  9355 ;;		On entry : 1F/1
  9356 ;;		On exit  : 1F/1
  9357 ;;		Unchanged: 0/0
  9358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9359 ;;      Params:         0       0       8       0       0       0       0       0
  9360 ;;      Locals:         0       0      13       0       0       0       0       0
  9361 ;;      Temps:          0       5       0       0       0       0       0       0
  9362 ;;      Totals:         0       5      21       0       0       0       0       0
  9363 ;;Total ram usage:       26 bytes
  9364 ;; Hardware stack levels used: 1
  9365 ;; Hardware stack levels required when called: 5
  9366 ;; This function calls:
  9367 ;;		__Umul8_16
  9368 ;; This function is called by:
  9369 ;;		_map
  9370 ;;		_MCP3422_ReadVoltage
  9371 ;;		_main
  9372 ;;		_logf
  9373 ;; This function uses a non-reentrant model
  9374 ;;
  9375                           
  9376  0A6F                     ___flmul:	
  9377                           ;psect for function ___flmul
  9378                           
  9379                           
  9380                           ;incstack = 0
  9381                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  9382  0A6F  082B               	movf	(___flmul@b^(0+128)+3),w
  9383  0A70  3980               	andlw	128
  9384  0A71  0020               	movlb	0	; select bank0
  9385  0A72  00CB               	movwf	??___flmul
  9386  0A73  084B               	movf	??___flmul,w
  9387  0A74  0021               	movlb	1	; select bank1
  9388  0A75  00B0               	movwf	___flmul@sign^(0+128)
  9389  0A76  352B               	lslf	(___flmul@b^(0+128)+3),w
  9390  0A77  0020               	movlb	0	; select bank0
  9391  0A78  00CB               	movwf	??___flmul
  9392  0A79  084B               	movf	??___flmul,w
  9393  0A7A  0021               	movlb	1	; select bank1
  9394  0A7B  00B2               	movwf	___flmul@bexp^(0+128)
  9395  0A7C  1BAA               	btfsc	(___flmul@b^(0+128)+2),7
  9396  0A7D  1432               	bsf	___flmul@bexp^(0+128),0
  9397  0A7E  0832               	movf	___flmul@bexp^(0+128),w
  9398  0A7F  1903               	btfsc	3,2
  9399  0A80  2A8E               	goto	l5611
  9400  0A81  0A32               	incf	___flmul@bexp^(0+128),w
  9401  0A82  1D03               	btfss	3,2
  9402  0A83  2A8C               	goto	l5609
  9403  0A84  3000               	movlw	0
  9404  0A85  00AB               	movwf	(___flmul@b+3)^(0+128)
  9405  0A86  3000               	movlw	0
  9406  0A87  00AA               	movwf	(___flmul@b+2)^(0+128)
  9407  0A88  3000               	movlw	0
  9408  0A89  00A9               	movwf	(___flmul@b+1)^(0+128)
  9409  0A8A  3000               	movlw	0
  9410  0A8B  00A8               	movwf	___flmul@b^(0+128)
  9411  0A8C                     l5609:
  9412  0A8C  17AA               	bsf	(___flmul@b^(0+128)+2),7
  9413  0A8D  2A96               	goto	l5613
  9414  0A8E                     l5611:
  9415  0A8E  3000               	movlw	0
  9416  0A8F  00AB               	movwf	(___flmul@b+3)^(0+128)
  9417  0A90  3000               	movlw	0
  9418  0A91  00AA               	movwf	(___flmul@b+2)^(0+128)
  9419  0A92  3000               	movlw	0
  9420  0A93  00A9               	movwf	(___flmul@b+1)^(0+128)
  9421  0A94  3000               	movlw	0
  9422  0A95  00A8               	movwf	___flmul@b^(0+128)
  9423  0A96                     l5613:
  9424  0A96  082F               	movf	(___flmul@a^(0+128)+3),w
  9425  0A97  3980               	andlw	128
  9426  0A98  0020               	movlb	0	; select bank0
  9427  0A99  00CB               	movwf	??___flmul
  9428  0A9A  084B               	movf	??___flmul,w
  9429  0A9B  0021               	movlb	1	; select bank1
  9430  0A9C  06B0               	xorwf	___flmul@sign^(0+128),f
  9431  0A9D  352F               	lslf	(___flmul@a^(0+128)+3),w
  9432  0A9E  0020               	movlb	0	; select bank0
  9433  0A9F  00CB               	movwf	??___flmul
  9434  0AA0  084B               	movf	??___flmul,w
  9435  0AA1  0021               	movlb	1	; select bank1
  9436  0AA2  00B1               	movwf	___flmul@aexp^(0+128)
  9437  0AA3  1BAE               	btfsc	(___flmul@a^(0+128)+2),7
  9438  0AA4  1431               	bsf	___flmul@aexp^(0+128),0
  9439  0AA5  0831               	movf	___flmul@aexp^(0+128),w
  9440  0AA6  1903               	btfsc	3,2
  9441  0AA7  2AB5               	goto	l5629
  9442  0AA8  0A31               	incf	___flmul@aexp^(0+128),w
  9443  0AA9  1D03               	btfss	3,2
  9444  0AAA  2AB3               	goto	l5627
  9445  0AAB  3000               	movlw	0
  9446  0AAC  00AF               	movwf	(___flmul@a+3)^(0+128)
  9447  0AAD  3000               	movlw	0
  9448  0AAE  00AE               	movwf	(___flmul@a+2)^(0+128)
  9449  0AAF  3000               	movlw	0
  9450  0AB0  00AD               	movwf	(___flmul@a+1)^(0+128)
  9451  0AB1  3000               	movlw	0
  9452  0AB2  00AC               	movwf	___flmul@a^(0+128)
  9453  0AB3                     l5627:
  9454  0AB3  17AE               	bsf	(___flmul@a^(0+128)+2),7
  9455  0AB4  2ABD               	goto	l5631
  9456  0AB5                     l5629:
  9457  0AB5  3000               	movlw	0
  9458  0AB6  00AF               	movwf	(___flmul@a+3)^(0+128)
  9459  0AB7  3000               	movlw	0
  9460  0AB8  00AE               	movwf	(___flmul@a+2)^(0+128)
  9461  0AB9  3000               	movlw	0
  9462  0ABA  00AD               	movwf	(___flmul@a+1)^(0+128)
  9463  0ABB  3000               	movlw	0
  9464  0ABC  00AC               	movwf	___flmul@a^(0+128)
  9465  0ABD                     l5631:
  9466  0ABD  0831               	movf	___flmul@aexp^(0+128),w
  9467  0ABE  1D03               	btfss	3,2
  9468  0ABF  0832               	movf	___flmul@bexp^(0+128),w
  9469  0AC0  1D03               	btfss	3,2
  9470  0AC1  2ACB               	goto	l5639
  9471  0AC2  3000               	movlw	0
  9472  0AC3  00AB               	movwf	(?___flmul+3)^(0+128)
  9473  0AC4  3000               	movlw	0
  9474  0AC5  00AA               	movwf	(?___flmul+2)^(0+128)
  9475  0AC6  3000               	movlw	0
  9476  0AC7  00A9               	movwf	(?___flmul+1)^(0+128)
  9477  0AC8  3000               	movlw	0
  9478  0AC9  00A8               	movwf	?___flmul^(0+128)
  9479  0ACA  0008               	return
  9480  0ACB                     l5639:
  9481  0ACB  0828               	movf	___flmul@b^(0+128),w
  9482  0ACC  0020               	movlb	0	; select bank0
  9483  0ACD  00CB               	movwf	??___flmul
  9484  0ACE  084B               	movf	??___flmul,w
  9485  0ACF  00A9               	movwf	__Umul8_16@multiplicand
  9486  0AD0  0021               	movlb	1	; select bank1
  9487  0AD1  082E               	movf	(___flmul@a^(0+128)+2),w
  9488  0AD2  3190  201F  318A   	fcall	__Umul8_16
  9489  0AD5  082A               	movf	?__Umul8_16+1,w
  9490  0AD6  0021               	movlb	1	; select bank1
  9491  0AD7  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9492  0AD8  0020               	movlb	0	; select bank0
  9493  0AD9  0829               	movf	?__Umul8_16,w
  9494  0ADA  0021               	movlb	1	; select bank1
  9495  0ADB  00BB               	movwf	___flmul@temp^(0+128)
  9496  0ADC  083B               	movf	___flmul@temp^(0+128),w
  9497  0ADD  0020               	movlb	0	; select bank0
  9498  0ADE  00CB               	movwf	??___flmul
  9499  0ADF  01CC               	clrf	??___flmul+1
  9500  0AE0  01CD               	clrf	??___flmul+2
  9501  0AE1  01CE               	clrf	??___flmul+3
  9502  0AE2  084E               	movf	??___flmul+3,w
  9503  0AE3  0021               	movlb	1	; select bank1
  9504  0AE4  00B6               	movwf	(___flmul@grs+3)^(0+128)
  9505  0AE5  0020               	movlb	0	; select bank0
  9506  0AE6  084D               	movf	??___flmul+2,w
  9507  0AE7  0021               	movlb	1	; select bank1
  9508  0AE8  00B5               	movwf	(___flmul@grs+2)^(0+128)
  9509  0AE9  0020               	movlb	0	; select bank0
  9510  0AEA  084C               	movf	??___flmul+1,w
  9511  0AEB  0021               	movlb	1	; select bank1
  9512  0AEC  00B4               	movwf	(___flmul@grs+1)^(0+128)
  9513  0AED  0020               	movlb	0	; select bank0
  9514  0AEE  084B               	movf	??___flmul,w
  9515  0AEF  0021               	movlb	1	; select bank1
  9516  0AF0  00B3               	movwf	___flmul@grs^(0+128)
  9517  0AF1  083C               	movf	(___flmul@temp^(0+128)+1),w
  9518  0AF2  0020               	movlb	0	; select bank0
  9519  0AF3  00CB               	movwf	??___flmul
  9520  0AF4  01CC               	clrf	??___flmul+1
  9521  0AF5  01CD               	clrf	??___flmul+2
  9522  0AF6  01CE               	clrf	??___flmul+3
  9523  0AF7  084E               	movf	??___flmul+3,w
  9524  0AF8  0021               	movlb	1	; select bank1
  9525  0AF9  00BA               	movwf	(___flmul@prod+3)^(0+128)
  9526  0AFA  0020               	movlb	0	; select bank0
  9527  0AFB  084D               	movf	??___flmul+2,w
  9528  0AFC  0021               	movlb	1	; select bank1
  9529  0AFD  00B9               	movwf	(___flmul@prod+2)^(0+128)
  9530  0AFE  0020               	movlb	0	; select bank0
  9531  0AFF  084C               	movf	??___flmul+1,w
  9532  0B00  0021               	movlb	1	; select bank1
  9533  0B01  00B8               	movwf	(___flmul@prod+1)^(0+128)
  9534  0B02  0020               	movlb	0	; select bank0
  9535  0B03  084B               	movf	??___flmul,w
  9536  0B04  0021               	movlb	1	; select bank1
  9537  0B05  00B7               	movwf	___flmul@prod^(0+128)
  9538  0B06  0829               	movf	(___flmul@b^(0+128)+1),w
  9539  0B07  0020               	movlb	0	; select bank0
  9540  0B08  00CB               	movwf	??___flmul
  9541  0B09  084B               	movf	??___flmul,w
  9542  0B0A  00A9               	movwf	__Umul8_16@multiplicand
  9543  0B0B  0021               	movlb	1	; select bank1
  9544  0B0C  082D               	movf	(___flmul@a^(0+128)+1),w
  9545  0B0D  3190  201F  318A   	fcall	__Umul8_16
  9546  0B10  082A               	movf	?__Umul8_16+1,w
  9547  0B11  0021               	movlb	1	; select bank1
  9548  0B12  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9549  0B13  0020               	movlb	0	; select bank0
  9550  0B14  0829               	movf	?__Umul8_16,w
  9551  0B15  0021               	movlb	1	; select bank1
  9552  0B16  00BB               	movwf	___flmul@temp^(0+128)
  9553  0B17  083B               	movf	___flmul@temp^(0+128),w
  9554  0B18  0020               	movlb	0	; select bank0
  9555  0B19  00CB               	movwf	??___flmul
  9556  0B1A  01CC               	clrf	??___flmul+1
  9557  0B1B  01CD               	clrf	??___flmul+2
  9558  0B1C  01CE               	clrf	??___flmul+3
  9559  0B1D  084B               	movf	??___flmul,w
  9560  0B1E  0021               	movlb	1	; select bank1
  9561  0B1F  07B3               	addwf	___flmul@grs^(0+128),f
  9562  0B20  0020               	movlb	0	; select bank0
  9563  0B21  084C               	movf	??___flmul+1,w
  9564  0B22  0021               	movlb	1	; select bank1
  9565  0B23  3DB4               	addwfc	(___flmul@grs+1)^(0+128),f
  9566  0B24  0020               	movlb	0	; select bank0
  9567  0B25  084D               	movf	??___flmul+2,w
  9568  0B26  0021               	movlb	1	; select bank1
  9569  0B27  3DB5               	addwfc	(___flmul@grs+2)^(0+128),f
  9570  0B28  0020               	movlb	0	; select bank0
  9571  0B29  084E               	movf	??___flmul+3,w
  9572  0B2A  0021               	movlb	1	; select bank1
  9573  0B2B  3DB6               	addwfc	(___flmul@grs+3)^(0+128),f
  9574  0B2C  083C               	movf	(___flmul@temp^(0+128)+1),w
  9575  0B2D  0020               	movlb	0	; select bank0
  9576  0B2E  00CB               	movwf	??___flmul
  9577  0B2F  01CC               	clrf	??___flmul+1
  9578  0B30  01CD               	clrf	??___flmul+2
  9579  0B31  01CE               	clrf	??___flmul+3
  9580  0B32  084B               	movf	??___flmul,w
  9581  0B33  0021               	movlb	1	; select bank1
  9582  0B34  07B7               	addwf	___flmul@prod^(0+128),f
  9583  0B35  0020               	movlb	0	; select bank0
  9584  0B36  084C               	movf	??___flmul+1,w
  9585  0B37  0021               	movlb	1	; select bank1
  9586  0B38  3DB8               	addwfc	(___flmul@prod+1)^(0+128),f
  9587  0B39  0020               	movlb	0	; select bank0
  9588  0B3A  084D               	movf	??___flmul+2,w
  9589  0B3B  0021               	movlb	1	; select bank1
  9590  0B3C  3DB9               	addwfc	(___flmul@prod+2)^(0+128),f
  9591  0B3D  0020               	movlb	0	; select bank0
  9592  0B3E  084E               	movf	??___flmul+3,w
  9593  0B3F  0021               	movlb	1	; select bank1
  9594  0B40  3DBA               	addwfc	(___flmul@prod+3)^(0+128),f
  9595  0B41  082A               	movf	(___flmul@b^(0+128)+2),w
  9596  0B42  0020               	movlb	0	; select bank0
  9597  0B43  00CB               	movwf	??___flmul
  9598  0B44  084B               	movf	??___flmul,w
  9599  0B45  00A9               	movwf	__Umul8_16@multiplicand
  9600  0B46  0021               	movlb	1	; select bank1
  9601  0B47  082C               	movf	___flmul@a^(0+128),w
  9602  0B48  3190  201F  318A   	fcall	__Umul8_16
  9603  0B4B  082A               	movf	?__Umul8_16+1,w
  9604  0B4C  0021               	movlb	1	; select bank1
  9605  0B4D  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9606  0B4E  0020               	movlb	0	; select bank0
  9607  0B4F  0829               	movf	?__Umul8_16,w
  9608  0B50  0021               	movlb	1	; select bank1
  9609  0B51  00BB               	movwf	___flmul@temp^(0+128)
  9610  0B52  083B               	movf	___flmul@temp^(0+128),w
  9611  0B53  0020               	movlb	0	; select bank0
  9612  0B54  00CB               	movwf	??___flmul
  9613  0B55  01CC               	clrf	??___flmul+1
  9614  0B56  01CD               	clrf	??___flmul+2
  9615  0B57  01CE               	clrf	??___flmul+3
  9616  0B58  084B               	movf	??___flmul,w
  9617  0B59  0021               	movlb	1	; select bank1
  9618  0B5A  07B3               	addwf	___flmul@grs^(0+128),f
  9619  0B5B  0020               	movlb	0	; select bank0
  9620  0B5C  084C               	movf	??___flmul+1,w
  9621  0B5D  0021               	movlb	1	; select bank1
  9622  0B5E  3DB4               	addwfc	(___flmul@grs+1)^(0+128),f
  9623  0B5F  0020               	movlb	0	; select bank0
  9624  0B60  084D               	movf	??___flmul+2,w
  9625  0B61  0021               	movlb	1	; select bank1
  9626  0B62  3DB5               	addwfc	(___flmul@grs+2)^(0+128),f
  9627  0B63  0020               	movlb	0	; select bank0
  9628  0B64  084E               	movf	??___flmul+3,w
  9629  0B65  0021               	movlb	1	; select bank1
  9630  0B66  3DB6               	addwfc	(___flmul@grs+3)^(0+128),f
  9631  0B67  083C               	movf	(___flmul@temp^(0+128)+1),w
  9632  0B68  0020               	movlb	0	; select bank0
  9633  0B69  00CB               	movwf	??___flmul
  9634  0B6A  01CC               	clrf	??___flmul+1
  9635  0B6B  01CD               	clrf	??___flmul+2
  9636  0B6C  01CE               	clrf	??___flmul+3
  9637  0B6D  084B               	movf	??___flmul,w
  9638  0B6E  0021               	movlb	1	; select bank1
  9639  0B6F  07B7               	addwf	___flmul@prod^(0+128),f
  9640  0B70  0020               	movlb	0	; select bank0
  9641  0B71  084C               	movf	??___flmul+1,w
  9642  0B72  0021               	movlb	1	; select bank1
  9643  0B73  3DB8               	addwfc	(___flmul@prod+1)^(0+128),f
  9644  0B74  0020               	movlb	0	; select bank0
  9645  0B75  084D               	movf	??___flmul+2,w
  9646  0B76  0021               	movlb	1	; select bank1
  9647  0B77  3DB9               	addwfc	(___flmul@prod+2)^(0+128),f
  9648  0B78  0020               	movlb	0	; select bank0
  9649  0B79  084E               	movf	??___flmul+3,w
  9650  0B7A  0021               	movlb	1	; select bank1
  9651  0B7B  3DBA               	addwfc	(___flmul@prod+3)^(0+128),f
  9652  0B7C  3008               	movlw	8
  9653  0B7D                     u5125:
  9654  0B7D  35B3               	lslf	___flmul@grs^(0+128),f
  9655  0B7E  0DB4               	rlf	(___flmul@grs+1)^(0+128),f
  9656  0B7F  0DB5               	rlf	(___flmul@grs+2)^(0+128),f
  9657  0B80  0DB6               	rlf	(___flmul@grs+3)^(0+128),f
  9658  0B81  0B89               	decfsz	9,f
  9659  0B82  2B7D               	goto	u5125
  9660  0B83  0829               	movf	(___flmul@b^(0+128)+1),w
  9661  0B84  0020               	movlb	0	; select bank0
  9662  0B85  00CB               	movwf	??___flmul
  9663  0B86  084B               	movf	??___flmul,w
  9664  0B87  00A9               	movwf	__Umul8_16@multiplicand
  9665  0B88  0021               	movlb	1	; select bank1
  9666  0B89  082C               	movf	___flmul@a^(0+128),w
  9667  0B8A  3190  201F  318A   	fcall	__Umul8_16
  9668  0B8D  082A               	movf	?__Umul8_16+1,w
  9669  0B8E  0021               	movlb	1	; select bank1
  9670  0B8F  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9671  0B90  0020               	movlb	0	; select bank0
  9672  0B91  0829               	movf	?__Umul8_16,w
  9673  0B92  0021               	movlb	1	; select bank1
  9674  0B93  00BB               	movwf	___flmul@temp^(0+128)
  9675  0B94  083B               	movf	___flmul@temp^(0+128),w
  9676  0B95  07B3               	addwf	___flmul@grs^(0+128),f
  9677  0B96  083C               	movf	(___flmul@temp+1)^(0+128),w
  9678  0B97  3DB4               	addwfc	(___flmul@grs+1)^(0+128),f
  9679  0B98  3000               	movlw	0
  9680  0B99  3DB5               	addwfc	(___flmul@grs+2)^(0+128),f
  9681  0B9A  3DB6               	addwfc	(___flmul@grs+3)^(0+128),f
  9682  0B9B  0828               	movf	___flmul@b^(0+128),w
  9683  0B9C  0020               	movlb	0	; select bank0
  9684  0B9D  00CB               	movwf	??___flmul
  9685  0B9E  084B               	movf	??___flmul,w
  9686  0B9F  00A9               	movwf	__Umul8_16@multiplicand
  9687  0BA0  0021               	movlb	1	; select bank1
  9688  0BA1  082D               	movf	(___flmul@a^(0+128)+1),w
  9689  0BA2  3190  201F  318A   	fcall	__Umul8_16
  9690  0BA5  082A               	movf	?__Umul8_16+1,w
  9691  0BA6  0021               	movlb	1	; select bank1
  9692  0BA7  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9693  0BA8  0020               	movlb	0	; select bank0
  9694  0BA9  0829               	movf	?__Umul8_16,w
  9695  0BAA  0021               	movlb	1	; select bank1
  9696  0BAB  00BB               	movwf	___flmul@temp^(0+128)
  9697  0BAC  083B               	movf	___flmul@temp^(0+128),w
  9698  0BAD  07B3               	addwf	___flmul@grs^(0+128),f
  9699  0BAE  083C               	movf	(___flmul@temp+1)^(0+128),w
  9700  0BAF  3DB4               	addwfc	(___flmul@grs+1)^(0+128),f
  9701  0BB0  3000               	movlw	0
  9702  0BB1  3DB5               	addwfc	(___flmul@grs+2)^(0+128),f
  9703  0BB2  3DB6               	addwfc	(___flmul@grs+3)^(0+128),f
  9704  0BB3  3008               	movlw	8
  9705  0BB4                     u5135:
  9706  0BB4  35B3               	lslf	___flmul@grs^(0+128),f
  9707  0BB5  0DB4               	rlf	(___flmul@grs+1)^(0+128),f
  9708  0BB6  0DB5               	rlf	(___flmul@grs+2)^(0+128),f
  9709  0BB7  0DB6               	rlf	(___flmul@grs+3)^(0+128),f
  9710  0BB8  0B89               	decfsz	9,f
  9711  0BB9  2BB4               	goto	u5135
  9712  0BBA  0828               	movf	___flmul@b^(0+128),w
  9713  0BBB  0020               	movlb	0	; select bank0
  9714  0BBC  00CB               	movwf	??___flmul
  9715  0BBD  084B               	movf	??___flmul,w
  9716  0BBE  00A9               	movwf	__Umul8_16@multiplicand
  9717  0BBF  0021               	movlb	1	; select bank1
  9718  0BC0  082C               	movf	___flmul@a^(0+128),w
  9719  0BC1  3190  201F  318A   	fcall	__Umul8_16
  9720  0BC4  082A               	movf	?__Umul8_16+1,w
  9721  0BC5  0021               	movlb	1	; select bank1
  9722  0BC6  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9723  0BC7  0020               	movlb	0	; select bank0
  9724  0BC8  0829               	movf	?__Umul8_16,w
  9725  0BC9  0021               	movlb	1	; select bank1
  9726  0BCA  00BB               	movwf	___flmul@temp^(0+128)
  9727  0BCB  083B               	movf	___flmul@temp^(0+128),w
  9728  0BCC  07B3               	addwf	___flmul@grs^(0+128),f
  9729  0BCD  083C               	movf	(___flmul@temp+1)^(0+128),w
  9730  0BCE  3DB4               	addwfc	(___flmul@grs+1)^(0+128),f
  9731  0BCF  3000               	movlw	0
  9732  0BD0  3DB5               	addwfc	(___flmul@grs+2)^(0+128),f
  9733  0BD1  3DB6               	addwfc	(___flmul@grs+3)^(0+128),f
  9734  0BD2  0829               	movf	(___flmul@b^(0+128)+1),w
  9735  0BD3  0020               	movlb	0	; select bank0
  9736  0BD4  00CB               	movwf	??___flmul
  9737  0BD5  084B               	movf	??___flmul,w
  9738  0BD6  00A9               	movwf	__Umul8_16@multiplicand
  9739  0BD7  0021               	movlb	1	; select bank1
  9740  0BD8  082E               	movf	(___flmul@a^(0+128)+2),w
  9741  0BD9  3190  201F  318A   	fcall	__Umul8_16
  9742  0BDC  082A               	movf	?__Umul8_16+1,w
  9743  0BDD  0021               	movlb	1	; select bank1
  9744  0BDE  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9745  0BDF  0020               	movlb	0	; select bank0
  9746  0BE0  0829               	movf	?__Umul8_16,w
  9747  0BE1  0021               	movlb	1	; select bank1
  9748  0BE2  00BB               	movwf	___flmul@temp^(0+128)
  9749  0BE3  083B               	movf	___flmul@temp^(0+128),w
  9750  0BE4  07B7               	addwf	___flmul@prod^(0+128),f
  9751  0BE5  083C               	movf	(___flmul@temp+1)^(0+128),w
  9752  0BE6  3DB8               	addwfc	(___flmul@prod+1)^(0+128),f
  9753  0BE7  3000               	movlw	0
  9754  0BE8  3DB9               	addwfc	(___flmul@prod+2)^(0+128),f
  9755  0BE9  3DBA               	addwfc	(___flmul@prod+3)^(0+128),f
  9756  0BEA  082A               	movf	(___flmul@b^(0+128)+2),w
  9757  0BEB  0020               	movlb	0	; select bank0
  9758  0BEC  00CB               	movwf	??___flmul
  9759  0BED  084B               	movf	??___flmul,w
  9760  0BEE  00A9               	movwf	__Umul8_16@multiplicand
  9761  0BEF  0021               	movlb	1	; select bank1
  9762  0BF0  082D               	movf	(___flmul@a^(0+128)+1),w
  9763  0BF1  3190  201F  318A   	fcall	__Umul8_16
  9764  0BF4  082A               	movf	?__Umul8_16+1,w
  9765  0BF5  0021               	movlb	1	; select bank1
  9766  0BF6  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9767  0BF7  0020               	movlb	0	; select bank0
  9768  0BF8  0829               	movf	?__Umul8_16,w
  9769  0BF9  0021               	movlb	1	; select bank1
  9770  0BFA  00BB               	movwf	___flmul@temp^(0+128)
  9771  0BFB  083B               	movf	___flmul@temp^(0+128),w
  9772  0BFC  07B7               	addwf	___flmul@prod^(0+128),f
  9773  0BFD  083C               	movf	(___flmul@temp+1)^(0+128),w
  9774  0BFE  3DB8               	addwfc	(___flmul@prod+1)^(0+128),f
  9775  0BFF  3000               	movlw	0
  9776  0C00  3DB9               	addwfc	(___flmul@prod+2)^(0+128),f
  9777  0C01  3DBA               	addwfc	(___flmul@prod+3)^(0+128),f
  9778  0C02  082A               	movf	(___flmul@b^(0+128)+2),w
  9779  0C03  0020               	movlb	0	; select bank0
  9780  0C04  00CB               	movwf	??___flmul
  9781  0C05  084B               	movf	??___flmul,w
  9782  0C06  00A9               	movwf	__Umul8_16@multiplicand
  9783  0C07  0021               	movlb	1	; select bank1
  9784  0C08  082E               	movf	(___flmul@a^(0+128)+2),w
  9785  0C09  3190  201F  318A   	fcall	__Umul8_16
  9786  0C0C  082A               	movf	?__Umul8_16+1,w
  9787  0C0D  0021               	movlb	1	; select bank1
  9788  0C0E  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9789  0C0F  0020               	movlb	0	; select bank0
  9790  0C10  0829               	movf	?__Umul8_16,w
  9791  0C11  0021               	movlb	1	; select bank1
  9792  0C12  00BB               	movwf	___flmul@temp^(0+128)
  9793  0C13  083B               	movf	___flmul@temp^(0+128),w
  9794  0C14  0020               	movlb	0	; select bank0
  9795  0C15  00CB               	movwf	??___flmul
  9796  0C16  0021               	movlb	1	; select bank1
  9797  0C17  083C               	movf	(___flmul@temp+1)^(0+128),w
  9798  0C18  0020               	movlb	0	; select bank0
  9799  0C19  00CC               	movwf	??___flmul+1
  9800  0C1A  01CD               	clrf	??___flmul+2
  9801  0C1B  01CE               	clrf	??___flmul+3
  9802  0C1C  3008               	movlw	8
  9803  0C1D                     u5145:
  9804  0C1D  35CB               	lslf	??___flmul,f
  9805  0C1E  0DCC               	rlf	??___flmul+1,f
  9806  0C1F  0DCD               	rlf	??___flmul+2,f
  9807  0C20  0DCE               	rlf	??___flmul+3,f
  9808  0C21  0B89               	decfsz	9,f
  9809  0C22  2C1D               	goto	u5145
  9810  0C23  084B               	movf	??___flmul,w
  9811  0C24  0021               	movlb	1	; select bank1
  9812  0C25  07B7               	addwf	___flmul@prod^(0+128),f
  9813  0C26  0020               	movlb	0	; select bank0
  9814  0C27  084C               	movf	??___flmul+1,w
  9815  0C28  0021               	movlb	1	; select bank1
  9816  0C29  3DB8               	addwfc	(___flmul@prod+1)^(0+128),f
  9817  0C2A  0020               	movlb	0	; select bank0
  9818  0C2B  084D               	movf	??___flmul+2,w
  9819  0C2C  0021               	movlb	1	; select bank1
  9820  0C2D  3DB9               	addwfc	(___flmul@prod+2)^(0+128),f
  9821  0C2E  0020               	movlb	0	; select bank0
  9822  0C2F  084E               	movf	??___flmul+3,w
  9823  0C30  0021               	movlb	1	; select bank1
  9824  0C31  3DBA               	addwfc	(___flmul@prod+3)^(0+128),f
  9825  0C32  0836               	movf	(___flmul@grs^(0+128)+3),w
  9826  0C33  0020               	movlb	0	; select bank0
  9827  0C34  00CB               	movwf	??___flmul
  9828  0C35  01CC               	clrf	??___flmul+1
  9829  0C36  01CD               	clrf	??___flmul+2
  9830  0C37  01CE               	clrf	??___flmul+3
  9831  0C38  084B               	movf	??___flmul,w
  9832  0C39  0021               	movlb	1	; select bank1
  9833  0C3A  07B7               	addwf	___flmul@prod^(0+128),f
  9834  0C3B  0020               	movlb	0	; select bank0
  9835  0C3C  084C               	movf	??___flmul+1,w
  9836  0C3D  0021               	movlb	1	; select bank1
  9837  0C3E  3DB8               	addwfc	(___flmul@prod+1)^(0+128),f
  9838  0C3F  0020               	movlb	0	; select bank0
  9839  0C40  084D               	movf	??___flmul+2,w
  9840  0C41  0021               	movlb	1	; select bank1
  9841  0C42  3DB9               	addwfc	(___flmul@prod+2)^(0+128),f
  9842  0C43  0020               	movlb	0	; select bank0
  9843  0C44  084E               	movf	??___flmul+3,w
  9844  0C45  0021               	movlb	1	; select bank1
  9845  0C46  3DBA               	addwfc	(___flmul@prod+3)^(0+128),f
  9846  0C47  3008               	movlw	8
  9847  0C48                     u5155:
  9848  0C48  35B3               	lslf	___flmul@grs^(0+128),f
  9849  0C49  0DB4               	rlf	(___flmul@grs+1)^(0+128),f
  9850  0C4A  0DB5               	rlf	(___flmul@grs+2)^(0+128),f
  9851  0C4B  0DB6               	rlf	(___flmul@grs+3)^(0+128),f
  9852  0C4C  0B89               	decfsz	9,f
  9853  0C4D  2C48               	goto	u5155
  9854  0C4E  0832               	movf	___flmul@bexp^(0+128),w
  9855  0C4F  0731               	addwf	___flmul@aexp^(0+128),w
  9856  0C50  0020               	movlb	0	; select bank0
  9857  0C51  00CB               	movwf	??___flmul
  9858  0C52  01CC               	clrf	??___flmul+1
  9859  0C53  0DCC               	rlf	??___flmul+1,f
  9860  0C54  084B               	movf	??___flmul,w
  9861  0C55  3E82               	addlw	130
  9862  0C56  0021               	movlb	1	; select bank1
  9863  0C57  00BB               	movwf	___flmul@temp^(0+128)
  9864  0C58  30FF               	movlw	255
  9865  0C59  0020               	movlb	0	; select bank0
  9866  0C5A  3D4C               	addwfc	??___flmul+1,w
  9867  0C5B  0021               	movlb	1	; select bank1
  9868  0C5C  00BC               	movwf	(___flmul@temp+1)^(0+128)
  9869  0C5D                     l5691:
  9870  0C5D  1BB9               	btfsc	(___flmul@prod+2)^(0+128),7
  9871  0C5E  2C74               	goto	l5693
  9872  0C5F  3001               	movlw	1
  9873  0C60                     u5165:
  9874  0C60  35B7               	lslf	___flmul@prod^(0+128),f
  9875  0C61  0DB8               	rlf	(___flmul@prod+1)^(0+128),f
  9876  0C62  0DB9               	rlf	(___flmul@prod+2)^(0+128),f
  9877  0C63  0DBA               	rlf	(___flmul@prod+3)^(0+128),f
  9878  0C64  0B89               	decfsz	9,f
  9879  0C65  2C60               	goto	u5165
  9880  0C66  1BB6               	btfsc	(___flmul@grs+3)^(0+128),7
  9881  0C67  1437               	bsf	___flmul@prod^(0+128),0
  9882  0C68  3001               	movlw	1
  9883  0C69                     u5185:
  9884  0C69  35B3               	lslf	___flmul@grs^(0+128),f
  9885  0C6A  0DB4               	rlf	(___flmul@grs+1)^(0+128),f
  9886  0C6B  0DB5               	rlf	(___flmul@grs+2)^(0+128),f
  9887  0C6C  0DB6               	rlf	(___flmul@grs+3)^(0+128),f
  9888  0C6D  0B89               	decfsz	9,f
  9889  0C6E  2C69               	goto	u5185
  9890  0C6F  30FF               	movlw	255
  9891  0C70  07BB               	addwf	___flmul@temp^(0+128),f
  9892  0C71  30FF               	movlw	255
  9893  0C72  3DBC               	addwfc	(___flmul@temp+1)^(0+128),f
  9894  0C73  2C5D               	goto	l5691
  9895  0C74                     l5693:
  9896  0C74  01B1               	clrf	___flmul@aexp^(0+128)
  9897  0C75  1FB6               	btfss	(___flmul@grs+3)^(0+128),7
  9898  0C76  2C96               	goto	l5703
  9899  0C77  30FF               	movlw	255
  9900  0C78  0533               	andwf	___flmul@grs^(0+128),w
  9901  0C79  0020               	movlb	0	; select bank0
  9902  0C7A  00CB               	movwf	??___flmul
  9903  0C7B  30FF               	movlw	255
  9904  0C7C  0021               	movlb	1	; select bank1
  9905  0C7D  0534               	andwf	(___flmul@grs+1)^(0+128),w
  9906  0C7E  0020               	movlb	0	; select bank0
  9907  0C7F  00CC               	movwf	??___flmul+1
  9908  0C80  30FF               	movlw	255
  9909  0C81  0021               	movlb	1	; select bank1
  9910  0C82  0535               	andwf	(___flmul@grs+2)^(0+128),w
  9911  0C83  0020               	movlb	0	; select bank0
  9912  0C84  00CD               	movwf	??___flmul+2
  9913  0C85  307F               	movlw	127
  9914  0C86  0021               	movlb	1	; select bank1
  9915  0C87  0536               	andwf	(___flmul@grs+3)^(0+128),w
  9916  0C88  0020               	movlb	0	; select bank0
  9917  0C89  00CE               	movwf	??___flmul+3
  9918  0C8A  084E               	movf	??___flmul+3,w
  9919  0C8B  044D               	iorwf	??___flmul+2,w
  9920  0C8C  044C               	iorwf	??___flmul+1,w
  9921  0C8D  044B               	iorwf	??___flmul,w
  9922  0C8E  1D03               	btfss	3,2
  9923  0C8F  2C93               	goto	l5699
  9924  0C90  0021               	movlb	1	; select bank1
  9925  0C91  1C37               	btfss	___flmul@prod^(0+128),0
  9926  0C92  2C96               	goto	l5703
  9927  0C93                     l5699:
  9928  0C93  0021               	movlb	1	; select bank1
  9929  0C94  01B1               	clrf	___flmul@aexp^(0+128)
  9930  0C95  0AB1               	incf	___flmul@aexp^(0+128),f
  9931  0C96                     l5703:
  9932  0C96  0831               	movf	___flmul@aexp^(0+128),w
  9933  0C97  1903               	btfsc	3,2
  9934  0C98  2CCD               	goto	l5713
  9935  0C99  3001               	movlw	1
  9936  0C9A  07B7               	addwf	___flmul@prod^(0+128),f
  9937  0C9B  3000               	movlw	0
  9938  0C9C  3DB8               	addwfc	(___flmul@prod+1)^(0+128),f
  9939  0C9D  3000               	movlw	0
  9940  0C9E  3DB9               	addwfc	(___flmul@prod+2)^(0+128),f
  9941  0C9F  3000               	movlw	0
  9942  0CA0  3DBA               	addwfc	(___flmul@prod+3)^(0+128),f
  9943  0CA1  1C3A               	btfss	(___flmul@prod+3)^(0+128),0
  9944  0CA2  2CCD               	goto	l5713
  9945  0CA3  0837               	movf	___flmul@prod^(0+128),w
  9946  0CA4  0020               	movlb	0	; select bank0
  9947  0CA5  00CB               	movwf	??___flmul
  9948  0CA6  0021               	movlb	1	; select bank1
  9949  0CA7  0838               	movf	(___flmul@prod+1)^(0+128),w
  9950  0CA8  0020               	movlb	0	; select bank0
  9951  0CA9  00CC               	movwf	??___flmul+1
  9952  0CAA  0021               	movlb	1	; select bank1
  9953  0CAB  0839               	movf	(___flmul@prod+2)^(0+128),w
  9954  0CAC  0020               	movlb	0	; select bank0
  9955  0CAD  00CD               	movwf	??___flmul+2
  9956  0CAE  0021               	movlb	1	; select bank1
  9957  0CAF  083A               	movf	(___flmul@prod+3)^(0+128),w
  9958  0CB0  0020               	movlb	0	; select bank0
  9959  0CB1  00CE               	movwf	??___flmul+3
  9960  0CB2  3001               	movlw	1
  9961  0CB3  00CF               	movwf	??___flmul+4
  9962  0CB4                     u5255:
  9963  0CB4  37CE               	asrf	??___flmul+3,f
  9964  0CB5  0CCD               	rrf	??___flmul+2,f
  9965  0CB6  0CCC               	rrf	??___flmul+1,f
  9966  0CB7  0CCB               	rrf	??___flmul,f
  9967  0CB8  0BCF               	decfsz	??___flmul+4,f
  9968  0CB9  2CB4               	goto	u5255
  9969  0CBA  084E               	movf	??___flmul+3,w
  9970  0CBB  0021               	movlb	1	; select bank1
  9971  0CBC  00BA               	movwf	(___flmul@prod+3)^(0+128)
  9972  0CBD  0020               	movlb	0	; select bank0
  9973  0CBE  084D               	movf	??___flmul+2,w
  9974  0CBF  0021               	movlb	1	; select bank1
  9975  0CC0  00B9               	movwf	(___flmul@prod+2)^(0+128)
  9976  0CC1  0020               	movlb	0	; select bank0
  9977  0CC2  084C               	movf	??___flmul+1,w
  9978  0CC3  0021               	movlb	1	; select bank1
  9979  0CC4  00B8               	movwf	(___flmul@prod+1)^(0+128)
  9980  0CC5  0020               	movlb	0	; select bank0
  9981  0CC6  084B               	movf	??___flmul,w
  9982  0CC7  0021               	movlb	1	; select bank1
  9983  0CC8  00B7               	movwf	___flmul@prod^(0+128)
  9984  0CC9  3001               	movlw	1
  9985  0CCA  07BB               	addwf	___flmul@temp^(0+128),f
  9986  0CCB  3000               	movlw	0
  9987  0CCC  3DBC               	addwfc	(___flmul@temp+1)^(0+128),f
  9988  0CCD                     l5713:
  9989  0CCD  083C               	movf	(___flmul@temp+1)^(0+128),w
  9990  0CCE  3A80               	xorlw	128
  9991  0CCF  0020               	movlb	0	; select bank0
  9992  0CD0  00CB               	movwf	??___flmul
  9993  0CD1  3080               	movlw	128
  9994  0CD2  024B               	subwf	??___flmul,w
  9995  0CD3  1D03               	skipz
  9996  0CD4  2CD8               	goto	u5265
  9997  0CD5  30FF               	movlw	255
  9998  0CD6  0021               	movlb	1	; select bank1
  9999  0CD7  023B               	subwf	___flmul@temp^(0+128),w
 10000  0CD8                     u5265:
 10001  0CD8  1C03               	skipc
 10002  0CD9  2CE4               	goto	l5717
 10003  0CDA  307F               	movlw	127
 10004  0CDB  0021               	movlb	1	; select bank1
 10005  0CDC  00BA               	movwf	(___flmul@prod+3)^(0+128)
 10006  0CDD  3080               	movlw	128
 10007  0CDE  00B9               	movwf	(___flmul@prod+2)^(0+128)
 10008  0CDF  3000               	movlw	0
 10009  0CE0  00B8               	movwf	(___flmul@prod+1)^(0+128)
 10010  0CE1  3000               	movlw	0
 10011  0CE2  00B7               	movwf	___flmul@prod^(0+128)
 10012  0CE3  2D14               	goto	l1462
 10013  0CE4                     l5717:
 10014  0CE4  0021               	movlb	1	; select bank1
 10015  0CE5  083C               	movf	(___flmul@temp+1)^(0+128),w
 10016  0CE6  3A80               	xorlw	128
 10017  0CE7  0020               	movlb	0	; select bank0
 10018  0CE8  00CB               	movwf	??___flmul
 10019  0CE9  3080               	movlw	128
 10020  0CEA  024B               	subwf	??___flmul,w
 10021  0CEB  1D03               	skipz
 10022  0CEC  2CF0               	goto	u5275
 10023  0CED  3001               	movlw	1
 10024  0CEE  0021               	movlb	1	; select bank1
 10025  0CEF  023B               	subwf	___flmul@temp^(0+128),w
 10026  0CF0                     u5275:
 10027  0CF0  1803               	skipnc
 10028  0CF1  2CFD               	goto	l5723
 10029  0CF2  3000               	movlw	0
 10030  0CF3  0021               	movlb	1	; select bank1
 10031  0CF4  00BA               	movwf	(___flmul@prod+3)^(0+128)
 10032  0CF5  3000               	movlw	0
 10033  0CF6  00B9               	movwf	(___flmul@prod+2)^(0+128)
 10034  0CF7  3000               	movlw	0
 10035  0CF8  00B8               	movwf	(___flmul@prod+1)^(0+128)
 10036  0CF9  3000               	movlw	0
 10037  0CFA  00B7               	movwf	___flmul@prod^(0+128)
 10038  0CFB  01B0               	clrf	___flmul@sign^(0+128)
 10039  0CFC  2D14               	goto	l1462
 10040  0CFD                     l5723:
 10041  0CFD  0021               	movlb	1	; select bank1
 10042  0CFE  083B               	movf	___flmul@temp^(0+128),w
 10043  0CFF  0020               	movlb	0	; select bank0
 10044  0D00  00CB               	movwf	??___flmul
 10045  0D01  084B               	movf	??___flmul,w
 10046  0D02  0021               	movlb	1	; select bank1
 10047  0D03  00B2               	movwf	___flmul@bexp^(0+128)
 10048  0D04  30FF               	movlw	255
 10049  0D05  05B7               	andwf	___flmul@prod^(0+128),f
 10050  0D06  30FF               	movlw	255
 10051  0D07  05B8               	andwf	(___flmul@prod+1)^(0+128),f
 10052  0D08  307F               	movlw	127
 10053  0D09  05B9               	andwf	(___flmul@prod+2)^(0+128),f
 10054  0D0A  3000               	movlw	0
 10055  0D0B  05BA               	andwf	(___flmul@prod+3)^(0+128),f
 10056  0D0C  1832               	btfsc	___flmul@bexp^(0+128),0
 10057  0D0D  17B9               	bsf	(___flmul@prod^(0+128)+2),7
 10058  0D0E  3632               	lsrf	___flmul@bexp^(0+128),w
 10059  0D0F  0020               	movlb	0	; select bank0
 10060  0D10  00CB               	movwf	??___flmul
 10061  0D11  084B               	movf	??___flmul,w
 10062  0D12  0021               	movlb	1	; select bank1
 10063  0D13  00BA               	movwf	(___flmul@prod^(0+128)+3)
 10064  0D14                     l1462:
 10065  0D14  0830               	movf	___flmul@sign^(0+128),w
 10066  0D15  0020               	movlb	0	; select bank0
 10067  0D16  00CB               	movwf	??___flmul
 10068  0D17  084B               	movf	??___flmul,w
 10069  0D18  0021               	movlb	1	; select bank1
 10070  0D19  04BA               	iorwf	(___flmul@prod^(0+128)+3),f
 10071  0D1A  083A               	movf	(___flmul@prod+3)^(0+128),w
 10072  0D1B  00AB               	movwf	(?___flmul+3)^(0+128)
 10073  0D1C  0839               	movf	(___flmul@prod+2)^(0+128),w
 10074  0D1D  00AA               	movwf	(?___flmul+2)^(0+128)
 10075  0D1E  0838               	movf	(___flmul@prod+1)^(0+128),w
 10076  0D1F  00A9               	movwf	(?___flmul+1)^(0+128)
 10077  0D20  0837               	movf	___flmul@prod^(0+128),w
 10078  0D21  00A8               	movwf	?___flmul^(0+128)
 10079  0D22  0008               	return
 10080  0D23                     __end_of___flmul:
 10081                           
 10082                           	psect	text27
 10083  101F                     __ptext27:	
 10084 ;; *************** function __Umul8_16 *****************
 10085 ;; Defined at:
 10086 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul8_16.c"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;  multiplier      1    wreg     unsigned char 
 10089 ;;  multiplicand    1    9[BANK0 ] unsigned char 
 10090 ;; Auto vars:     Size  Location     Type
 10091 ;;  multiplier      1   17[BANK0 ] unsigned char 
 10092 ;;  word_mpld       2   15[BANK0 ] unsigned int 
 10093 ;;  product         2   13[BANK0 ] unsigned int 
 10094 ;; Return value:  Size  Location     Type
 10095 ;;                  2    9[BANK0 ] unsigned int 
 10096 ;; Registers used:
 10097 ;;		wreg, status,2, status,0
 10098 ;; Tracked objects:
 10099 ;;		On entry : 1F/1
 10100 ;;		On exit  : 1F/0
 10101 ;;		Unchanged: 0/0
 10102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10103 ;;      Params:         0       2       0       0       0       0       0       0
 10104 ;;      Locals:         0       5       0       0       0       0       0       0
 10105 ;;      Temps:          0       2       0       0       0       0       0       0
 10106 ;;      Totals:         0       9       0       0       0       0       0       0
 10107 ;;Total ram usage:        9 bytes
 10108 ;; Hardware stack levels used: 1
 10109 ;; Hardware stack levels required when called: 4
 10110 ;; This function calls:
 10111 ;;		Nothing
 10112 ;; This function is called by:
 10113 ;;		___flmul
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117  101F                     __Umul8_16:	
 10118                           ;psect for function __Umul8_16
 10119                           
 10120                           
 10121                           ;incstack = 0
 10122                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 10123                           ;__Umul8_16@multiplier stored from wreg
 10124  101F  0020               	movlb	0	; select bank0
 10125  1020  00B1               	movwf	__Umul8_16@multiplier
 10126  1021  01AD               	clrf	__Umul8_16@product
 10127  1022  01AE               	clrf	__Umul8_16@product+1
 10128  1023  0829               	movf	__Umul8_16@multiplicand,w
 10129  1024  00AB               	movwf	??__Umul8_16
 10130  1025  01AC               	clrf	??__Umul8_16+1
 10131  1026  082B               	movf	??__Umul8_16,w
 10132  1027  00AF               	movwf	__Umul8_16@word_mpld
 10133  1028  082C               	movf	??__Umul8_16+1,w
 10134  1029  00B0               	movwf	__Umul8_16@word_mpld+1
 10135  102A                     l5439:
 10136  102A  1C31               	btfss	__Umul8_16@multiplier,0
 10137  102B  2830               	goto	l1469
 10138  102C  082F               	movf	__Umul8_16@word_mpld,w
 10139  102D  07AD               	addwf	__Umul8_16@product,f
 10140  102E  0830               	movf	__Umul8_16@word_mpld+1,w
 10141  102F  3DAE               	addwfc	__Umul8_16@product+1,f
 10142  1030                     l1469:
 10143  1030  3001               	movlw	1
 10144  1031                     u4735:
 10145  1031  35AF               	lslf	__Umul8_16@word_mpld,f
 10146  1032  0DB0               	rlf	__Umul8_16@word_mpld+1,f
 10147  1033  0B89               	decfsz	9,f
 10148  1034  2831               	goto	u4735
 10149  1035  1003               	clrc
 10150  1036  0CB1               	rrf	__Umul8_16@multiplier,f
 10151  1037  0831               	movf	__Umul8_16@multiplier,w
 10152  1038  1D03               	btfss	3,2
 10153  1039  282A               	goto	l5439
 10154  103A  082E               	movf	__Umul8_16@product+1,w
 10155  103B  00AA               	movwf	?__Umul8_16+1
 10156  103C  082D               	movf	__Umul8_16@product,w
 10157  103D  00A9               	movwf	?__Umul8_16
 10158  103E  0008               	return
 10159  103F                     __end_of__Umul8_16:
 10160                           
 10161                           	psect	text28
 10162  1E6B                     __ptext28:	
 10163 ;; *************** function _MCP3422_Write *****************
 10164 ;; Defined at:
 10165 ;;		line 103 in file "main.c"
 10166 ;; Parameters:    Size  Location     Type
 10167 ;;  data            1    wreg     unsigned char 
 10168 ;; Auto vars:     Size  Location     Type
 10169 ;;  data            1   33[BANK0 ] unsigned char 
 10170 ;; Return value:  Size  Location     Type
 10171 ;;                  1    wreg      void 
 10172 ;; Registers used:
 10173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10174 ;; Tracked objects:
 10175 ;;		On entry : 1F/1
 10176 ;;		On exit  : 1F/0
 10177 ;;		Unchanged: 0/0
 10178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10179 ;;      Params:         0       0       0       0       0       0       0       0
 10180 ;;      Locals:         0       1       0       0       0       0       0       0
 10181 ;;      Temps:          0       1       0       0       0       0       0       0
 10182 ;;      Totals:         0       2       0       0       0       0       0       0
 10183 ;;Total ram usage:        2 bytes
 10184 ;; Hardware stack levels used: 1
 10185 ;; Hardware stack levels required when called: 13
 10186 ;; This function calls:
 10187 ;;		_I2C_WriteNBytes
 10188 ;; This function is called by:
 10189 ;;		_MCP3422_ReadVoltage
 10190 ;; This function uses a non-reentrant model
 10191 ;;
 10192                           
 10193  1E6B                     _MCP3422_Write:	
 10194                           ;psect for function _MCP3422_Write
 10195                           
 10196                           
 10197                           ;incstack = 0
 10198                           ; Regs used in _MCP3422_Write: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10199                           ;MCP3422_Write@data stored from wreg
 10200  1E6B  0020               	movlb	0	; select bank0
 10201  1E6C  00C1               	movwf	MCP3422_Write@data
 10202                           
 10203                           ;main.c: 103: static void MCP3422_Write(uint8_t data);main.c: 104: {;main.c: 105:     I2
      +                          C_WriteNBytes(0x68,&data,1U);
 10204  1E6D  3041               	movlw	(low (MCP3422_Write@data| 0))& (0+255)
 10205  1E6E  00C0               	movwf	??_MCP3422_Write
 10206  1E6F  0840               	movf	??_MCP3422_Write,w
 10207  1E70  00BC               	movwf	I2C_WriteNBytes@data
 10208  1E71  3001               	movlw	1
 10209  1E72  00BD               	movwf	I2C_WriteNBytes@len
 10210  1E73  3000               	movlw	0
 10211  1E74  00BE               	movwf	I2C_WriteNBytes@len+1
 10212  1E75  3068               	movlw	104
 10213  1E76  3190  203F         	fcall	_I2C_WriteNBytes
 10214  1E78  0008               	return
 10215  1E79                     __end_of_MCP3422_Write:
 10216                           
 10217                           	psect	text29
 10218  103F                     __ptext29:	
 10219 ;; *************** function _I2C_WriteNBytes *****************
 10220 ;; Defined at:
 10221 ;;		line 111 in file "mcc_generated_files/examples/i2c_master_example.c"
 10222 ;; Parameters:    Size  Location     Type
 10223 ;;  address         1    wreg     unsigned char 
 10224 ;;  data            1   28[BANK0 ] PTR unsigned char 
 10225 ;;		 -> MCP3422_Write@data(1), 
 10226 ;;  len             2   29[BANK0 ] unsigned int 
 10227 ;; Auto vars:     Size  Location     Type
 10228 ;;  address         1   31[BANK0 ] unsigned char 
 10229 ;; Return value:  Size  Location     Type
 10230 ;;                  1    wreg      void 
 10231 ;; Registers used:
 10232 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10233 ;; Tracked objects:
 10234 ;;		On entry : 1F/0
 10235 ;;		On exit  : 1F/0
 10236 ;;		Unchanged: 0/0
 10237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10238 ;;      Params:         0       3       0       0       0       0       0       0
 10239 ;;      Locals:         0       1       0       0       0       0       0       0
 10240 ;;      Temps:          0       0       0       0       0       0       0       0
 10241 ;;      Totals:         0       4       0       0       0       0       0       0
 10242 ;;Total ram usage:        4 bytes
 10243 ;; Hardware stack levels used: 1
 10244 ;; Hardware stack levels required when called: 12
 10245 ;; This function calls:
 10246 ;;		_I2C_Close
 10247 ;;		_I2C_MasterWrite
 10248 ;;		_I2C_Open
 10249 ;;		_I2C_SetAddressNackCallback
 10250 ;;		_I2C_SetBuffer
 10251 ;; This function is called by:
 10252 ;;		_MCP3422_Write
 10253 ;; This function uses a non-reentrant model
 10254 ;;
 10255                           
 10256  103F                     _I2C_WriteNBytes:	
 10257                           ;psect for function _I2C_WriteNBytes
 10258                           
 10259                           
 10260                           ;incstack = 0
 10261                           ; Regs used in _I2C_WriteNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10262                           ;I2C_WriteNBytes@address stored from wreg
 10263  103F  00BF               	movwf	I2C_WriteNBytes@address
 10264  1040                     l4003:	
 10265                           ;mcc_generated_files/examples/i2c_master_example.c: 111: void I2C_WriteNBytes(i2c_addres
      +                          s_t address, uint8_t* data, size_t len);mcc_generated_files/examples/i2c_master_example.
      +                          c: 112: {;mcc_generated_files/examples/i2c_master_example.c: 113:     while(!I2C_Open(ad
      +                          dress));
 10266                           
 10267  1040  083F               	movf	I2C_WriteNBytes@address,w
 10268  1041  3191  21B9  3190   	fcall	_I2C_Open
 10269  1044  3A00               	xorlw	0
 10270  1045  1903               	skipnz
 10271  1046  2840               	goto	l4003
 10272                           
 10273                           ;mcc_generated_files/examples/i2c_master_example.c: 114:     I2C_SetBuffer(data,len);
 10274  1047  083E               	movf	I2C_WriteNBytes@len+1,w
 10275  1048  00AA               	movwf	I2C_SetBuffer@bufferSize+1
 10276  1049  083D               	movf	I2C_WriteNBytes@len,w
 10277  104A  00A9               	movwf	I2C_SetBuffer@bufferSize
 10278  104B  083C               	movf	I2C_WriteNBytes@data,w
 10279  104C  319E  26D1  3190   	fcall	_I2C_SetBuffer
 10280                           
 10281                           ;mcc_generated_files/examples/i2c_master_example.c: 115:     I2C_SetAddressNackCallback(
      +                          ((void*)0),((void*)0));
 10282  104F  3000               	movlw	0
 10283  1050  0020               	movlb	0	; select bank0
 10284  1051  00AE               	movwf	I2C_SetAddressNackCallback@cb
 10285  1052  00AF               	movwf	I2C_SetAddressNackCallback@cb+1
 10286  1053  01B0               	clrf	I2C_SetAddressNackCallback@ptr
 10287  1054  319E  2651  3190   	fcall	_I2C_SetAddressNackCallback
 10288                           
 10289                           ;mcc_generated_files/examples/i2c_master_example.c: 116:     I2C_MasterWrite();
 10290  1057  319D  2586  3190   	fcall	_I2C_MasterWrite
 10291  105A                     l4011:	
 10292                           ;mcc_generated_files/examples/i2c_master_example.c: 117:     while(I2C_BUSY == I2C_Close
      +                          ());
 10293                           
 10294  105A  319F  2787  3190   	fcall	_I2C_Close
 10295  105D  3A01               	xorlw	1
 10296  105E  1D03               	btfss	3,2
 10297  105F  0008               	return
 10298  1060  285A               	goto	l4011
 10299  1061                     __end_of_I2C_WriteNBytes:
 10300                           
 10301                           	psect	text30
 10302  1E51                     __ptext30:	
 10303 ;; *************** function _I2C_SetAddressNackCallback *****************
 10304 ;; Defined at:
 10305 ;;		line 283 in file "mcc_generated_files/i2c_master.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;  cb              2   14[BANK0 ] PTR FTN(PTR void ,)enum 
 10308 ;;		 -> Absolute function(1), 
 10309 ;;  ptr             1   16[BANK0 ] PTR void 
 10310 ;;		 -> NULL(0), 
 10311 ;; Auto vars:     Size  Location     Type
 10312 ;;		None
 10313 ;; Return value:  Size  Location     Type
 10314 ;;                  1    wreg      void 
 10315 ;; Registers used:
 10316 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10317 ;; Tracked objects:
 10318 ;;		On entry : 1F/0
 10319 ;;		On exit  : 1F/0
 10320 ;;		Unchanged: 0/0
 10321 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10322 ;;      Params:         0       3       0       0       0       0       0       0
 10323 ;;      Locals:         0       0       0       0       0       0       0       0
 10324 ;;      Temps:          0       1       0       0       0       0       0       0
 10325 ;;      Totals:         0       4       0       0       0       0       0       0
 10326 ;;Total ram usage:        4 bytes
 10327 ;; Hardware stack levels used: 1
 10328 ;; Hardware stack levels required when called: 5
 10329 ;; This function calls:
 10330 ;;		_I2C_SetCallback
 10331 ;; This function is called by:
 10332 ;;		_I2C_WriteNBytes
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336  1E51                     _I2C_SetAddressNackCallback:	
 10337                           ;psect for function _I2C_SetAddressNackCallback
 10338                           
 10339                           
 10340                           ;mcc_generated_files/i2c_master.c: 283: void I2C_SetAddressNackCallback(i2c_callback_t c
      +                          b, void *ptr);mcc_generated_files/i2c_master.c: 284: {;mcc_generated_files/i2c_master.c:
      +                           285:     I2C_SetCallback(I2C_ADDR_NACK, cb, ptr);
 10341                           
 10342                           ;incstack = 0
 10343                           ; Regs used in _I2C_SetAddressNackCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 10344  1E51  082F               	movf	I2C_SetAddressNackCallback@cb+1,w
 10345  1E52  00AA               	movwf	I2C_SetCallback@cb+1
 10346  1E53  082E               	movf	I2C_SetAddressNackCallback@cb,w
 10347  1E54  00A9               	movwf	I2C_SetCallback@cb
 10348  1E55  0830               	movf	I2C_SetAddressNackCallback@ptr,w
 10349  1E56  00B1               	movwf	??_I2C_SetAddressNackCallback
 10350  1E57  0831               	movf	??_I2C_SetAddressNackCallback,w
 10351  1E58  00AB               	movwf	I2C_SetCallback@ptr
 10352  1E59  3002               	movlw	2
 10353  1E5A  3190  20D7         	fcall	_I2C_SetCallback
 10354  1E5C  0008               	return
 10355  1E5D                     __end_of_I2C_SetAddressNackCallback:
 10356                           
 10357                           	psect	text31
 10358  1D86                     __ptext31:	
 10359 ;; *************** function _I2C_MasterWrite *****************
 10360 ;; Defined at:
 10361 ;;		line 251 in file "mcc_generated_files/i2c_master.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;		None
 10364 ;; Auto vars:     Size  Location     Type
 10365 ;;		None
 10366 ;; Return value:  Size  Location     Type
 10367 ;;                  1    wreg      enum E355
 10368 ;; Registers used:
 10369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10370 ;; Tracked objects:
 10371 ;;		On entry : 1F/0
 10372 ;;		On exit  : 1F/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10375 ;;      Params:         0       0       0       0       0       0       0       0
 10376 ;;      Locals:         0       0       0       0       0       0       0       0
 10377 ;;      Temps:          0       0       0       0       0       0       0       0
 10378 ;;      Totals:         0       0       0       0       0       0       0       0
 10379 ;;Total ram usage:        0 bytes
 10380 ;; Hardware stack levels used: 1
 10381 ;; Hardware stack levels required when called: 11
 10382 ;; This function calls:
 10383 ;;		_I2C_MasterOperation
 10384 ;; This function is called by:
 10385 ;;		_I2C_WriteNBytes
 10386 ;; This function uses a non-reentrant model
 10387 ;;
 10388                           
 10389  1D86                     _I2C_MasterWrite:	
 10390                           ;psect for function _I2C_MasterWrite
 10391                           
 10392                           
 10393                           ;mcc_generated_files/i2c_master.c: 253:     return I2C_MasterOperation(0);;	Return value
      +                           of _I2C_MasterWrite is never used
 10394                           
 10395                           ;incstack = 0
 10396                           ; Regs used in _I2C_MasterWrite: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10397  1D86  3000               	movlw	0
 10398  1D87  319F  27A3         	fcall	_I2C_MasterOperation
 10399  1D89  0008               	return
 10400  1D8A                     __end_of_I2C_MasterWrite:
 10401                           
 10402                           	psect	text32
 10403  1E79                     __ptext32:	
 10404 ;; *************** function _MCP3422_Read *****************
 10405 ;; Defined at:
 10406 ;;		line 108 in file "main.c"
 10407 ;; Parameters:    Size  Location     Type
 10408 ;;  data            1    wreg     PTR unsigned char 
 10409 ;;		 -> MCP3422_ReadVoltage@data(3), 
 10410 ;;  count           1   32[BANK0 ] unsigned char 
 10411 ;; Auto vars:     Size  Location     Type
 10412 ;;  data            1   36[BANK0 ] PTR unsigned char 
 10413 ;;		 -> MCP3422_ReadVoltage@data(3), 
 10414 ;; Return value:  Size  Location     Type
 10415 ;;                  1    wreg      void 
 10416 ;; Registers used:
 10417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10418 ;; Tracked objects:
 10419 ;;		On entry : 1F/0
 10420 ;;		On exit  : 1F/0
 10421 ;;		Unchanged: 0/0
 10422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10423 ;;      Params:         0       1       0       0       0       0       0       0
 10424 ;;      Locals:         0       1       0       0       0       0       0       0
 10425 ;;      Temps:          0       3       0       0       0       0       0       0
 10426 ;;      Totals:         0       5       0       0       0       0       0       0
 10427 ;;Total ram usage:        5 bytes
 10428 ;; Hardware stack levels used: 1
 10429 ;; Hardware stack levels required when called: 13
 10430 ;; This function calls:
 10431 ;;		_I2C_ReadNBytes
 10432 ;; This function is called by:
 10433 ;;		_MCP3422_ReadVoltage
 10434 ;; This function uses a non-reentrant model
 10435 ;;
 10436                           
 10437  1E79                     _MCP3422_Read:	
 10438                           ;psect for function _MCP3422_Read
 10439                           
 10440                           
 10441                           ;incstack = 0
 10442                           ; Regs used in _MCP3422_Read: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10443                           ;MCP3422_Read@data stored from wreg
 10444  1E79  00C4               	movwf	MCP3422_Read@data
 10445                           
 10446                           ;main.c: 108: static void MCP3422_Read(uint8_t *data, uint8_t count);main.c: 109: {;main
      +                          .c: 110:     I2C_ReadNBytes(0x68, data, count);
 10447  1E7A  0844               	movf	MCP3422_Read@data,w
 10448  1E7B  00C1               	movwf	??_MCP3422_Read
 10449  1E7C  0841               	movf	??_MCP3422_Read,w
 10450  1E7D  00BC               	movwf	I2C_ReadNBytes@data
 10451  1E7E  0840               	movf	MCP3422_Read@count,w
 10452  1E7F  00C2               	movwf	??_MCP3422_Read+1
 10453  1E80  01C3               	clrf	??_MCP3422_Read+2
 10454  1E81  0842               	movf	??_MCP3422_Read+1,w
 10455  1E82  00BD               	movwf	I2C_ReadNBytes@len
 10456  1E83  0843               	movf	??_MCP3422_Read+2,w
 10457  1E84  00BE               	movwf	I2C_ReadNBytes@len+1
 10458  1E85  3068               	movlw	104
 10459  1E86  319F  276D         	fcall	_I2C_ReadNBytes
 10460  1E88  0008               	return
 10461  1E89                     __end_of_MCP3422_Read:
 10462                           
 10463                           	psect	text33
 10464  1F6D                     __ptext33:	
 10465 ;; *************** function _I2C_ReadNBytes *****************
 10466 ;; Defined at:
 10467 ;;		line 120 in file "mcc_generated_files/examples/i2c_master_example.c"
 10468 ;; Parameters:    Size  Location     Type
 10469 ;;  address         1    wreg     unsigned char 
 10470 ;;  data            1   28[BANK0 ] PTR unsigned char 
 10471 ;;		 -> MCP3422_ReadVoltage@data(3), 
 10472 ;;  len             2   29[BANK0 ] unsigned int 
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;  address         1   31[BANK0 ] unsigned char 
 10475 ;; Return value:  Size  Location     Type
 10476 ;;                  1    wreg      void 
 10477 ;; Registers used:
 10478 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10479 ;; Tracked objects:
 10480 ;;		On entry : 1F/0
 10481 ;;		On exit  : 1F/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10484 ;;      Params:         0       3       0       0       0       0       0       0
 10485 ;;      Locals:         0       1       0       0       0       0       0       0
 10486 ;;      Temps:          0       0       0       0       0       0       0       0
 10487 ;;      Totals:         0       4       0       0       0       0       0       0
 10488 ;;Total ram usage:        4 bytes
 10489 ;; Hardware stack levels used: 1
 10490 ;; Hardware stack levels required when called: 12
 10491 ;; This function calls:
 10492 ;;		_I2C_Close
 10493 ;;		_I2C_MasterRead
 10494 ;;		_I2C_Open
 10495 ;;		_I2C_SetBuffer
 10496 ;; This function is called by:
 10497 ;;		_MCP3422_Read
 10498 ;; This function uses a non-reentrant model
 10499 ;;
 10500                           
 10501  1F6D                     _I2C_ReadNBytes:	
 10502                           ;psect for function _I2C_ReadNBytes
 10503                           
 10504                           
 10505                           ;incstack = 0
 10506                           ; Regs used in _I2C_ReadNBytes: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10507                           ;I2C_ReadNBytes@address stored from wreg
 10508  1F6D  00BF               	movwf	I2C_ReadNBytes@address
 10509  1F6E                     l4015:	
 10510                           ;mcc_generated_files/examples/i2c_master_example.c: 120: void I2C_ReadNBytes(i2c_address
      +                          _t address, uint8_t *data, size_t len);mcc_generated_files/examples/i2c_master_example.c
      +                          : 121: {;mcc_generated_files/examples/i2c_master_example.c: 122:     while(!I2C_Open(add
      +                          ress));
 10511                           
 10512  1F6E  083F               	movf	I2C_ReadNBytes@address,w
 10513  1F6F  3191  21B9  319F   	fcall	_I2C_Open
 10514  1F72  3A00               	xorlw	0
 10515  1F73  1903               	skipnz
 10516  1F74  2F6E               	goto	l4015
 10517                           
 10518                           ;mcc_generated_files/examples/i2c_master_example.c: 123:     I2C_SetBuffer(data,len);
 10519  1F75  083E               	movf	I2C_ReadNBytes@len+1,w
 10520  1F76  00AA               	movwf	I2C_SetBuffer@bufferSize+1
 10521  1F77  083D               	movf	I2C_ReadNBytes@len,w
 10522  1F78  00A9               	movwf	I2C_SetBuffer@bufferSize
 10523  1F79  083C               	movf	I2C_ReadNBytes@data,w
 10524  1F7A  319E  26D1  319F   	fcall	_I2C_SetBuffer
 10525                           
 10526                           ;mcc_generated_files/examples/i2c_master_example.c: 124:     I2C_MasterRead();
 10527  1F7D  319D  2582  319F   	fcall	_I2C_MasterRead
 10528  1F80                     l4021:	
 10529                           ;mcc_generated_files/examples/i2c_master_example.c: 125:     while(I2C_BUSY == I2C_Close
      +                          ());
 10530                           
 10531  1F80  319F  2787  319F   	fcall	_I2C_Close
 10532  1F83  3A01               	xorlw	1
 10533  1F84  1D03               	btfss	3,2
 10534  1F85  0008               	return
 10535  1F86  2F80               	goto	l4021
 10536  1F87                     __end_of_I2C_ReadNBytes:
 10537                           
 10538                           	psect	text34
 10539  11B9                     __ptext34:	
 10540 ;; *************** function _I2C_Open *****************
 10541 ;; Defined at:
 10542 ;;		line 176 in file "mcc_generated_files/i2c_master.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;  address         1    wreg     unsigned char 
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;  address         1   10[BANK0 ] unsigned char 
 10547 ;;  returnValue     1   11[BANK0 ] enum E355
 10548 ;; Return value:  Size  Location     Type
 10549 ;;                  1    wreg      enum E355
 10550 ;; Registers used:
 10551 ;;		wreg, status,2, status,0, pclath, cstack
 10552 ;; Tracked objects:
 10553 ;;		On entry : 1F/0
 10554 ;;		On exit  : 1F/0
 10555 ;;		Unchanged: 0/0
 10556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10557 ;;      Params:         0       0       0       0       0       0       0       0
 10558 ;;      Locals:         0       2       0       0       0       0       0       0
 10559 ;;      Temps:          0       1       0       0       0       0       0       0
 10560 ;;      Totals:         0       3       0       0       0       0       0       0
 10561 ;;Total ram usage:        3 bytes
 10562 ;; Hardware stack levels used: 1
 10563 ;; Hardware stack levels required when called: 5
 10564 ;; This function calls:
 10565 ;;		_I2C_MasterClearIrq
 10566 ;;		_I2C_MasterOpen
 10567 ;; This function is called by:
 10568 ;;		_I2C_WriteNBytes
 10569 ;;		_I2C_ReadNBytes
 10570 ;; This function uses a non-reentrant model
 10571 ;;
 10572                           
 10573  11B9                     _I2C_Open:	
 10574                           ;psect for function _I2C_Open
 10575                           
 10576                           
 10577                           ;incstack = 0
 10578                           ; Regs used in _I2C_Open: [wreg+status,2+status,0+pclath+cstack]
 10579                           ;I2C_Open@address stored from wreg
 10580  11B9  00AA               	movwf	I2C_Open@address
 10581                           
 10582                           ;mcc_generated_files/i2c_master.c: 176: i2c_error_t I2C_Open(i2c_address_t address);mcc_
      +                          generated_files/i2c_master.c: 177: {;mcc_generated_files/i2c_master.c: 178:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
 10583  11BA  01AB               	clrf	I2C_Open@returnValue
 10584  11BB  0AAB               	incf	I2C_Open@returnValue,f
 10585                           
 10586                           ;mcc_generated_files/i2c_master.c: 180:     if(!I2C_Status.inUse)
 10587  11BC  0024               	movlb	4	; select bank4
 10588  11BD  193C               	btfsc	(_I2C_Status^(0+512)+28),2
 10589  11BE  29F3               	goto	l302
 10590                           
 10591                           ;mcc_generated_files/i2c_master.c: 181:     {;mcc_generated_files/i2c_master.c: 182:    
      +                               I2C_Status.address = address;
 10592  11BF  0020               	movlb	0	; select bank0
 10593  11C0  082A               	movf	I2C_Open@address,w
 10594  11C1  00A9               	movwf	??_I2C_Open
 10595  11C2  0829               	movf	??_I2C_Open,w
 10596  11C3  0024               	movlb	4	; select bank4
 10597  11C4  00B6               	movwf	(_I2C_Status^(0+512)+22)
 10598                           
 10599                           ;mcc_generated_files/i2c_master.c: 183:         I2C_Status.busy = 0;
 10600  11C5  10BC               	bcf	(_I2C_Status^(0+512)+28),1
 10601                           
 10602                           ;mcc_generated_files/i2c_master.c: 184:         I2C_Status.inUse = 1;
 10603  11C6  153C               	bsf	(_I2C_Status^(0+512)+28),2
 10604                           
 10605                           ;mcc_generated_files/i2c_master.c: 185:         I2C_Status.addressNackCheck = 0;
 10606  11C7  103C               	bcf	(_I2C_Status^(0+512)+28),0
 10607                           
 10608                           ;mcc_generated_files/i2c_master.c: 186:         I2C_Status.state = I2C_RESET;
 10609  11C8  300E               	movlw	14
 10610  11C9  0020               	movlb	0	; select bank0
 10611  11CA  00A9               	movwf	??_I2C_Open
 10612  11CB  0829               	movf	??_I2C_Open,w
 10613  11CC  0024               	movlb	4	; select bank4
 10614  11CD  00BA               	movwf	(_I2C_Status^(0+512)+26)
 10615                           
 10616                           ;mcc_generated_files/i2c_master.c: 187:         I2C_Status.time_out_value = 500;
 10617  11CE  30F4               	movlw	244
 10618  11CF  00B4               	movwf	(_I2C_Status^(0+512)+20)
 10619  11D0  3001               	movlw	1
 10620  11D1  00B5               	movwf	(_I2C_Status^(0+512)+21)
 10621                           
 10622                           ;mcc_generated_files/i2c_master.c: 188:         I2C_Status.bufferFree = 1;
 10623  11D2  15BC               	bsf	(_I2C_Status^(0+512)+28),3
 10624                           
 10625                           ;mcc_generated_files/i2c_master.c: 191:         I2C_Status.callbackTable[I2C_DATA_COMPLE
      +                          TE]=I2C_CallbackReturnStop;
 10626  11D3  3047               	movlw	low _I2C_CallbackReturnStop
 10627  11D4  00A0               	movwf	_I2C_Status^(0+512)
 10628  11D5  301D               	movlw	high _I2C_CallbackReturnStop
 10629  11D6  00A1               	movwf	(_I2C_Status^(0+512)+1)
 10630                           
 10631                           ;mcc_generated_files/i2c_master.c: 192:         I2C_Status.callbackPayload[I2C_DATA_COMP
      +                          LETE] = ((void*)0);
 10632  11D7  01AC               	clrf	(low ((_I2C_Status| (0+512)+12)))^0
 10633                           
 10634                           ;mcc_generated_files/i2c_master.c: 193:         I2C_Status.callbackTable[I2C_WRITE_COLLI
      +                          SION]=I2C_CallbackReturnStop;
 10635  11D8  3047               	movlw	low _I2C_CallbackReturnStop
 10636  11D9  00A2               	movwf	(low ((_I2C_Status| (0+512)+2)))^0
 10637  11DA  301D               	movlw	high _I2C_CallbackReturnStop
 10638  11DB  00A3               	movwf	((low ((_I2C_Status| (0+512)+2)))^0+1)
 10639                           
 10640                           ;mcc_generated_files/i2c_master.c: 194:         I2C_Status.callbackPayload[I2C_WRITE_COL
      +                          LISION] = ((void*)0);
 10641  11DC  01AD               	clrf	(low ((_I2C_Status| (0+512)+13)))^0
 10642                           
 10643                           ;mcc_generated_files/i2c_master.c: 195:         I2C_Status.callbackTable[I2C_ADDR_NACK]=
      +                          I2C_CallbackReturnStop;
 10644  11DD  3047               	movlw	low _I2C_CallbackReturnStop
 10645  11DE  00A4               	movwf	(low ((_I2C_Status| (0+512)+4)))^0
 10646  11DF  301D               	movlw	high _I2C_CallbackReturnStop
 10647  11E0  00A5               	movwf	((low ((_I2C_Status| (0+512)+4)))^0+1)
 10648                           
 10649                           ;mcc_generated_files/i2c_master.c: 196:         I2C_Status.callbackPayload[I2C_ADDR_NACK
      +                          ] = ((void*)0);
 10650  11E1  01AE               	clrf	(low ((_I2C_Status| (0+512)+14)))^0
 10651                           
 10652                           ;mcc_generated_files/i2c_master.c: 197:         I2C_Status.callbackTable[I2C_DATA_NACK]=
      +                          I2C_CallbackReturnStop;
 10653  11E2  3047               	movlw	low _I2C_CallbackReturnStop
 10654  11E3  00A6               	movwf	(low ((_I2C_Status| (0+512)+6)))^0
 10655  11E4  301D               	movlw	high _I2C_CallbackReturnStop
 10656  11E5  00A7               	movwf	((low ((_I2C_Status| (0+512)+6)))^0+1)
 10657                           
 10658                           ;mcc_generated_files/i2c_master.c: 198:         I2C_Status.callbackPayload[I2C_DATA_NACK
      +                          ] = ((void*)0);
 10659  11E6  01AF               	clrf	(low ((_I2C_Status| (0+512)+15)))^0
 10660                           
 10661                           ;mcc_generated_files/i2c_master.c: 199:         I2C_Status.callbackTable[I2C_TIMEOUT]=I2
      +                          C_CallbackReturnReset;
 10662  11E7  3049               	movlw	low _I2C_CallbackReturnReset
 10663  11E8  00A8               	movwf	(low ((_I2C_Status| (0+512)+8)))^0
 10664  11E9  301D               	movlw	high _I2C_CallbackReturnReset
 10665  11EA  00A9               	movwf	((low ((_I2C_Status| (0+512)+8)))^0+1)
 10666                           
 10667                           ;mcc_generated_files/i2c_master.c: 200:         I2C_Status.callbackPayload[I2C_TIMEOUT] 
      +                          = ((void*)0);
 10668  11EB  01B0               	clrf	(low ((_I2C_Status| (0+512)+16)))^0
 10669                           
 10670                           ;mcc_generated_files/i2c_master.c: 202:         I2C_MasterClearIrq();
 10671  11EC  319D  254F  3191   	fcall	_I2C_MasterClearIrq
 10672                           
 10673                           ;mcc_generated_files/i2c_master.c: 203:         I2C_MasterOpen();
 10674  11EF  319E  2645         	fcall	_I2C_MasterOpen
 10675                           
 10676                           ;mcc_generated_files/i2c_master.c: 204:         returnValue = I2C_NOERR;
 10677  11F1  0020               	movlb	0	; select bank0
 10678  11F2  01AB               	clrf	I2C_Open@returnValue
 10679  11F3                     l302:	
 10680                           ;mcc_generated_files/i2c_master.c: 205:     }
 10681                           
 10682                           
 10683                           ;mcc_generated_files/i2c_master.c: 206:     return returnValue;
 10684  11F3  0020               	movlb	0	; select bank0
 10685  11F4  082B               	movf	I2C_Open@returnValue,w
 10686  11F5  0008               	return
 10687  11F6                     __end_of_I2C_Open:
 10688                           
 10689                           	psect	text35
 10690  1E45                     __ptext35:	
 10691 ;; *************** function _I2C_MasterOpen *****************
 10692 ;; Defined at:
 10693 ;;		line 543 in file "mcc_generated_files/i2c_master.c"
 10694 ;; Parameters:    Size  Location     Type
 10695 ;;		None
 10696 ;; Auto vars:     Size  Location     Type
 10697 ;;		None
 10698 ;; Return value:  Size  Location     Type
 10699 ;;                  1    wreg      _Bool 
 10700 ;; Registers used:
 10701 ;;		wreg, status,2
 10702 ;; Tracked objects:
 10703 ;;		On entry : 1F/0
 10704 ;;		On exit  : 1F/4
 10705 ;;		Unchanged: 0/0
 10706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10707 ;;      Params:         0       0       0       0       0       0       0       0
 10708 ;;      Locals:         0       0       0       0       0       0       0       0
 10709 ;;      Temps:          0       0       0       0       0       0       0       0
 10710 ;;      Totals:         0       0       0       0       0       0       0       0
 10711 ;;Total ram usage:        0 bytes
 10712 ;; Hardware stack levels used: 1
 10713 ;; Hardware stack levels required when called: 4
 10714 ;; This function calls:
 10715 ;;		Nothing
 10716 ;; This function is called by:
 10717 ;;		_I2C_Open
 10718 ;; This function uses a non-reentrant model
 10719 ;;
 10720                           
 10721  1E45                     _I2C_MasterOpen:	
 10722                           ;psect for function _I2C_MasterOpen
 10723                           
 10724                           
 10725                           ;mcc_generated_files/i2c_master.c: 545:     if(!SSP1CON1bits.SSPEN)
 10726                           
 10727                           ;incstack = 0
 10728                           ; Regs used in _I2C_MasterOpen: [wreg+status,2]
 10729  1E45  0024               	movlb	4	; select bank4
 10730  1E46  1A95               	btfsc	21,5	;volatile
 10731  1E47  0008               	return
 10732                           
 10733                           ;mcc_generated_files/i2c_master.c: 546:     {;mcc_generated_files/i2c_master.c: 547:    
      +                               SSP1STAT = 0x80;
 10734  1E48  3080               	movlw	128
 10735  1E49  0094               	movwf	20	;volatile
 10736                           
 10737                           ;mcc_generated_files/i2c_master.c: 548:         SSP1CON1 = 0x08;
 10738  1E4A  3008               	movlw	8
 10739  1E4B  0095               	movwf	21	;volatile
 10740                           
 10741                           ;mcc_generated_files/i2c_master.c: 549:         SSP1CON2 = 0x00;
 10742  1E4C  0196               	clrf	22	;volatile
 10743                           
 10744                           ;mcc_generated_files/i2c_master.c: 550:         SSP1ADD = 0x13;
 10745  1E4D  3013               	movlw	19
 10746  1E4E  0092               	movwf	18	;volatile
 10747                           
 10748                           ;mcc_generated_files/i2c_master.c: 551:         SSP1CON1bits.SSPEN = 1;
 10749  1E4F  1695               	bsf	21,5	;volatile
 10750  1E50  0008               	return
 10751  1E51                     __end_of_I2C_MasterOpen:
 10752                           
 10753                           	psect	text36
 10754  1D82                     __ptext36:	
 10755 ;; *************** function _I2C_MasterRead *****************
 10756 ;; Defined at:
 10757 ;;		line 246 in file "mcc_generated_files/i2c_master.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;		None
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;		None
 10762 ;; Return value:  Size  Location     Type
 10763 ;;                  1    wreg      enum E355
 10764 ;; Registers used:
 10765 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10766 ;; Tracked objects:
 10767 ;;		On entry : 1F/4
 10768 ;;		On exit  : 1F/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10771 ;;      Params:         0       0       0       0       0       0       0       0
 10772 ;;      Locals:         0       0       0       0       0       0       0       0
 10773 ;;      Temps:          0       0       0       0       0       0       0       0
 10774 ;;      Totals:         0       0       0       0       0       0       0       0
 10775 ;;Total ram usage:        0 bytes
 10776 ;; Hardware stack levels used: 1
 10777 ;; Hardware stack levels required when called: 11
 10778 ;; This function calls:
 10779 ;;		_I2C_MasterOperation
 10780 ;; This function is called by:
 10781 ;;		_I2C_ReadNBytes
 10782 ;; This function uses a non-reentrant model
 10783 ;;
 10784                           
 10785  1D82                     _I2C_MasterRead:	
 10786                           ;psect for function _I2C_MasterRead
 10787                           
 10788                           
 10789                           ;mcc_generated_files/i2c_master.c: 248:     return I2C_MasterOperation(1);;	Return value
      +                           of _I2C_MasterRead is never used
 10790                           
 10791                           ;incstack = 0
 10792                           ; Regs used in _I2C_MasterRead: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10793  1D82  3001               	movlw	1
 10794  1D83  319F  27A3         	fcall	_I2C_MasterOperation
 10795  1D85  0008               	return
 10796  1D86                     __end_of_I2C_MasterRead:
 10797                           
 10798                           	psect	text37
 10799  1FA3                     __ptext37:	
 10800 ;; *************** function _I2C_MasterOperation *****************
 10801 ;; Defined at:
 10802 ;;		line 224 in file "mcc_generated_files/i2c_master.c"
 10803 ;; Parameters:    Size  Location     Type
 10804 ;;  read            1    wreg     _Bool 
 10805 ;; Auto vars:     Size  Location     Type
 10806 ;;  read            1   26[BANK0 ] _Bool 
 10807 ;;  returnValue     1   27[BANK0 ] enum E355
 10808 ;; Return value:  Size  Location     Type
 10809 ;;                  1    wreg      enum E355
 10810 ;; Registers used:
 10811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10812 ;; Tracked objects:
 10813 ;;		On entry : 1B/0
 10814 ;;		On exit  : 1F/0
 10815 ;;		Unchanged: 0/0
 10816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10817 ;;      Params:         0       0       0       0       0       0       0       0
 10818 ;;      Locals:         0       2       0       0       0       0       0       0
 10819 ;;      Temps:          0       1       0       0       0       0       0       0
 10820 ;;      Totals:         0       3       0       0       0       0       0       0
 10821 ;;Total ram usage:        3 bytes
 10822 ;; Hardware stack levels used: 1
 10823 ;; Hardware stack levels required when called: 10
 10824 ;; This function calls:
 10825 ;;		_I2C_MasterStart
 10826 ;;		_I2C_Poller
 10827 ;; This function is called by:
 10828 ;;		_I2C_MasterRead
 10829 ;;		_I2C_MasterWrite
 10830 ;; This function uses a non-reentrant model
 10831 ;;
 10832                           
 10833  1FA3                     _I2C_MasterOperation:	
 10834                           ;psect for function _I2C_MasterOperation
 10835                           
 10836                           
 10837                           ;incstack = 0
 10838                           ; Regs used in _I2C_MasterOperation: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10839                           ;I2C_MasterOperation@read stored from wreg
 10840  1FA3  0020               	movlb	0	; select bank0
 10841  1FA4  00BA               	movwf	I2C_MasterOperation@read
 10842                           
 10843                           ;mcc_generated_files/i2c_master.c: 224: i2c_error_t I2C_MasterOperation(_Bool read);mcc_
      +                          generated_files/i2c_master.c: 225: {;mcc_generated_files/i2c_master.c: 226:     i2c_erro
      +                          r_t returnValue = I2C_BUSY;
 10844  1FA5  01BB               	clrf	I2C_MasterOperation@returnValue
 10845  1FA6  0ABB               	incf	I2C_MasterOperation@returnValue,f
 10846                           
 10847                           ;mcc_generated_files/i2c_master.c: 227:     if(!I2C_Status.busy)
 10848  1FA7  0024               	movlb	4	; select bank4
 10849  1FA8  18BC               	btfsc	(_I2C_Status^(0+512)+28),1
 10850  1FA9  2FBE               	goto	l3729
 10851                           
 10852                           ;mcc_generated_files/i2c_master.c: 228:     {;mcc_generated_files/i2c_master.c: 229:    
      +                               I2C_Status.busy = 1;
 10853  1FAA  14BC               	bsf	(_I2C_Status^(0+512)+28),1
 10854                           
 10855                           ;mcc_generated_files/i2c_master.c: 230:         returnValue = I2C_NOERR;
 10856  1FAB  0020               	movlb	0	; select bank0
 10857  1FAC  01BB               	clrf	I2C_MasterOperation@returnValue
 10858                           
 10859                           ;mcc_generated_files/i2c_master.c: 232:         if(read)
 10860  1FAD  083A               	movf	I2C_MasterOperation@read,w
 10861  1FAE  1903               	btfsc	3,2
 10862  1FAF  2FB4               	goto	l3723
 10863                           
 10864                           ;mcc_generated_files/i2c_master.c: 233:         {;mcc_generated_files/i2c_master.c: 234:
      +                                       I2C_Status.state = I2C_SEND_ADR_READ;
 10865  1FB0  0024               	movlb	4	; select bank4
 10866  1FB1  01BA               	clrf	(_I2C_Status^(0+512)+26)
 10867  1FB2  0ABA               	incf	(_I2C_Status^(0+512)+26),f
 10868                           
 10869                           ;mcc_generated_files/i2c_master.c: 235:         }
 10870  1FB3  2FB9               	goto	l3725
 10871  1FB4                     l3723:
 10872                           
 10873                           ;mcc_generated_files/i2c_master.c: 237:         {;mcc_generated_files/i2c_master.c: 238:
      +                                       I2C_Status.state = I2C_SEND_ADR_WRITE;
 10874  1FB4  3002               	movlw	2
 10875  1FB5  00B9               	movwf	??_I2C_MasterOperation
 10876  1FB6  0839               	movf	??_I2C_MasterOperation,w
 10877  1FB7  0024               	movlb	4	; select bank4
 10878  1FB8  00BA               	movwf	(_I2C_Status^(0+512)+26)
 10879  1FB9                     l3725:
 10880                           
 10881                           ;mcc_generated_files/i2c_master.c: 240:         I2C_MasterStart();
 10882  1FB9  319D  2545  319F   	fcall	_I2C_MasterStart
 10883                           
 10884                           ;mcc_generated_files/i2c_master.c: 241:         I2C_Poller();
 10885  1FBC  319D  25FC         	fcall	_I2C_Poller
 10886  1FBE                     l3729:
 10887                           
 10888                           ;mcc_generated_files/i2c_master.c: 243:     return returnValue;
 10889  1FBE  0020               	movlb	0	; select bank0
 10890  1FBF  083B               	movf	I2C_MasterOperation@returnValue,w
 10891  1FC0  0008               	return
 10892  1FC1                     __end_of_I2C_MasterOperation:
 10893                           
 10894                           	psect	text38
 10895  1DFC                     __ptext38:	
 10896 ;; *************** function _I2C_Poller *****************
 10897 ;; Defined at:
 10898 ;;		line 312 in file "mcc_generated_files/i2c_master.c"
 10899 ;; Parameters:    Size  Location     Type
 10900 ;;		None
 10901 ;; Auto vars:     Size  Location     Type
 10902 ;;		None
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  1    wreg      void 
 10905 ;; Registers used:
 10906 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10907 ;; Tracked objects:
 10908 ;;		On entry : 1F/4
 10909 ;;		On exit  : 1F/4
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10912 ;;      Params:         0       0       0       0       0       0       0       0
 10913 ;;      Locals:         0       0       0       0       0       0       0       0
 10914 ;;      Temps:          0       0       0       0       0       0       0       0
 10915 ;;      Totals:         0       0       0       0       0       0       0       0
 10916 ;;Total ram usage:        0 bytes
 10917 ;; Hardware stack levels used: 1
 10918 ;; Hardware stack levels required when called: 9
 10919 ;; This function calls:
 10920 ;;		_I2C_MasterFsm
 10921 ;;		_I2C_MasterWaitForEvent
 10922 ;; This function is called by:
 10923 ;;		_I2C_MasterOperation
 10924 ;; This function uses a non-reentrant model
 10925 ;;
 10926                           
 10927  1DFC                     _I2C_Poller:	
 10928                           ;psect for function _I2C_Poller
 10929                           
 10930  1DFC                     l3695:	
 10931                           ;mcc_generated_files/i2c_master.c: 314:     while(I2C_Status.busy)
 10932                           
 10933                           ;incstack = 0
 10934                           ; Regs used in _I2C_Poller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10935                           
 10936                           
 10937                           ;mcc_generated_files/i2c_master.c: 314:     while(I2C_Status.busy)
 10938  1DFC  1CBC               	btfss	(_I2C_Status^(0+512)+28),1
 10939  1DFD  0008               	return
 10940                           
 10941                           ;mcc_generated_files/i2c_master.c: 315:     {;mcc_generated_files/i2c_master.c: 316:    
      +                               I2C_MasterWaitForEvent();
 10942  1DFE  319D  2594  319D   	fcall	_I2C_MasterWaitForEvent
 10943                           
 10944                           ;mcc_generated_files/i2c_master.c: 317:         I2C_MasterFsm();
 10945  1E01  3190  20FF  319D   	fcall	_I2C_MasterFsm
 10946  1E04  2DFC               	goto	l3695
 10947  1E05                     __end_of_I2C_Poller:
 10948                           
 10949                           	psect	text39
 10950  1D94                     __ptext39:	
 10951 ;; *************** function _I2C_MasterWaitForEvent *****************
 10952 ;; Defined at:
 10953 ;;		line 650 in file "mcc_generated_files/i2c_master.c"
 10954 ;; Parameters:    Size  Location     Type
 10955 ;;		None
 10956 ;; Auto vars:     Size  Location     Type
 10957 ;;		None
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  1    wreg      void 
 10960 ;; Registers used:
 10961 ;;		None
 10962 ;; Tracked objects:
 10963 ;;		On entry : 1F/4
 10964 ;;		On exit  : 1F/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10967 ;;      Params:         0       0       0       0       0       0       0       0
 10968 ;;      Locals:         0       0       0       0       0       0       0       0
 10969 ;;      Temps:          0       0       0       0       0       0       0       0
 10970 ;;      Totals:         0       0       0       0       0       0       0       0
 10971 ;;Total ram usage:        0 bytes
 10972 ;; Hardware stack levels used: 1
 10973 ;; Hardware stack levels required when called: 4
 10974 ;; This function calls:
 10975 ;;		Nothing
 10976 ;; This function is called by:
 10977 ;;		_I2C_Poller
 10978 ;; This function uses a non-reentrant model
 10979 ;;
 10980                           
 10981  1D94                     _I2C_MasterWaitForEvent:	
 10982                           ;psect for function _I2C_MasterWaitForEvent
 10983                           
 10984  1D94                     l525:	
 10985                           ;incstack = 0
 10986                           ; Regs used in _I2C_MasterWaitForEvent: []
 10987                           ;mcc_generated_files/i2c_master.c: 652:     while(1)
 10988                           
 10989                           
 10990                           ;mcc_generated_files/i2c_master.c: 653:     {;mcc_generated_files/i2c_master.c: 654:    
      +                               if(PIR1bits.SSP1IF)
 10991  1D94  0020               	movlb	0	; select bank0
 10992  1D95  1991               	btfsc	17,3	;volatile
 10993  1D96  0008               	return
 10994  1D97  0024               	movlb	4	; select bank4
 10995  1D98  2D94               	goto	l525
 10996  1D99                     __end_of_I2C_MasterWaitForEvent:
 10997                           
 10998                           	psect	text40
 10999  10FF                     __ptext40:	
 11000 ;; *************** function _I2C_MasterFsm *****************
 11001 ;; Defined at:
 11002 ;;		line 321 in file "mcc_generated_files/i2c_master.c"
 11003 ;; Parameters:    Size  Location     Type
 11004 ;;		None
 11005 ;; Auto vars:     Size  Location     Type
 11006 ;;		None
 11007 ;; Return value:  Size  Location     Type
 11008 ;;                  1    wreg      void 
 11009 ;; Registers used:
 11010 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11011 ;; Tracked objects:
 11012 ;;		On entry : 1F/0
 11013 ;;		On exit  : 1F/4
 11014 ;;		Unchanged: 0/0
 11015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11016 ;;      Params:         0       0       0       0       0       0       0       0
 11017 ;;      Locals:         0       0       0       0       0       0       0       0
 11018 ;;      Temps:          0       3       0       0       0       0       0       0
 11019 ;;      Totals:         0       3       0       0       0       0       0       0
 11020 ;;Total ram usage:        3 bytes
 11021 ;; Hardware stack levels used: 1
 11022 ;; Hardware stack levels required when called: 8
 11023 ;; This function calls:
 11024 ;;		_I2C_DO_ADDRESS_NACK
 11025 ;;		_I2C_DO_IDLE
 11026 ;;		_I2C_DO_RCEN
 11027 ;;		_I2C_DO_RESET
 11028 ;;		_I2C_DO_RX
 11029 ;;		_I2C_DO_RX_ACK
 11030 ;;		_I2C_DO_RX_NACK_RESTART
 11031 ;;		_I2C_DO_RX_NACK_STOP
 11032 ;;		_I2C_DO_SEND_ADR_READ
 11033 ;;		_I2C_DO_SEND_ADR_WRITE
 11034 ;;		_I2C_DO_SEND_RESTART
 11035 ;;		_I2C_DO_SEND_RESTART_READ
 11036 ;;		_I2C_DO_SEND_RESTART_WRITE
 11037 ;;		_I2C_DO_SEND_STOP
 11038 ;;		_I2C_DO_TX
 11039 ;;		_I2C_DO_TX_EMPTY
 11040 ;;		_I2C_MasterClearIrq
 11041 ;;		_I2C_MasterIsNack
 11042 ;; This function is called by:
 11043 ;;		_I2C_Poller
 11044 ;; This function uses a non-reentrant model
 11045 ;;
 11046                           
 11047  10FF                     _I2C_MasterFsm:	
 11048                           ;psect for function _I2C_MasterFsm
 11049                           
 11050                           
 11051                           ;mcc_generated_files/i2c_master.c: 323:     I2C_MasterClearIrq();
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _I2C_MasterFsm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11055  10FF  319D  254F  3190   	fcall	_I2C_MasterClearIrq
 11056                           
 11057                           ;mcc_generated_files/i2c_master.c: 325:     if(I2C_Status.addressNackCheck && I2C_Master
      +                          IsNack())
 11058  1102  0024               	movlb	4	; select bank4
 11059  1103  1C3C               	btfss	(_I2C_Status^(0+512)+28),0
 11060  1104  2911               	goto	l3685
 11061  1105  319D  25AE  3190   	fcall	_I2C_MasterIsNack
 11062  1108  3A00               	xorlw	0
 11063  1109  1903               	skipnz
 11064  110A  2911               	goto	l3685
 11065                           
 11066                           ;mcc_generated_files/i2c_master.c: 326:     {;mcc_generated_files/i2c_master.c: 327:    
      +                               I2C_Status.state = I2C_ADDRESS_NACK;
 11067  110B  300F               	movlw	15
 11068  110C  0020               	movlb	0	; select bank0
 11069  110D  00B6               	movwf	??_I2C_MasterFsm
 11070  110E  0836               	movf	??_I2C_MasterFsm,w
 11071  110F  0024               	movlb	4	; select bank4
 11072  1110  00BA               	movwf	(_I2C_Status^(0+512)+26)
 11073  1111                     l3685:
 11074                           
 11075                           ;mcc_generated_files/i2c_master.c: 329:     I2C_Status.state = i2c_fsmStateTable[I2C_Sta
      +                          tus.state]();
 11076  1111  083A               	movf	(_I2C_Status^(0+512)+26),w
 11077  1112  0020               	movlb	0	; select bank0
 11078  1113  00B6               	movwf	??_I2C_MasterFsm
 11079  1114  01B7               	clrf	??_I2C_MasterFsm+1
 11080  1115  35B6               	lslf	??_I2C_MasterFsm,f
 11081  1116  0DB7               	rlf	??_I2C_MasterFsm+1,f
 11082  1117  3000               	movlw	low (_i2c_fsmStateTable| (0+32768))
 11083  1118  0736               	addwf	??_I2C_MasterFsm,w
 11084  1119  0084               	movwf	4
 11085  111A  3098               	movlw	high (_i2c_fsmStateTable| (0+32768))
 11086  111B  3D37               	addwfc	??_I2C_MasterFsm+1,w
 11087  111C  0085               	movwf	5
 11088  111D  3F01               	moviw [1]fsr0
 11089  111E  008A               	movwf	10
 11090  111F  3F00               	moviw [0]fsr0
 11091  1120  000A               	callw
 11092  1121  3190               	pagesel	$
 11093  1122  0020               	movlb	0	; select bank0
 11094  1123  00B8               	movwf	??_I2C_MasterFsm+2
 11095  1124  0838               	movf	??_I2C_MasterFsm+2,w
 11096  1125  0024               	movlb	4	; select bank4
 11097  1126  00BA               	movwf	(_I2C_Status^(0+512)+26)
 11098  1127  0008               	return
 11099  1128                     __end_of_I2C_MasterFsm:
 11100                           
 11101                           	psect	text41
 11102  1157                     __ptext41:	
 11103 ;; *************** function _I2C_DO_ADDRESS_NACK *****************
 11104 ;; Defined at:
 11105 ;;		line 500 in file "mcc_generated_files/i2c_master.c"
 11106 ;; Parameters:    Size  Location     Type
 11107 ;;		None
 11108 ;; Auto vars:     Size  Location     Type
 11109 ;;		None
 11110 ;; Return value:  Size  Location     Type
 11111 ;;                  1    wreg      enum E3885
 11112 ;; Registers used:
 11113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11114 ;; Tracked objects:
 11115 ;;		On entry : 1F/0
 11116 ;;		On exit  : 1F/4
 11117 ;;		Unchanged: 0/0
 11118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11119 ;;      Params:         0       0       0       0       0       0       0       0
 11120 ;;      Locals:         0       0       0       0       0       0       0       0
 11121 ;;      Temps:          0       3       0       0       0       0       0       0
 11122 ;;      Totals:         0       3       0       0       0       0       0       0
 11123 ;;Total ram usage:        3 bytes
 11124 ;; Hardware stack levels used: 1
 11125 ;; Hardware stack levels required when called: 7
 11126 ;; This function calls:
 11127 ;;		Absolute function
 11128 ;;		_I2C_CallbackReturnReset
 11129 ;;		_I2C_CallbackReturnStop
 11130 ;;		_I2C_DO_SEND_RESTART
 11131 ;;		_I2C_DO_SEND_STOP
 11132 ;;		_rd1RegCompleteHandler
 11133 ;;		_rd2RegCompleteHandler
 11134 ;;		_rdBlkRegCompleteHandler
 11135 ;;		_wr1RegCompleteHandler
 11136 ;;		_wr2RegCompleteHandler
 11137 ;; This function is called by:
 11138 ;;		_I2C_MasterFsm
 11139 ;; This function uses a non-reentrant model
 11140 ;;
 11141                           
 11142  1157                     _I2C_DO_ADDRESS_NACK:	
 11143                           ;psect for function _I2C_DO_ADDRESS_NACK
 11144                           
 11145                           
 11146                           ;mcc_generated_files/i2c_master.c: 502:     I2C_Status.addressNackCheck = 0;
 11147                           
 11148                           ;incstack = 0
 11149                           ; Regs used in _I2C_DO_ADDRESS_NACK: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11150  1157  0024               	movlb	4	; select bank4
 11151  1158  103C               	bcf	(_I2C_Status^(0+512)+28),0
 11152                           
 11153                           ;mcc_generated_files/i2c_master.c: 503:     I2C_Status.error = I2C_FAIL;
 11154  1159  3002               	movlw	2
 11155  115A  0020               	movlb	0	; select bank0
 11156  115B  00B3               	movwf	??_I2C_DO_ADDRESS_NACK
 11157  115C  0833               	movf	??_I2C_DO_ADDRESS_NACK,w
 11158  115D  0024               	movlb	4	; select bank4
 11159  115E  00BB               	movwf	(_I2C_Status^(0+512)+27)
 11160                           
 11161                           ;mcc_generated_files/i2c_master.c: 504:     switch(I2C_Status.callbackTable[I2C_ADDR_NAC
      +                          K](I2C_Status.callbackPayload[I2C_ADDR_NACK]))
 11162  115F  2966               	goto	l3669
 11163  1160                     l3659:
 11164                           
 11165                           ;mcc_generated_files/i2c_master.c: 508:             return I2C_DO_SEND_RESTART();
 11166  1160  319D  256E         	fcall	_I2C_DO_SEND_RESTART
 11167  1162  0008               	return
 11168  1163                     l3663:
 11169                           
 11170                           ;mcc_generated_files/i2c_master.c: 510:             return I2C_DO_SEND_STOP();
 11171  1163  319D  2572         	fcall	_I2C_DO_SEND_STOP
 11172  1165  0008               	return
 11173  1166                     l3669:
 11174  1166  082E               	movf	(low ((_I2C_Status| (0+512)+14)))^0,w
 11175  1167  0020               	movlb	0	; select bank0
 11176  1168  00B3               	movwf	??_I2C_DO_ADDRESS_NACK
 11177  1169  0833               	movf	??_I2C_DO_ADDRESS_NACK,w
 11178  116A  00B2               	movwf	I2C_CallbackReturnReset@funPtr
 11179  116B  3004               	movlw	4
 11180  116C  3E20               	addlw	(low (_I2C_Status| (0+512)))& (0+255)
 11181  116D  0086               	movwf	6
 11182  116E  3002               	movlw	2	; select bank4/5
 11183  116F  0087               	movwf	7
 11184  1170  3F41               	moviw [1]fsr1
 11185  1171  008A               	movwf	10
 11186  1172  3F40               	moviw [0]fsr1
 11187  1173  000A               	callw
 11188  1174  3191               	pagesel	$
 11189  1175  0020               	movlb	0	; select bank0
 11190  1176  00B4               	movwf	??_I2C_DO_ADDRESS_NACK+1
 11191  1177  01B5               	clrf	??_I2C_DO_ADDRESS_NACK+2
 11192                           
 11193                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11194                           ; Switch size 1, requested type "simple"
 11195                           ; Number of cases is 1, Range of values is 0 to 0
 11196                           ; switch strategies available:
 11197                           ; Name         Instructions Cycles
 11198                           ; simple_byte            4     3 (average)
 11199                           ; direct_byte            8     6 (fixed)
 11200                           ; jumptable            260     6 (fixed)
 11201                           ;	Chosen strategy is simple_byte
 11202  1178  0835               	movf	??_I2C_DO_ADDRESS_NACK+2,w
 11203  1179  3A00               	xorlw	0	; case 0
 11204  117A  1903               	skipnz
 11205  117B  297D               	goto	l6375
 11206  117C  2963               	goto	l3663
 11207  117D                     l6375:
 11208                           
 11209                           ; Switch size 1, requested type "simple"
 11210                           ; Number of cases is 2, Range of values is 2 to 3
 11211                           ; switch strategies available:
 11212                           ; Name         Instructions Cycles
 11213                           ; simple_byte            7     4 (average)
 11214                           ; direct_byte           13     9 (fixed)
 11215                           ; jumptable            263     9 (fixed)
 11216                           ;	Chosen strategy is simple_byte
 11217  117D  0834               	movf	??_I2C_DO_ADDRESS_NACK+1,w
 11218  117E  3A02               	xorlw	2	; case 2
 11219  117F  1903               	skipnz
 11220  1180  2960               	goto	l3659
 11221  1181  3A01               	xorlw	1	; case 3
 11222  1182  1903               	skipnz
 11223  1183  2960               	goto	l3659
 11224  1184  2963               	goto	l3663
 11225  1185  0008               	return
 11226  1186                     __end_of_I2C_DO_ADDRESS_NACK:
 11227                           
 11228                           	psect	text42
 11229  1D8F                     __ptext42:	
 11230 ;; *************** function _I2C_DO_RESET *****************
 11231 ;; Defined at:
 11232 ;;		line 494 in file "mcc_generated_files/i2c_master.c"
 11233 ;; Parameters:    Size  Location     Type
 11234 ;;		None
 11235 ;; Auto vars:     Size  Location     Type
 11236 ;;		None
 11237 ;; Return value:  Size  Location     Type
 11238 ;;                  1    wreg      enum E3885
 11239 ;; Registers used:
 11240 ;;		wreg, status,2
 11241 ;; Tracked objects:
 11242 ;;		On entry : 1F/0
 11243 ;;		On exit  : 1F/4
 11244 ;;		Unchanged: 0/0
 11245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11246 ;;      Params:         0       0       0       0       0       0       0       0
 11247 ;;      Locals:         0       0       0       0       0       0       0       0
 11248 ;;      Temps:          0       0       0       0       0       0       0       0
 11249 ;;      Totals:         0       0       0       0       0       0       0       0
 11250 ;;Total ram usage:        0 bytes
 11251 ;; Hardware stack levels used: 1
 11252 ;; Hardware stack levels required when called: 4
 11253 ;; This function calls:
 11254 ;;		Nothing
 11255 ;; This function is called by:
 11256 ;;		_I2C_MasterFsm
 11257 ;; This function uses a non-reentrant model
 11258 ;;
 11259                           
 11260  1D8F                     _I2C_DO_RESET:	
 11261                           ;psect for function _I2C_DO_RESET
 11262                           
 11263                           
 11264                           ;mcc_generated_files/i2c_master.c: 496:     I2C_Status.busy = 0;
 11265                           
 11266                           ;incstack = 0
 11267                           ; Regs used in _I2C_DO_RESET: [wreg+status,2]
 11268  1D8F  0024               	movlb	4	; select bank4
 11269  1D90  10BC               	bcf	(_I2C_Status^(0+512)+28),1
 11270                           
 11271                           ;mcc_generated_files/i2c_master.c: 497:     I2C_Status.error = I2C_NOERR;
 11272  1D91  01BB               	clrf	(_I2C_Status^(0+512)+27)
 11273                           
 11274                           ;mcc_generated_files/i2c_master.c: 498:     return I2C_RESET;
 11275  1D92  300E               	movlw	14
 11276  1D93  0008               	return
 11277  1D94                     __end_of_I2C_DO_RESET:
 11278                           
 11279                           	psect	text43
 11280  1D7E                     __ptext43:	
 11281 ;; *************** function _I2C_DO_RX_NACK_RESTART *****************
 11282 ;; Defined at:
 11283 ;;		line 488 in file "mcc_generated_files/i2c_master.c"
 11284 ;; Parameters:    Size  Location     Type
 11285 ;;		None
 11286 ;; Auto vars:     Size  Location     Type
 11287 ;;		None
 11288 ;; Return value:  Size  Location     Type
 11289 ;;                  1    wreg      enum E3885
 11290 ;; Registers used:
 11291 ;;		wreg, status,2, status,0, pclath, cstack
 11292 ;; Tracked objects:
 11293 ;;		On entry : 1F/0
 11294 ;;		On exit  : 1F/4
 11295 ;;		Unchanged: 0/0
 11296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11297 ;;      Params:         0       0       0       0       0       0       0       0
 11298 ;;      Locals:         0       0       0       0       0       0       0       0
 11299 ;;      Temps:          0       0       0       0       0       0       0       0
 11300 ;;      Totals:         0       0       0       0       0       0       0       0
 11301 ;;Total ram usage:        0 bytes
 11302 ;; Hardware stack levels used: 1
 11303 ;; Hardware stack levels required when called: 5
 11304 ;; This function calls:
 11305 ;;		_I2C_MasterSendNack
 11306 ;; This function is called by:
 11307 ;;		_I2C_DO_RX
 11308 ;;		_I2C_MasterFsm
 11309 ;; This function uses a non-reentrant model
 11310 ;;
 11311                           
 11312  1D7E                     _I2C_DO_RX_NACK_RESTART:	
 11313                           ;psect for function _I2C_DO_RX_NACK_RESTART
 11314                           
 11315                           
 11316                           ;mcc_generated_files/i2c_master.c: 490:     I2C_MasterSendNack();
 11317                           
 11318                           ;incstack = 0
 11319                           ; Regs used in _I2C_DO_RX_NACK_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11320  1D7E  319D  255E         	fcall	_I2C_MasterSendNack
 11321                           
 11322                           ;mcc_generated_files/i2c_master.c: 491:     return I2C_SEND_RESTART;
 11323  1D80  3009               	movlw	9
 11324  1D81  0008               	return
 11325  1D82                     __end_of_I2C_DO_RX_NACK_RESTART:
 11326                           
 11327                           	psect	text44
 11328  1D7A                     __ptext44:	
 11329 ;; *************** function _I2C_DO_RX_NACK_STOP *****************
 11330 ;; Defined at:
 11331 ;;		line 482 in file "mcc_generated_files/i2c_master.c"
 11332 ;; Parameters:    Size  Location     Type
 11333 ;;		None
 11334 ;; Auto vars:     Size  Location     Type
 11335 ;;		None
 11336 ;; Return value:  Size  Location     Type
 11337 ;;                  1    wreg      enum E3885
 11338 ;; Registers used:
 11339 ;;		wreg, status,2, status,0, pclath, cstack
 11340 ;; Tracked objects:
 11341 ;;		On entry : 1F/0
 11342 ;;		On exit  : 1F/4
 11343 ;;		Unchanged: 0/0
 11344 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11345 ;;      Params:         0       0       0       0       0       0       0       0
 11346 ;;      Locals:         0       0       0       0       0       0       0       0
 11347 ;;      Temps:          0       0       0       0       0       0       0       0
 11348 ;;      Totals:         0       0       0       0       0       0       0       0
 11349 ;;Total ram usage:        0 bytes
 11350 ;; Hardware stack levels used: 1
 11351 ;; Hardware stack levels required when called: 5
 11352 ;; This function calls:
 11353 ;;		_I2C_MasterSendNack
 11354 ;; This function is called by:
 11355 ;;		_I2C_DO_RX
 11356 ;;		_I2C_MasterFsm
 11357 ;; This function uses a non-reentrant model
 11358 ;;
 11359                           
 11360  1D7A                     _I2C_DO_RX_NACK_STOP:	
 11361                           ;psect for function _I2C_DO_RX_NACK_STOP
 11362                           
 11363                           
 11364                           ;mcc_generated_files/i2c_master.c: 484:     I2C_MasterSendNack();
 11365                           
 11366                           ;incstack = 0
 11367                           ; Regs used in _I2C_DO_RX_NACK_STOP: [wreg+status,2+status,0+pclath+cstack]
 11368  1D7A  319D  255E         	fcall	_I2C_MasterSendNack
 11369                           
 11370                           ;mcc_generated_files/i2c_master.c: 485:     return I2C_SEND_STOP;
 11371  1D7C  300A               	movlw	10
 11372  1D7D  0008               	return
 11373  1D7E                     __end_of_I2C_DO_RX_NACK_STOP:
 11374                           
 11375                           	psect	text45
 11376  1D76                     __ptext45:	
 11377 ;; *************** function _I2C_DO_RX_ACK *****************
 11378 ;; Defined at:
 11379 ;;		line 475 in file "mcc_generated_files/i2c_master.c"
 11380 ;; Parameters:    Size  Location     Type
 11381 ;;		None
 11382 ;; Auto vars:     Size  Location     Type
 11383 ;;		None
 11384 ;; Return value:  Size  Location     Type
 11385 ;;                  1    wreg      enum E3885
 11386 ;; Registers used:
 11387 ;;		wreg, status,2, status,0, pclath, cstack
 11388 ;; Tracked objects:
 11389 ;;		On entry : 1F/0
 11390 ;;		On exit  : 1F/4
 11391 ;;		Unchanged: 0/0
 11392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11393 ;;      Params:         0       0       0       0       0       0       0       0
 11394 ;;      Locals:         0       0       0       0       0       0       0       0
 11395 ;;      Temps:          0       0       0       0       0       0       0       0
 11396 ;;      Totals:         0       0       0       0       0       0       0       0
 11397 ;;Total ram usage:        0 bytes
 11398 ;; Hardware stack levels used: 1
 11399 ;; Hardware stack levels required when called: 5
 11400 ;; This function calls:
 11401 ;;		_I2C_MasterSendAck
 11402 ;; This function is called by:
 11403 ;;		_I2C_MasterFsm
 11404 ;; This function uses a non-reentrant model
 11405 ;;
 11406                           
 11407  1D76                     _I2C_DO_RX_ACK:	
 11408                           ;psect for function _I2C_DO_RX_ACK
 11409                           
 11410                           
 11411                           ;mcc_generated_files/i2c_master.c: 477:     I2C_MasterSendAck();
 11412                           
 11413                           ;incstack = 0
 11414                           ; Regs used in _I2C_DO_RX_ACK: [wreg+status,2+status,0+pclath+cstack]
 11415  1D76  319D  2562         	fcall	_I2C_MasterSendAck
 11416                           
 11417                           ;mcc_generated_files/i2c_master.c: 478:     return I2C_RCEN;
 11418  1D78  3005               	movlw	5
 11419  1D79  0008               	return
 11420  1D7A                     __end_of_I2C_DO_RX_ACK:
 11421                           
 11422                           	psect	text46
 11423  1D72                     __ptext46:	
 11424 ;; *************** function _I2C_DO_SEND_STOP *****************
 11425 ;; Defined at:
 11426 ;;		line 469 in file "mcc_generated_files/i2c_master.c"
 11427 ;; Parameters:    Size  Location     Type
 11428 ;;		None
 11429 ;; Auto vars:     Size  Location     Type
 11430 ;;		None
 11431 ;; Return value:  Size  Location     Type
 11432 ;;                  1    wreg      enum E3885
 11433 ;; Registers used:
 11434 ;;		wreg, status,2, status,0, pclath, cstack
 11435 ;; Tracked objects:
 11436 ;;		On entry : 1F/0
 11437 ;;		On exit  : 1F/4
 11438 ;;		Unchanged: 0/0
 11439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11440 ;;      Params:         0       0       0       0       0       0       0       0
 11441 ;;      Locals:         0       0       0       0       0       0       0       0
 11442 ;;      Temps:          0       0       0       0       0       0       0       0
 11443 ;;      Totals:         0       0       0       0       0       0       0       0
 11444 ;;Total ram usage:        0 bytes
 11445 ;; Hardware stack levels used: 1
 11446 ;; Hardware stack levels required when called: 5
 11447 ;; This function calls:
 11448 ;;		_I2C_MasterStop
 11449 ;; This function is called by:
 11450 ;;		_I2C_DO_TX
 11451 ;;		_I2C_DO_TX_EMPTY
 11452 ;;		_I2C_DO_ADDRESS_NACK
 11453 ;;		_I2C_MasterFsm
 11454 ;; This function uses a non-reentrant model
 11455 ;;
 11456                           
 11457  1D72                     _I2C_DO_SEND_STOP:	
 11458                           ;psect for function _I2C_DO_SEND_STOP
 11459                           
 11460                           
 11461                           ;mcc_generated_files/i2c_master.c: 471:     I2C_MasterStop();
 11462                           
 11463                           ;incstack = 0
 11464                           ; Regs used in _I2C_DO_SEND_STOP: [wreg+status,2+status,0+pclath+cstack]
 11465  1D72  319D  255B         	fcall	_I2C_MasterStop
 11466                           
 11467                           ;mcc_generated_files/i2c_master.c: 472:     return I2C_IDLE;
 11468  1D74  3000               	movlw	0
 11469  1D75  0008               	return
 11470  1D76                     __end_of_I2C_DO_SEND_STOP:
 11471                           
 11472                           	psect	text47
 11473  1D6E                     __ptext47:	
 11474 ;; *************** function _I2C_DO_SEND_RESTART *****************
 11475 ;; Defined at:
 11476 ;;		line 463 in file "mcc_generated_files/i2c_master.c"
 11477 ;; Parameters:    Size  Location     Type
 11478 ;;		None
 11479 ;; Auto vars:     Size  Location     Type
 11480 ;;		None
 11481 ;; Return value:  Size  Location     Type
 11482 ;;                  1    wreg      enum E3885
 11483 ;; Registers used:
 11484 ;;		wreg, status,2, status,0, pclath, cstack
 11485 ;; Tracked objects:
 11486 ;;		On entry : 1F/0
 11487 ;;		On exit  : 1F/4
 11488 ;;		Unchanged: 0/0
 11489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11490 ;;      Params:         0       0       0       0       0       0       0       0
 11491 ;;      Locals:         0       0       0       0       0       0       0       0
 11492 ;;      Temps:          0       0       0       0       0       0       0       0
 11493 ;;      Totals:         0       0       0       0       0       0       0       0
 11494 ;;Total ram usage:        0 bytes
 11495 ;; Hardware stack levels used: 1
 11496 ;; Hardware stack levels required when called: 5
 11497 ;; This function calls:
 11498 ;;		_I2C_MasterEnableRestart
 11499 ;; This function is called by:
 11500 ;;		_I2C_DO_TX_EMPTY
 11501 ;;		_I2C_DO_ADDRESS_NACK
 11502 ;;		_I2C_MasterFsm
 11503 ;; This function uses a non-reentrant model
 11504 ;;
 11505                           
 11506  1D6E                     _I2C_DO_SEND_RESTART:	
 11507                           ;psect for function _I2C_DO_SEND_RESTART
 11508                           
 11509                           
 11510                           ;mcc_generated_files/i2c_master.c: 465:     I2C_MasterEnableRestart();
 11511                           
 11512                           ;incstack = 0
 11513                           ; Regs used in _I2C_DO_SEND_RESTART: [wreg+status,2+status,0+pclath+cstack]
 11514  1D6E  319D  2558         	fcall	_I2C_MasterEnableRestart
 11515                           
 11516                           ;mcc_generated_files/i2c_master.c: 466:     return I2C_SEND_ADR_READ;
 11517  1D70  3001               	movlw	1
 11518  1D71  0008               	return
 11519  1D72                     __end_of_I2C_DO_SEND_RESTART:
 11520                           
 11521                           	psect	text48
 11522  1D6A                     __ptext48:	
 11523 ;; *************** function _I2C_DO_SEND_RESTART_WRITE *****************
 11524 ;; Defined at:
 11525 ;;		line 456 in file "mcc_generated_files/i2c_master.c"
 11526 ;; Parameters:    Size  Location     Type
 11527 ;;		None
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;		None
 11530 ;; Return value:  Size  Location     Type
 11531 ;;                  1    wreg      enum E3885
 11532 ;; Registers used:
 11533 ;;		wreg, status,2, status,0, pclath, cstack
 11534 ;; Tracked objects:
 11535 ;;		On entry : 1F/0
 11536 ;;		On exit  : 1F/4
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11539 ;;      Params:         0       0       0       0       0       0       0       0
 11540 ;;      Locals:         0       0       0       0       0       0       0       0
 11541 ;;      Temps:          0       0       0       0       0       0       0       0
 11542 ;;      Totals:         0       0       0       0       0       0       0       0
 11543 ;;Total ram usage:        0 bytes
 11544 ;; Hardware stack levels used: 1
 11545 ;; Hardware stack levels required when called: 5
 11546 ;; This function calls:
 11547 ;;		_I2C_MasterEnableRestart
 11548 ;; This function is called by:
 11549 ;;		_I2C_DO_TX
 11550 ;;		_I2C_MasterFsm
 11551 ;; This function uses a non-reentrant model
 11552 ;;
 11553                           
 11554  1D6A                     _I2C_DO_SEND_RESTART_WRITE:	
 11555                           ;psect for function _I2C_DO_SEND_RESTART_WRITE
 11556                           
 11557                           
 11558                           ;mcc_generated_files/i2c_master.c: 458:     I2C_MasterEnableRestart();
 11559                           
 11560                           ;incstack = 0
 11561                           ; Regs used in _I2C_DO_SEND_RESTART_WRITE: [wreg+status,2+status,0+pclath+cstack]
 11562  1D6A  319D  2558         	fcall	_I2C_MasterEnableRestart
 11563                           
 11564                           ;mcc_generated_files/i2c_master.c: 459:     return I2C_SEND_ADR_WRITE;
 11565  1D6C  3002               	movlw	2
 11566  1D6D  0008               	return
 11567  1D6E                     __end_of_I2C_DO_SEND_RESTART_WRITE:
 11568                           
 11569                           	psect	text49
 11570  1D66                     __ptext49:	
 11571 ;; *************** function _I2C_DO_SEND_RESTART_READ *****************
 11572 ;; Defined at:
 11573 ;;		line 450 in file "mcc_generated_files/i2c_master.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;		None
 11576 ;; Auto vars:     Size  Location     Type
 11577 ;;		None
 11578 ;; Return value:  Size  Location     Type
 11579 ;;                  1    wreg      enum E3885
 11580 ;; Registers used:
 11581 ;;		wreg, status,2, status,0, pclath, cstack
 11582 ;; Tracked objects:
 11583 ;;		On entry : 1F/0
 11584 ;;		On exit  : 1F/4
 11585 ;;		Unchanged: 0/0
 11586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11587 ;;      Params:         0       0       0       0       0       0       0       0
 11588 ;;      Locals:         0       0       0       0       0       0       0       0
 11589 ;;      Temps:          0       0       0       0       0       0       0       0
 11590 ;;      Totals:         0       0       0       0       0       0       0       0
 11591 ;;Total ram usage:        0 bytes
 11592 ;; Hardware stack levels used: 1
 11593 ;; Hardware stack levels required when called: 5
 11594 ;; This function calls:
 11595 ;;		_I2C_MasterEnableRestart
 11596 ;; This function is called by:
 11597 ;;		_I2C_DO_TX
 11598 ;;		_I2C_MasterFsm
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602  1D66                     _I2C_DO_SEND_RESTART_READ:	
 11603                           ;psect for function _I2C_DO_SEND_RESTART_READ
 11604                           
 11605                           
 11606                           ;mcc_generated_files/i2c_master.c: 452:     I2C_MasterEnableRestart();
 11607                           
 11608                           ;incstack = 0
 11609                           ; Regs used in _I2C_DO_SEND_RESTART_READ: [wreg+status,2+status,0+pclath+cstack]
 11610  1D66  319D  2558         	fcall	_I2C_MasterEnableRestart
 11611                           
 11612                           ;mcc_generated_files/i2c_master.c: 453:     return I2C_SEND_ADR_READ;
 11613  1D68  3001               	movlw	1
 11614  1D69  0008               	return
 11615  1D6A                     __end_of_I2C_DO_SEND_RESTART_READ:
 11616                           
 11617                           	psect	text50
 11618  1DB4                     __ptext50:	
 11619 ;; *************** function _I2C_DO_RCEN *****************
 11620 ;; Defined at:
 11621 ;;		line 402 in file "mcc_generated_files/i2c_master.c"
 11622 ;; Parameters:    Size  Location     Type
 11623 ;;		None
 11624 ;; Auto vars:     Size  Location     Type
 11625 ;;		None
 11626 ;; Return value:  Size  Location     Type
 11627 ;;                  1    wreg      enum E3885
 11628 ;; Registers used:
 11629 ;;		wreg, status,2, status,0, pclath, cstack
 11630 ;; Tracked objects:
 11631 ;;		On entry : 1F/0
 11632 ;;		On exit  : 1F/4
 11633 ;;		Unchanged: 0/0
 11634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11635 ;;      Params:         0       0       0       0       0       0       0       0
 11636 ;;      Locals:         0       0       0       0       0       0       0       0
 11637 ;;      Temps:          0       0       0       0       0       0       0       0
 11638 ;;      Totals:         0       0       0       0       0       0       0       0
 11639 ;;Total ram usage:        0 bytes
 11640 ;; Hardware stack levels used: 1
 11641 ;; Hardware stack levels required when called: 5
 11642 ;; This function calls:
 11643 ;;		_I2C_MasterStartRx
 11644 ;; This function is called by:
 11645 ;;		_I2C_MasterFsm
 11646 ;; This function uses a non-reentrant model
 11647 ;;
 11648                           
 11649  1DB4                     _I2C_DO_RCEN:	
 11650                           ;psect for function _I2C_DO_RCEN
 11651                           
 11652                           
 11653                           ;mcc_generated_files/i2c_master.c: 404:     I2C_Status.addressNackCheck = 0;
 11654                           
 11655                           ;incstack = 0
 11656                           ; Regs used in _I2C_DO_RCEN: [wreg+status,2+status,0+pclath+cstack]
 11657  1DB4  0024               	movlb	4	; select bank4
 11658  1DB5  103C               	bcf	(_I2C_Status^(0+512)+28),0
 11659                           
 11660                           ;mcc_generated_files/i2c_master.c: 405:     I2C_MasterStartRx();
 11661  1DB6  319D  254B         	fcall	_I2C_MasterStartRx
 11662                           
 11663                           ;mcc_generated_files/i2c_master.c: 406:     return I2C_RX;
 11664  1DB8  3004               	movlw	4
 11665  1DB9  0008               	return
 11666  1DBA                     __end_of_I2C_DO_RCEN:
 11667                           
 11668                           	psect	text51
 11669  07B5                     __ptext51:	
 11670 ;; *************** function _I2C_DO_RX *****************
 11671 ;; Defined at:
 11672 ;;		line 378 in file "mcc_generated_files/i2c_master.c"
 11673 ;; Parameters:    Size  Location     Type
 11674 ;;		None
 11675 ;; Auto vars:     Size  Location     Type
 11676 ;;		None
 11677 ;; Return value:  Size  Location     Type
 11678 ;;                  1    wreg      enum E3885
 11679 ;; Registers used:
 11680 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11681 ;; Tracked objects:
 11682 ;;		On entry : 1F/0
 11683 ;;		On exit  : 1F/4
 11684 ;;		Unchanged: 0/0
 11685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11686 ;;      Params:         0       0       0       0       0       0       0       0
 11687 ;;      Locals:         0       0       0       0       0       0       0       0
 11688 ;;      Temps:          0       3       0       0       0       0       0       0
 11689 ;;      Totals:         0       3       0       0       0       0       0       0
 11690 ;;Total ram usage:        3 bytes
 11691 ;; Hardware stack levels used: 1
 11692 ;; Hardware stack levels required when called: 7
 11693 ;; This function calls:
 11694 ;;		Absolute function
 11695 ;;		_I2C_CallbackReturnReset
 11696 ;;		_I2C_CallbackReturnStop
 11697 ;;		_I2C_DO_RX_NACK_RESTART
 11698 ;;		_I2C_DO_RX_NACK_STOP
 11699 ;;		_I2C_MasterGetRxData
 11700 ;;		_I2C_MasterSendAck
 11701 ;;		_rd1RegCompleteHandler
 11702 ;;		_rd2RegCompleteHandler
 11703 ;;		_rdBlkRegCompleteHandler
 11704 ;;		_wr1RegCompleteHandler
 11705 ;;		_wr2RegCompleteHandler
 11706 ;; This function is called by:
 11707 ;;		_I2C_MasterFsm
 11708 ;; This function uses a non-reentrant model
 11709 ;;
 11710                           
 11711  07B5                     _I2C_DO_RX:	
 11712                           ;psect for function _I2C_DO_RX
 11713                           
 11714                           
 11715                           ;mcc_generated_files/i2c_master.c: 380:     *I2C_Status.data_ptr++ = I2C_MasterGetRxData
      +                          ();
 11716                           
 11717                           ;incstack = 0
 11718                           ; Regs used in _I2C_DO_RX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11719  07B5  3188  2000  3187   	fcall	_I2C_MasterGetRxData
 11720  07B8  0020               	movlb	0	; select bank0
 11721  07B9  00B3               	movwf	??_I2C_DO_RX
 11722  07BA  0024               	movlb	4	; select bank4
 11723  07BB  0837               	movf	(low ((_I2C_Status| (0+512)+23)))^0,w
 11724  07BC  0086               	movwf	6
 11725  07BD  0187               	clrf	7
 11726  07BE  0020               	movlb	0	; select bank0
 11727  07BF  0833               	movf	??_I2C_DO_RX,w
 11728  07C0  0081               	movwf	1
 11729  07C1  3001               	movlw	1
 11730  07C2  00B3               	movwf	??_I2C_DO_RX
 11731  07C3  0833               	movf	??_I2C_DO_RX,w
 11732  07C4  0024               	movlb	4	; select bank4
 11733  07C5  07B7               	addwf	(low ((_I2C_Status| (0+512)+23)))^0,f
 11734                           
 11735                           ;mcc_generated_files/i2c_master.c: 381:     if(--I2C_Status.data_length)
 11736  07C6  3001               	movlw	1
 11737  07C7  02B8               	subwf	(_I2C_Status^(0+512)+24),f
 11738  07C8  3000               	movlw	0
 11739  07C9  3BB9               	subwfb	((_I2C_Status+1)^(0+512)+24),f
 11740  07CA  0838               	movf	(_I2C_Status^(0+512)+24),w
 11741  07CB  0439               	iorwf	((_I2C_Status+1)^(0+512)+24),w
 11742  07CC  1903               	btfsc	3,2
 11743  07CD  2FD2               	goto	l384
 11744                           
 11745                           ;mcc_generated_files/i2c_master.c: 382:     {;mcc_generated_files/i2c_master.c: 383:    
      +                               I2C_MasterSendAck();
 11746  07CE  319D  2562         	fcall	_I2C_MasterSendAck
 11747                           
 11748                           ;mcc_generated_files/i2c_master.c: 384:         return I2C_RCEN;
 11749  07D0  3005               	movlw	5
 11750  07D1  0008               	return
 11751  07D2                     l384:	
 11752                           ;mcc_generated_files/i2c_master.c: 386:     else
 11753                           
 11754                           
 11755                           ;mcc_generated_files/i2c_master.c: 387:     {;mcc_generated_files/i2c_master.c: 388:    
      +                               I2C_Status.bufferFree = 1;
 11756  07D2  15BC               	bsf	(_I2C_Status^(0+512)+28),3
 11757                           
 11758                           ;mcc_generated_files/i2c_master.c: 389:         switch(I2C_Status.callbackTable[I2C_DATA
      +                          _COMPLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
 11759  07D3  2FDA               	goto	l3603
 11760  07D4                     l3593:
 11761                           
 11762                           ;mcc_generated_files/i2c_master.c: 393:                 return I2C_DO_RX_NACK_RESTART();
 11763  07D4  319D  257E         	fcall	_I2C_DO_RX_NACK_RESTART
 11764  07D6  0008               	return
 11765  07D7                     l3597:
 11766                           
 11767                           ;mcc_generated_files/i2c_master.c: 397:                 return I2C_DO_RX_NACK_STOP();
 11768  07D7  319D  257A         	fcall	_I2C_DO_RX_NACK_STOP
 11769  07D9  0008               	return
 11770  07DA                     l3603:
 11771  07DA  082C               	movf	(low ((_I2C_Status| (0+512)+12)))^0,w
 11772  07DB  0020               	movlb	0	; select bank0
 11773  07DC  00B3               	movwf	??_I2C_DO_RX
 11774  07DD  0833               	movf	??_I2C_DO_RX,w
 11775  07DE  00B2               	movwf	I2C_CallbackReturnReset@funPtr
 11776  07DF  0024               	movlb	4	; select bank4
 11777  07E0  0821               	movf	(_I2C_Status+1)^(0+512),w
 11778  07E1  008A               	movwf	10
 11779  07E2  0820               	movf	_I2C_Status^(0+512),w
 11780  07E3  000A               	callw
 11781  07E4  3187               	pagesel	$
 11782  07E5  0020               	movlb	0	; select bank0
 11783  07E6  00B4               	movwf	??_I2C_DO_RX+1
 11784  07E7  01B5               	clrf	??_I2C_DO_RX+2
 11785                           
 11786                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11787                           ; Switch size 1, requested type "simple"
 11788                           ; Number of cases is 1, Range of values is 0 to 0
 11789                           ; switch strategies available:
 11790                           ; Name         Instructions Cycles
 11791                           ; simple_byte            4     3 (average)
 11792                           ; direct_byte            8     6 (fixed)
 11793                           ; jumptable            260     6 (fixed)
 11794                           ;	Chosen strategy is simple_byte
 11795  07E8  0835               	movf	??_I2C_DO_RX+2,w
 11796  07E9  3A00               	xorlw	0	; case 0
 11797  07EA  1903               	skipnz
 11798  07EB  2FED               	goto	l6377
 11799  07EC  2FD7               	goto	l3597
 11800  07ED                     l6377:
 11801                           
 11802                           ; Switch size 1, requested type "simple"
 11803                           ; Number of cases is 4, Range of values is 1 to 4
 11804                           ; switch strategies available:
 11805                           ; Name         Instructions Cycles
 11806                           ; simple_byte           13     7 (average)
 11807                           ; direct_byte           17     9 (fixed)
 11808                           ; jumptable            263     9 (fixed)
 11809                           ;	Chosen strategy is simple_byte
 11810  07ED  0834               	movf	??_I2C_DO_RX+1,w
 11811  07EE  3A01               	xorlw	1	; case 1
 11812  07EF  1903               	skipnz
 11813  07F0  2FD7               	goto	l3597
 11814  07F1  3A03               	xorlw	3	; case 2
 11815  07F2  1903               	skipnz
 11816  07F3  2FD4               	goto	l3593
 11817  07F4  3A01               	xorlw	1	; case 3
 11818  07F5  1903               	skipnz
 11819  07F6  2FD4               	goto	l3593
 11820  07F7  3A07               	xorlw	7	; case 4
 11821  07F8  1903               	skipnz
 11822  07F9  2FD7               	goto	l3597
 11823  07FA  2FD7               	goto	l3597
 11824  07FB  0008               	return
 11825  07FC                     __end_of_I2C_DO_RX:
 11826                           
 11827                           	psect	text52
 11828  0803                     __ptext52:	
 11829 ;; *************** function _I2C_DO_TX *****************
 11830 ;; Defined at:
 11831 ;;		line 354 in file "mcc_generated_files/i2c_master.c"
 11832 ;; Parameters:    Size  Location     Type
 11833 ;;		None
 11834 ;; Auto vars:     Size  Location     Type
 11835 ;;		None
 11836 ;; Return value:  Size  Location     Type
 11837 ;;                  1    wreg      enum E3885
 11838 ;; Registers used:
 11839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11840 ;; Tracked objects:
 11841 ;;		On entry : 1F/0
 11842 ;;		On exit  : 1F/4
 11843 ;;		Unchanged: 0/0
 11844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11845 ;;      Params:         0       0       0       0       0       0       0       0
 11846 ;;      Locals:         0       0       0       0       0       0       0       0
 11847 ;;      Temps:          0       3       0       0       0       0       0       0
 11848 ;;      Totals:         0       3       0       0       0       0       0       0
 11849 ;;Total ram usage:        3 bytes
 11850 ;; Hardware stack levels used: 1
 11851 ;; Hardware stack levels required when called: 7
 11852 ;; This function calls:
 11853 ;;		Absolute function
 11854 ;;		_I2C_CallbackReturnReset
 11855 ;;		_I2C_CallbackReturnStop
 11856 ;;		_I2C_DO_SEND_RESTART_READ
 11857 ;;		_I2C_DO_SEND_RESTART_WRITE
 11858 ;;		_I2C_DO_SEND_STOP
 11859 ;;		_I2C_MasterIsNack
 11860 ;;		_I2C_MasterSendTxData
 11861 ;;		_rd1RegCompleteHandler
 11862 ;;		_rd2RegCompleteHandler
 11863 ;;		_rdBlkRegCompleteHandler
 11864 ;;		_wr1RegCompleteHandler
 11865 ;;		_wr2RegCompleteHandler
 11866 ;; This function is called by:
 11867 ;;		_I2C_MasterFsm
 11868 ;; This function uses a non-reentrant model
 11869 ;;
 11870                           
 11871  0803                     _I2C_DO_TX:	
 11872                           ;psect for function _I2C_DO_TX
 11873                           
 11874                           
 11875                           ;mcc_generated_files/i2c_master.c: 356:     if(I2C_MasterIsNack())
 11876                           
 11877                           ;incstack = 0
 11878                           ; Regs used in _I2C_DO_TX: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11879  0803  319D  25AE  3188   	fcall	_I2C_MasterIsNack
 11880  0806  3A00               	xorlw	0
 11881  0807  1D03               	btfss	3,2
 11882  0808  2813               	goto	l3563
 11883  0809  2838               	goto	l368
 11884  080A                     l3549:
 11885                           
 11886                           ;mcc_generated_files/i2c_master.c: 361:                 return I2C_DO_SEND_RESTART_READ(
      +                          );
 11887  080A  319D  2566         	fcall	_I2C_DO_SEND_RESTART_READ
 11888  080C  0008               	return
 11889  080D                     l3553:
 11890                           
 11891                           ;mcc_generated_files/i2c_master.c: 363:                   return I2C_DO_SEND_RESTART_WRI
      +                          TE();
 11892  080D  319D  256A         	fcall	_I2C_DO_SEND_RESTART_WRITE
 11893  080F  0008               	return
 11894  0810                     l3557:
 11895                           
 11896                           ;mcc_generated_files/i2c_master.c: 367:                 return I2C_DO_SEND_STOP();
 11897  0810  319D  2572         	fcall	_I2C_DO_SEND_STOP
 11898  0812  0008               	return
 11899  0813                     l3563:
 11900  0813  082F               	movf	(low ((_I2C_Status| (0+512)+15)))^0,w
 11901  0814  0020               	movlb	0	; select bank0
 11902  0815  00B3               	movwf	??_I2C_DO_TX
 11903  0816  0833               	movf	??_I2C_DO_TX,w
 11904  0817  00B2               	movwf	I2C_CallbackReturnReset@funPtr
 11905  0818  3006               	movlw	6
 11906  0819  3E20               	addlw	(low (_I2C_Status| (0+512)))& (0+255)
 11907  081A  0086               	movwf	6
 11908  081B  3002               	movlw	2	; select bank4/5
 11909  081C  0087               	movwf	7
 11910  081D  3F41               	moviw [1]fsr1
 11911  081E  008A               	movwf	10
 11912  081F  3F40               	moviw [0]fsr1
 11913  0820  000A               	callw
 11914  0821  3188               	pagesel	$
 11915  0822  0020               	movlb	0	; select bank0
 11916  0823  00B4               	movwf	??_I2C_DO_TX+1
 11917  0824  01B5               	clrf	??_I2C_DO_TX+2
 11918                           
 11919                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11920                           ; Switch size 1, requested type "simple"
 11921                           ; Number of cases is 1, Range of values is 0 to 0
 11922                           ; switch strategies available:
 11923                           ; Name         Instructions Cycles
 11924                           ; simple_byte            4     3 (average)
 11925                           ; direct_byte            8     6 (fixed)
 11926                           ; jumptable            260     6 (fixed)
 11927                           ;	Chosen strategy is simple_byte
 11928  0825  0835               	movf	??_I2C_DO_TX+2,w
 11929  0826  3A00               	xorlw	0	; case 0
 11930  0827  1903               	skipnz
 11931  0828  282A               	goto	l6379
 11932  0829  2810               	goto	l3557
 11933  082A                     l6379:
 11934                           
 11935                           ; Switch size 1, requested type "simple"
 11936                           ; Number of cases is 4, Range of values is 1 to 4
 11937                           ; switch strategies available:
 11938                           ; Name         Instructions Cycles
 11939                           ; simple_byte           13     7 (average)
 11940                           ; direct_byte           17     9 (fixed)
 11941                           ; jumptable            263     9 (fixed)
 11942                           ;	Chosen strategy is simple_byte
 11943  082A  0834               	movf	??_I2C_DO_TX+1,w
 11944  082B  3A01               	xorlw	1	; case 1
 11945  082C  1903               	skipnz
 11946  082D  2810               	goto	l3557
 11947  082E  3A03               	xorlw	3	; case 2
 11948  082F  1903               	skipnz
 11949  0830  280A               	goto	l3549
 11950  0831  3A01               	xorlw	1	; case 3
 11951  0832  1903               	skipnz
 11952  0833  280D               	goto	l3553
 11953  0834  3A07               	xorlw	7	; case 4
 11954  0835  1903               	skipnz
 11955  0836  2810               	goto	l3557
 11956  0837  2810               	goto	l3557
 11957  0838                     l368:	
 11958                           ;mcc_generated_files/i2c_master.c: 370:     else
 11959                           
 11960                           
 11961                           ;mcc_generated_files/i2c_master.c: 371:     {;mcc_generated_files/i2c_master.c: 372:    
      +                               I2C_Status.addressNackCheck = 0;
 11962  0838  103C               	bcf	(_I2C_Status^(0+512)+28),0
 11963                           
 11964                           ;mcc_generated_files/i2c_master.c: 373:         I2C_MasterSendTxData(*I2C_Status.data_pt
      +                          r++);
 11965  0839  3017               	movlw	23
 11966  083A  3E20               	addlw	(low (_I2C_Status| (0+512)))& (0+255)
 11967  083B  0086               	movwf	6
 11968  083C  3002               	movlw	2	; select bank4/5
 11969  083D  0087               	movwf	7
 11970  083E  3F40               	moviw [0]fsr1
 11971  083F  0084               	movwf	4
 11972  0840  0185               	clrf	5
 11973  0841  0A81               	incf	1,f
 11974  0842  0800               	movf	0,w
 11975  0843  319D  25A8  3188   	fcall	_I2C_MasterSendTxData
 11976                           
 11977                           ;mcc_generated_files/i2c_master.c: 374:         return (--I2C_Status.data_length)?I2C_TX
      +                          :I2C_TX_EMPTY;
 11978  0846  3001               	movlw	1
 11979  0847  02B8               	subwf	(_I2C_Status^(0+512)+24),f
 11980  0848  3000               	movlw	0
 11981  0849  3BB9               	subwfb	((_I2C_Status+1)^(0+512)+24),f
 11982  084A  0838               	movf	(_I2C_Status^(0+512)+24),w
 11983  084B  0439               	iorwf	((_I2C_Status+1)^(0+512)+24),w
 11984  084C  1D03               	btfss	3,2
 11985  084D  2850               	goto	l3571
 11986  084E  3006               	movlw	6
 11987  084F  0008               	return
 11988  0850                     l3571:
 11989  0850  3003               	movlw	3
 11990  0851  0008               	return
 11991  0852                     __end_of_I2C_DO_TX:
 11992                           
 11993                           	psect	text53
 11994  1DCD                     __ptext53:	
 11995 ;; *************** function _I2C_DO_SEND_ADR_WRITE *****************
 11996 ;; Defined at:
 11997 ;;		line 347 in file "mcc_generated_files/i2c_master.c"
 11998 ;; Parameters:    Size  Location     Type
 11999 ;;		None
 12000 ;; Auto vars:     Size  Location     Type
 12001 ;;		None
 12002 ;; Return value:  Size  Location     Type
 12003 ;;                  1    wreg      enum E3885
 12004 ;; Registers used:
 12005 ;;		wreg, status,2, status,0, pclath, cstack
 12006 ;; Tracked objects:
 12007 ;;		On entry : 1F/0
 12008 ;;		On exit  : 1F/4
 12009 ;;		Unchanged: 0/0
 12010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12011 ;;      Params:         0       0       0       0       0       0       0       0
 12012 ;;      Locals:         0       0       0       0       0       0       0       0
 12013 ;;      Temps:          0       0       0       0       0       0       0       0
 12014 ;;      Totals:         0       0       0       0       0       0       0       0
 12015 ;;Total ram usage:        0 bytes
 12016 ;; Hardware stack levels used: 1
 12017 ;; Hardware stack levels required when called: 5
 12018 ;; This function calls:
 12019 ;;		_I2C_MasterSendTxData
 12020 ;; This function is called by:
 12021 ;;		_I2C_MasterFsm
 12022 ;; This function uses a non-reentrant model
 12023 ;;
 12024                           
 12025  1DCD                     _I2C_DO_SEND_ADR_WRITE:	
 12026                           ;psect for function _I2C_DO_SEND_ADR_WRITE
 12027                           
 12028                           
 12029                           ;mcc_generated_files/i2c_master.c: 349:     I2C_Status.addressNackCheck = 1;
 12030                           
 12031                           ;incstack = 0
 12032                           ; Regs used in _I2C_DO_SEND_ADR_WRITE: [wreg+status,2+status,0+pclath+cstack]
 12033  1DCD  0024               	movlb	4	; select bank4
 12034  1DCE  143C               	bsf	(_I2C_Status^(0+512)+28),0
 12035                           
 12036                           ;mcc_generated_files/i2c_master.c: 350:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1));
 12037  1DCF  3536               	lslf	(_I2C_Status^(0+512)+22),w
 12038  1DD0  319D  25A8         	fcall	_I2C_MasterSendTxData
 12039                           
 12040                           ;mcc_generated_files/i2c_master.c: 351:     return I2C_TX;
 12041  1DD2  3003               	movlw	3
 12042  1DD3  0008               	return
 12043  1DD4                     __end_of_I2C_DO_SEND_ADR_WRITE:
 12044                           
 12045                           	psect	text54
 12046  1DD4                     __ptext54:	
 12047 ;; *************** function _I2C_DO_SEND_ADR_READ *****************
 12048 ;; Defined at:
 12049 ;;		line 340 in file "mcc_generated_files/i2c_master.c"
 12050 ;; Parameters:    Size  Location     Type
 12051 ;;		None
 12052 ;; Auto vars:     Size  Location     Type
 12053 ;;		None
 12054 ;; Return value:  Size  Location     Type
 12055 ;;                  1    wreg      enum E3885
 12056 ;; Registers used:
 12057 ;;		wreg, status,2, status,0, pclath, cstack
 12058 ;; Tracked objects:
 12059 ;;		On entry : 1F/0
 12060 ;;		On exit  : 1F/4
 12061 ;;		Unchanged: 0/0
 12062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12063 ;;      Params:         0       0       0       0       0       0       0       0
 12064 ;;      Locals:         0       0       0       0       0       0       0       0
 12065 ;;      Temps:          0       0       0       0       0       0       0       0
 12066 ;;      Totals:         0       0       0       0       0       0       0       0
 12067 ;;Total ram usage:        0 bytes
 12068 ;; Hardware stack levels used: 1
 12069 ;; Hardware stack levels required when called: 5
 12070 ;; This function calls:
 12071 ;;		_I2C_MasterSendTxData
 12072 ;; This function is called by:
 12073 ;;		_I2C_MasterFsm
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077  1DD4                     _I2C_DO_SEND_ADR_READ:	
 12078                           ;psect for function _I2C_DO_SEND_ADR_READ
 12079                           
 12080                           
 12081                           ;mcc_generated_files/i2c_master.c: 342:     I2C_Status.addressNackCheck = 1;
 12082                           
 12083                           ;incstack = 0
 12084                           ; Regs used in _I2C_DO_SEND_ADR_READ: [wreg+status,2+status,0+pclath+cstack]
 12085  1DD4  0024               	movlb	4	; select bank4
 12086  1DD5  143C               	bsf	(_I2C_Status^(0+512)+28),0
 12087                           
 12088                           ;mcc_generated_files/i2c_master.c: 343:     I2C_MasterSendTxData((uint8_t) (I2C_Status.a
      +                          ddress << 1 | 1));
 12089  1DD6  1403               	setc
 12090  1DD7  0D36               	rlf	(_I2C_Status^(0+512)+22),w
 12091  1DD8  319D  25A8         	fcall	_I2C_MasterSendTxData
 12092                           
 12093                           ;mcc_generated_files/i2c_master.c: 344:     return I2C_RCEN;
 12094  1DDA  3005               	movlw	5
 12095  1DDB  0008               	return
 12096  1DDC                     __end_of_I2C_DO_SEND_ADR_READ:
 12097                           
 12098                           	psect	text55
 12099  1D8A                     __ptext55:	
 12100 ;; *************** function _I2C_DO_IDLE *****************
 12101 ;; Defined at:
 12102 ;;		line 333 in file "mcc_generated_files/i2c_master.c"
 12103 ;; Parameters:    Size  Location     Type
 12104 ;;		None
 12105 ;; Auto vars:     Size  Location     Type
 12106 ;;		None
 12107 ;; Return value:  Size  Location     Type
 12108 ;;                  1    wreg      enum E3885
 12109 ;; Registers used:
 12110 ;;		wreg, status,2
 12111 ;; Tracked objects:
 12112 ;;		On entry : 1F/0
 12113 ;;		On exit  : 1F/4
 12114 ;;		Unchanged: 0/0
 12115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12116 ;;      Params:         0       0       0       0       0       0       0       0
 12117 ;;      Locals:         0       0       0       0       0       0       0       0
 12118 ;;      Temps:          0       0       0       0       0       0       0       0
 12119 ;;      Totals:         0       0       0       0       0       0       0       0
 12120 ;;Total ram usage:        0 bytes
 12121 ;; Hardware stack levels used: 1
 12122 ;; Hardware stack levels required when called: 4
 12123 ;; This function calls:
 12124 ;;		Nothing
 12125 ;; This function is called by:
 12126 ;;		_I2C_MasterFsm
 12127 ;; This function uses a non-reentrant model
 12128 ;;
 12129                           
 12130  1D8A                     _I2C_DO_IDLE:	
 12131                           ;psect for function _I2C_DO_IDLE
 12132                           
 12133                           
 12134                           ;mcc_generated_files/i2c_master.c: 335:     I2C_Status.busy = 0;
 12135                           
 12136                           ;incstack = 0
 12137                           ; Regs used in _I2C_DO_IDLE: [wreg+status,2]
 12138  1D8A  0024               	movlb	4	; select bank4
 12139  1D8B  10BC               	bcf	(_I2C_Status^(0+512)+28),1
 12140                           
 12141                           ;mcc_generated_files/i2c_master.c: 336:     I2C_Status.error = I2C_NOERR;
 12142  1D8C  01BB               	clrf	(_I2C_Status^(0+512)+27)
 12143                           
 12144                           ;mcc_generated_files/i2c_master.c: 337:     return I2C_RESET;
 12145  1D8D  300E               	movlw	14
 12146  1D8E  0008               	return
 12147  1D8F                     __end_of_I2C_DO_IDLE:
 12148                           
 12149                           	psect	text56
 12150  1128                     __ptext56:	
 12151 ;; *************** function _I2C_DO_TX_EMPTY *****************
 12152 ;; Defined at:
 12153 ;;		line 409 in file "mcc_generated_files/i2c_master.c"
 12154 ;; Parameters:    Size  Location     Type
 12155 ;;		None
 12156 ;; Auto vars:     Size  Location     Type
 12157 ;;		None
 12158 ;; Return value:  Size  Location     Type
 12159 ;;                  1    wreg      enum E3885
 12160 ;; Registers used:
 12161 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12162 ;; Tracked objects:
 12163 ;;		On entry : 1F/0
 12164 ;;		On exit  : 1B/0
 12165 ;;		Unchanged: 0/0
 12166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12167 ;;      Params:         0       0       0       0       0       0       0       0
 12168 ;;      Locals:         0       0       0       0       0       0       0       0
 12169 ;;      Temps:          0       3       0       0       0       0       0       0
 12170 ;;      Totals:         0       3       0       0       0       0       0       0
 12171 ;;Total ram usage:        3 bytes
 12172 ;; Hardware stack levels used: 1
 12173 ;; Hardware stack levels required when called: 7
 12174 ;; This function calls:
 12175 ;;		Absolute function
 12176 ;;		_I2C_CallbackReturnReset
 12177 ;;		_I2C_CallbackReturnStop
 12178 ;;		_I2C_DO_SEND_RESTART
 12179 ;;		_I2C_DO_SEND_STOP
 12180 ;;		_I2C_MasterSetIrq
 12181 ;;		_rd1RegCompleteHandler
 12182 ;;		_rd2RegCompleteHandler
 12183 ;;		_rdBlkRegCompleteHandler
 12184 ;;		_wr1RegCompleteHandler
 12185 ;;		_wr2RegCompleteHandler
 12186 ;; This function is called by:
 12187 ;;		_I2C_MasterFsm
 12188 ;; This function uses a non-reentrant model
 12189 ;;
 12190                           
 12191  1128                     _I2C_DO_TX_EMPTY:	
 12192                           ;psect for function _I2C_DO_TX_EMPTY
 12193                           
 12194                           
 12195                           ;mcc_generated_files/i2c_master.c: 411:     I2C_Status.bufferFree = 1;
 12196                           
 12197                           ;incstack = 0
 12198                           ; Regs used in _I2C_DO_TX_EMPTY: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12199  1128  0024               	movlb	4	; select bank4
 12200  1129  15BC               	bsf	(_I2C_Status^(0+512)+28),3
 12201                           
 12202                           ;mcc_generated_files/i2c_master.c: 412:     switch(I2C_Status.callbackTable[I2C_DATA_COM
      +                          PLETE](I2C_Status.callbackPayload[I2C_DATA_COMPLETE]))
 12203  112A  2935               	goto	l3635
 12204  112B                     l3619:
 12205                           
 12206                           ;mcc_generated_files/i2c_master.c: 416:             return I2C_DO_SEND_RESTART();
 12207  112B  319D  256E         	fcall	_I2C_DO_SEND_RESTART
 12208  112D  0008               	return
 12209  112E                     l3623:
 12210                           
 12211                           ;mcc_generated_files/i2c_master.c: 418:             I2C_MasterSetIrq();
 12212  112E  319D  254D         	fcall	_I2C_MasterSetIrq
 12213                           
 12214                           ;mcc_generated_files/i2c_master.c: 419:             return I2C_TX;
 12215  1130  3003               	movlw	3
 12216  1131  0008               	return
 12217  1132                     l3629:
 12218                           
 12219                           ;mcc_generated_files/i2c_master.c: 422:             return I2C_DO_SEND_STOP();
 12220  1132  319D  2572         	fcall	_I2C_DO_SEND_STOP
 12221  1134  0008               	return
 12222  1135                     l3635:
 12223  1135  082C               	movf	(low ((_I2C_Status| (0+512)+12)))^0,w
 12224  1136  0020               	movlb	0	; select bank0
 12225  1137  00B3               	movwf	??_I2C_DO_TX_EMPTY
 12226  1138  0833               	movf	??_I2C_DO_TX_EMPTY,w
 12227  1139  00B2               	movwf	I2C_CallbackReturnReset@funPtr
 12228  113A  0024               	movlb	4	; select bank4
 12229  113B  0821               	movf	(_I2C_Status+1)^(0+512),w
 12230  113C  008A               	movwf	10
 12231  113D  0820               	movf	_I2C_Status^(0+512),w
 12232  113E  000A               	callw
 12233  113F  3191               	pagesel	$
 12234  1140  0020               	movlb	0	; select bank0
 12235  1141  00B4               	movwf	??_I2C_DO_TX_EMPTY+1
 12236  1142  01B5               	clrf	??_I2C_DO_TX_EMPTY+2
 12237                           
 12238                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 12239                           ; Switch size 1, requested type "simple"
 12240                           ; Number of cases is 1, Range of values is 0 to 0
 12241                           ; switch strategies available:
 12242                           ; Name         Instructions Cycles
 12243                           ; simple_byte            4     3 (average)
 12244                           ; direct_byte            8     6 (fixed)
 12245                           ; jumptable            260     6 (fixed)
 12246                           ;	Chosen strategy is simple_byte
 12247  1143  0835               	movf	??_I2C_DO_TX_EMPTY+2,w
 12248  1144  3A00               	xorlw	0	; case 0
 12249  1145  1903               	skipnz
 12250  1146  2948               	goto	l6381
 12251  1147  2932               	goto	l3629
 12252  1148                     l6381:
 12253                           
 12254                           ; Switch size 1, requested type "simple"
 12255                           ; Number of cases is 4, Range of values is 1 to 4
 12256                           ; switch strategies available:
 12257                           ; Name         Instructions Cycles
 12258                           ; simple_byte           13     7 (average)
 12259                           ; direct_byte           17     9 (fixed)
 12260                           ; jumptable            263     9 (fixed)
 12261                           ;	Chosen strategy is simple_byte
 12262  1148  0834               	movf	??_I2C_DO_TX_EMPTY+1,w
 12263  1149  3A01               	xorlw	1	; case 1
 12264  114A  1903               	skipnz
 12265  114B  2932               	goto	l3629
 12266  114C  3A03               	xorlw	3	; case 2
 12267  114D  1903               	skipnz
 12268  114E  292B               	goto	l3619
 12269  114F  3A01               	xorlw	1	; case 3
 12270  1150  1903               	skipnz
 12271  1151  292B               	goto	l3619
 12272  1152  3A07               	xorlw	7	; case 4
 12273  1153  1903               	skipnz
 12274  1154  292E               	goto	l3623
 12275  1155  2932               	goto	l3629
 12276  1156  0008               	return
 12277  1157                     __end_of_I2C_DO_TX_EMPTY:
 12278                           
 12279                           	psect	text57
 12280  1D4D                     __ptext57:	
 12281 ;; *************** function _I2C_MasterSetIrq *****************
 12282 ;; Defined at:
 12283 ;;		line 645 in file "mcc_generated_files/i2c_master.c"
 12284 ;; Parameters:    Size  Location     Type
 12285 ;;		None
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;		None
 12288 ;; Return value:  Size  Location     Type
 12289 ;;                  1    wreg      void 
 12290 ;; Registers used:
 12291 ;;		None
 12292 ;; Tracked objects:
 12293 ;;		On entry : 1F/0
 12294 ;;		On exit  : 1F/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12297 ;;      Params:         0       0       0       0       0       0       0       0
 12298 ;;      Locals:         0       0       0       0       0       0       0       0
 12299 ;;      Temps:          0       0       0       0       0       0       0       0
 12300 ;;      Totals:         0       0       0       0       0       0       0       0
 12301 ;;Total ram usage:        0 bytes
 12302 ;; Hardware stack levels used: 1
 12303 ;; Hardware stack levels required when called: 4
 12304 ;; This function calls:
 12305 ;;		Nothing
 12306 ;; This function is called by:
 12307 ;;		_I2C_DO_TX_EMPTY
 12308 ;; This function uses a non-reentrant model
 12309 ;;
 12310                           
 12311  1D4D                     _I2C_MasterSetIrq:	
 12312                           ;psect for function _I2C_MasterSetIrq
 12313                           
 12314                           
 12315                           ;mcc_generated_files/i2c_master.c: 647:     PIR1bits.SSP1IF = 1;
 12316                           
 12317                           ;incstack = 0
 12318                           ; Regs used in _I2C_MasterSetIrq: []
 12319  1D4D  1591               	bsf	17,3	;volatile
 12320  1D4E  0008               	return
 12321  1D4F                     __end_of_I2C_MasterSetIrq:
 12322                           
 12323                           	psect	text58
 12324  1DAE                     __ptext58:	
 12325 ;; *************** function _I2C_MasterIsNack *****************
 12326 ;; Defined at:
 12327 ;;		line 598 in file "mcc_generated_files/i2c_master.c"
 12328 ;; Parameters:    Size  Location     Type
 12329 ;;		None
 12330 ;; Auto vars:     Size  Location     Type
 12331 ;;		None
 12332 ;; Return value:  Size  Location     Type
 12333 ;;                  1    wreg      _Bool 
 12334 ;; Registers used:
 12335 ;;		wreg, status,2, status,0
 12336 ;; Tracked objects:
 12337 ;;		On entry : 1B/4
 12338 ;;		On exit  : 1F/4
 12339 ;;		Unchanged: 0/0
 12340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12341 ;;      Params:         0       0       0       0       0       0       0       0
 12342 ;;      Locals:         0       0       0       0       0       0       0       0
 12343 ;;      Temps:          0       0       0       0       0       0       0       0
 12344 ;;      Totals:         0       0       0       0       0       0       0       0
 12345 ;;Total ram usage:        0 bytes
 12346 ;; Hardware stack levels used: 1
 12347 ;; Hardware stack levels required when called: 4
 12348 ;; This function calls:
 12349 ;;		Nothing
 12350 ;; This function is called by:
 12351 ;;		_I2C_MasterFsm
 12352 ;;		_I2C_DO_TX
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356  1DAE                     _I2C_MasterIsNack:	
 12357                           ;psect for function _I2C_MasterIsNack
 12358                           
 12359                           
 12360                           ;mcc_generated_files/i2c_master.c: 600:     return SSP1CON2bits.ACKSTAT;
 12361                           
 12362                           ;incstack = 0
 12363                           ; Regs used in _I2C_MasterIsNack: [wreg+status,2+status,0]
 12364  1DAE  0024               	movlb	4	; select bank4
 12365  1DAF  0E16               	swapf	22,w	;volatile
 12366  1DB0  0C89               	rrf	9,f
 12367  1DB1  0C89               	rrf	9,f
 12368  1DB2  3901               	andlw	1
 12369  1DB3  0008               	return
 12370  1DB4                     __end_of_I2C_MasterIsNack:
 12371                           
 12372                           	psect	text59
 12373  1DA8                     __ptext59:	
 12374 ;; *************** function _I2C_MasterSendTxData *****************
 12375 ;; Defined at:
 12376 ;;		line 568 in file "mcc_generated_files/i2c_master.c"
 12377 ;; Parameters:    Size  Location     Type
 12378 ;;  data            1    wreg     unsigned char 
 12379 ;; Auto vars:     Size  Location     Type
 12380 ;;  data            1    9[BANK0 ] unsigned char 
 12381 ;; Return value:  Size  Location     Type
 12382 ;;                  1    wreg      void 
 12383 ;; Registers used:
 12384 ;;		wreg
 12385 ;; Tracked objects:
 12386 ;;		On entry : 1F/4
 12387 ;;		On exit  : 1F/4
 12388 ;;		Unchanged: 0/0
 12389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12390 ;;      Params:         0       0       0       0       0       0       0       0
 12391 ;;      Locals:         0       1       0       0       0       0       0       0
 12392 ;;      Temps:          0       0       0       0       0       0       0       0
 12393 ;;      Totals:         0       1       0       0       0       0       0       0
 12394 ;;Total ram usage:        1 bytes
 12395 ;; Hardware stack levels used: 1
 12396 ;; Hardware stack levels required when called: 4
 12397 ;; This function calls:
 12398 ;;		Nothing
 12399 ;; This function is called by:
 12400 ;;		_I2C_DO_SEND_ADR_READ
 12401 ;;		_I2C_DO_SEND_ADR_WRITE
 12402 ;;		_I2C_DO_TX
 12403 ;; This function uses a non-reentrant model
 12404 ;;
 12405                           
 12406  1DA8                     _I2C_MasterSendTxData:	
 12407                           ;psect for function _I2C_MasterSendTxData
 12408                           
 12409                           
 12410                           ;incstack = 0
 12411                           ; Regs used in _I2C_MasterSendTxData: [wreg]
 12412                           ;I2C_MasterSendTxData@data stored from wreg
 12413  1DA8  0020               	movlb	0	; select bank0
 12414  1DA9  00A9               	movwf	I2C_MasterSendTxData@data
 12415                           
 12416                           ;mcc_generated_files/i2c_master.c: 568: static __attribute__((inline)) void I2C_MasterSe
      +                          ndTxData(uint8_t data);mcc_generated_files/i2c_master.c: 569: {;mcc_generated_files/i2c_
      +                          master.c: 570:     SSP1BUF = data;
 12417  1DAA  0829               	movf	I2C_MasterSendTxData@data,w
 12418  1DAB  0024               	movlb	4	; select bank4
 12419  1DAC  0091               	movwf	17	;volatile
 12420  1DAD  0008               	return
 12421  1DAE                     __end_of_I2C_MasterSendTxData:
 12422                           
 12423                           	psect	text60
 12424  1D62                     __ptext60:	
 12425 ;; *************** function _I2C_MasterSendAck *****************
 12426 ;; Defined at:
 12427 ;;		line 603 in file "mcc_generated_files/i2c_master.c"
 12428 ;; Parameters:    Size  Location     Type
 12429 ;;		None
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;		None
 12432 ;; Return value:  Size  Location     Type
 12433 ;;                  1    wreg      void 
 12434 ;; Registers used:
 12435 ;;		None
 12436 ;; Tracked objects:
 12437 ;;		On entry : 1B/0
 12438 ;;		On exit  : 1F/4
 12439 ;;		Unchanged: 0/0
 12440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12441 ;;      Params:         0       0       0       0       0       0       0       0
 12442 ;;      Locals:         0       0       0       0       0       0       0       0
 12443 ;;      Temps:          0       0       0       0       0       0       0       0
 12444 ;;      Totals:         0       0       0       0       0       0       0       0
 12445 ;;Total ram usage:        0 bytes
 12446 ;; Hardware stack levels used: 1
 12447 ;; Hardware stack levels required when called: 4
 12448 ;; This function calls:
 12449 ;;		Nothing
 12450 ;; This function is called by:
 12451 ;;		_I2C_DO_RX
 12452 ;;		_I2C_DO_RX_ACK
 12453 ;; This function uses a non-reentrant model
 12454 ;;
 12455                           
 12456  1D62                     _I2C_MasterSendAck:	
 12457                           ;psect for function _I2C_MasterSendAck
 12458                           
 12459                           
 12460                           ;mcc_generated_files/i2c_master.c: 605:     SSP1CON2bits.ACKDT = 0;
 12461                           
 12462                           ;incstack = 0
 12463                           ; Regs used in _I2C_MasterSendAck: []
 12464  1D62  0024               	movlb	4	; select bank4
 12465  1D63  1296               	bcf	22,5	;volatile
 12466                           
 12467                           ;mcc_generated_files/i2c_master.c: 606:     SSP1CON2bits.ACKEN = 1;
 12468  1D64  1616               	bsf	22,4	;volatile
 12469  1D65  0008               	return
 12470  1D66                     __end_of_I2C_MasterSendAck:
 12471                           
 12472                           	psect	text61
 12473  0800                     __ptext61:	
 12474 ;; *************** function _I2C_MasterGetRxData *****************
 12475 ;; Defined at:
 12476 ;;		line 563 in file "mcc_generated_files/i2c_master.c"
 12477 ;; Parameters:    Size  Location     Type
 12478 ;;		None
 12479 ;; Auto vars:     Size  Location     Type
 12480 ;;		None
 12481 ;; Return value:  Size  Location     Type
 12482 ;;                  1    wreg      unsigned char 
 12483 ;; Registers used:
 12484 ;;		wreg
 12485 ;; Tracked objects:
 12486 ;;		On entry : 1F/0
 12487 ;;		On exit  : 1F/4
 12488 ;;		Unchanged: 0/0
 12489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12490 ;;      Params:         0       0       0       0       0       0       0       0
 12491 ;;      Locals:         0       0       0       0       0       0       0       0
 12492 ;;      Temps:          0       0       0       0       0       0       0       0
 12493 ;;      Totals:         0       0       0       0       0       0       0       0
 12494 ;;Total ram usage:        0 bytes
 12495 ;; Hardware stack levels used: 1
 12496 ;; Hardware stack levels required when called: 4
 12497 ;; This function calls:
 12498 ;;		Nothing
 12499 ;; This function is called by:
 12500 ;;		_I2C_DO_RX
 12501 ;; This function uses a non-reentrant model
 12502 ;;
 12503                           
 12504  0800                     _I2C_MasterGetRxData:	
 12505                           ;psect for function _I2C_MasterGetRxData
 12506                           
 12507                           
 12508                           ;mcc_generated_files/i2c_master.c: 565:     return SSP1BUF;
 12509                           
 12510                           ;incstack = 0
 12511                           ; Regs used in _I2C_MasterGetRxData: [wreg]
 12512  0800  0024               	movlb	4	; select bank4
 12513  0801  0811               	movf	17,w	;volatile
 12514  0802  0008               	return
 12515  0803                     __end_of_I2C_MasterGetRxData:
 12516                           
 12517                           	psect	text62
 12518  1D5E                     __ptext62:	
 12519 ;; *************** function _I2C_MasterSendNack *****************
 12520 ;; Defined at:
 12521 ;;		line 609 in file "mcc_generated_files/i2c_master.c"
 12522 ;; Parameters:    Size  Location     Type
 12523 ;;		None
 12524 ;; Auto vars:     Size  Location     Type
 12525 ;;		None
 12526 ;; Return value:  Size  Location     Type
 12527 ;;                  1    wreg      void 
 12528 ;; Registers used:
 12529 ;;		None
 12530 ;; Tracked objects:
 12531 ;;		On entry : 1F/0
 12532 ;;		On exit  : 1F/4
 12533 ;;		Unchanged: 0/0
 12534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12535 ;;      Params:         0       0       0       0       0       0       0       0
 12536 ;;      Locals:         0       0       0       0       0       0       0       0
 12537 ;;      Temps:          0       0       0       0       0       0       0       0
 12538 ;;      Totals:         0       0       0       0       0       0       0       0
 12539 ;;Total ram usage:        0 bytes
 12540 ;; Hardware stack levels used: 1
 12541 ;; Hardware stack levels required when called: 4
 12542 ;; This function calls:
 12543 ;;		Nothing
 12544 ;; This function is called by:
 12545 ;;		_I2C_DO_RX_NACK_STOP
 12546 ;;		_I2C_DO_RX_NACK_RESTART
 12547 ;; This function uses a non-reentrant model
 12548 ;;
 12549                           
 12550  1D5E                     _I2C_MasterSendNack:	
 12551                           ;psect for function _I2C_MasterSendNack
 12552                           
 12553                           
 12554                           ;mcc_generated_files/i2c_master.c: 611:     SSP1CON2bits.ACKDT = 1;
 12555                           
 12556                           ;incstack = 0
 12557                           ; Regs used in _I2C_MasterSendNack: []
 12558  1D5E  0024               	movlb	4	; select bank4
 12559  1D5F  1696               	bsf	22,5	;volatile
 12560                           
 12561                           ;mcc_generated_files/i2c_master.c: 612:     SSP1CON2bits.ACKEN = 1;
 12562  1D60  1616               	bsf	22,4	;volatile
 12563  1D61  0008               	return
 12564  1D62                     __end_of_I2C_MasterSendNack:
 12565                           
 12566                           	psect	text63
 12567  1D4B                     __ptext63:	
 12568 ;; *************** function _I2C_MasterStartRx *****************
 12569 ;; Defined at:
 12570 ;;		line 583 in file "mcc_generated_files/i2c_master.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;		None
 12573 ;; Auto vars:     Size  Location     Type
 12574 ;;		None
 12575 ;; Return value:  Size  Location     Type
 12576 ;;                  1    wreg      void 
 12577 ;; Registers used:
 12578 ;;		None
 12579 ;; Tracked objects:
 12580 ;;		On entry : 1F/4
 12581 ;;		On exit  : 1F/4
 12582 ;;		Unchanged: 0/0
 12583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12584 ;;      Params:         0       0       0       0       0       0       0       0
 12585 ;;      Locals:         0       0       0       0       0       0       0       0
 12586 ;;      Temps:          0       0       0       0       0       0       0       0
 12587 ;;      Totals:         0       0       0       0       0       0       0       0
 12588 ;;Total ram usage:        0 bytes
 12589 ;; Hardware stack levels used: 1
 12590 ;; Hardware stack levels required when called: 4
 12591 ;; This function calls:
 12592 ;;		Nothing
 12593 ;; This function is called by:
 12594 ;;		_I2C_DO_RCEN
 12595 ;; This function uses a non-reentrant model
 12596 ;;
 12597                           
 12598  1D4B                     _I2C_MasterStartRx:	
 12599                           ;psect for function _I2C_MasterStartRx
 12600                           
 12601                           
 12602                           ;mcc_generated_files/i2c_master.c: 585:     SSP1CON2bits.RCEN = 1;
 12603                           
 12604                           ;incstack = 0
 12605                           ; Regs used in _I2C_MasterStartRx: []
 12606  1D4B  1596               	bsf	22,3	;volatile
 12607  1D4C  0008               	return
 12608  1D4D                     __end_of_I2C_MasterStartRx:
 12609                           
 12610                           	psect	text64
 12611  1D49                     __ptext64:	
 12612 ;; *************** function _I2C_CallbackReturnReset *****************
 12613 ;; Defined at:
 12614 ;;		line 525 in file "mcc_generated_files/i2c_master.c"
 12615 ;; Parameters:    Size  Location     Type
 12616 ;;  funPtr          1   18[BANK0 ] PTR void 
 12617 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12618 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12619 ;; Auto vars:     Size  Location     Type
 12620 ;;		None
 12621 ;; Return value:  Size  Location     Type
 12622 ;;                  1    wreg      enum E360
 12623 ;; Registers used:
 12624 ;;		wreg
 12625 ;; Tracked objects:
 12626 ;;		On entry : 1B/4
 12627 ;;		On exit  : 1B/0
 12628 ;;		Unchanged: 1B/0
 12629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12630 ;;      Params:         0       1       0       0       0       0       0       0
 12631 ;;      Locals:         0       0       0       0       0       0       0       0
 12632 ;;      Temps:          0       0       0       0       0       0       0       0
 12633 ;;      Totals:         0       1       0       0       0       0       0       0
 12634 ;;Total ram usage:        1 bytes
 12635 ;; Hardware stack levels used: 1
 12636 ;; Hardware stack levels required when called: 4
 12637 ;; This function calls:
 12638 ;;		Nothing
 12639 ;; This function is called by:
 12640 ;;		_I2C_Open
 12641 ;;		_I2C_DO_TX
 12642 ;;		_I2C_DO_RX
 12643 ;;		_I2C_DO_TX_EMPTY
 12644 ;;		_I2C_DO_ADDRESS_NACK
 12645 ;; This function uses a non-reentrant model
 12646 ;;
 12647                           
 12648  1D49                     _I2C_CallbackReturnReset:	
 12649                           ;psect for function _I2C_CallbackReturnReset
 12650                           
 12651                           
 12652                           ;mcc_generated_files/i2c_master.c: 525: i2c_operations_t I2C_CallbackReturnReset(void *f
      +                          unPtr);mcc_generated_files/i2c_master.c: 526: {;mcc_generated_files/i2c_master.c: 527:  
      +                             return I2C_RESET_LINK;
 12653                           
 12654                           ;incstack = 0
 12655                           ; Regs used in _I2C_CallbackReturnReset: [wreg]
 12656  1D49  3005               	movlw	5
 12657  1D4A  0008               	return
 12658  1D4B                     __end_of_I2C_CallbackReturnReset:
 12659                           
 12660                           	psect	text65
 12661  1D47                     __ptext65:	
 12662 ;; *************** function _I2C_CallbackReturnStop *****************
 12663 ;; Defined at:
 12664 ;;		line 520 in file "mcc_generated_files/i2c_master.c"
 12665 ;; Parameters:    Size  Location     Type
 12666 ;;  funPtr          1   18[BANK0 ] PTR void 
 12667 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12668 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12669 ;; Auto vars:     Size  Location     Type
 12670 ;;		None
 12671 ;; Return value:  Size  Location     Type
 12672 ;;                  1    wreg      enum E360
 12673 ;; Registers used:
 12674 ;;		wreg
 12675 ;; Tracked objects:
 12676 ;;		On entry : 1B/4
 12677 ;;		On exit  : 1B/0
 12678 ;;		Unchanged: 1B/0
 12679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12680 ;;      Params:         0       1       0       0       0       0       0       0
 12681 ;;      Locals:         0       0       0       0       0       0       0       0
 12682 ;;      Temps:          0       0       0       0       0       0       0       0
 12683 ;;      Totals:         0       1       0       0       0       0       0       0
 12684 ;;Total ram usage:        1 bytes
 12685 ;; Hardware stack levels used: 1
 12686 ;; Hardware stack levels required when called: 4
 12687 ;; This function calls:
 12688 ;;		Nothing
 12689 ;; This function is called by:
 12690 ;;		_I2C_Open
 12691 ;;		_I2C_SetCallback
 12692 ;;		_I2C_DO_TX
 12693 ;;		_I2C_DO_RX
 12694 ;;		_I2C_DO_TX_EMPTY
 12695 ;;		_I2C_DO_ADDRESS_NACK
 12696 ;; This function uses a non-reentrant model
 12697 ;;
 12698                           
 12699  1D47                     _I2C_CallbackReturnStop:	
 12700                           ;psect for function _I2C_CallbackReturnStop
 12701                           
 12702                           
 12703                           ;mcc_generated_files/i2c_master.c: 520: i2c_operations_t I2C_CallbackReturnStop(void *fu
      +                          nPtr);mcc_generated_files/i2c_master.c: 521: {;mcc_generated_files/i2c_master.c: 522:   
      +                            return I2C_STOP;
 12704                           
 12705                           ;incstack = 0
 12706                           ; Regs used in _I2C_CallbackReturnStop: [wreg]
 12707  1D47  3001               	movlw	1
 12708  1D48  0008               	return
 12709  1D49                     __end_of_I2C_CallbackReturnStop:
 12710                           
 12711                           	psect	text66
 12712  1F3B                     __ptext66:	
 12713 ;; *************** function _rdBlkRegCompleteHandler *****************
 12714 ;; Defined at:
 12715 ;;		line 170 in file "mcc_generated_files/examples/i2c_master_example.c"
 12716 ;; Parameters:    Size  Location     Type
 12717 ;;  ptr             1   18[BANK0 ] PTR void 
 12718 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12719 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12720 ;; Auto vars:     Size  Location     Type
 12721 ;;		None
 12722 ;; Return value:  Size  Location     Type
 12723 ;;                  1    wreg      enum E360
 12724 ;; Registers used:
 12725 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12726 ;; Tracked objects:
 12727 ;;		On entry : 1B/4
 12728 ;;		On exit  : 1F/0
 12729 ;;		Unchanged: 0/0
 12730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12731 ;;      Params:         0       1       0       0       0       0       0       0
 12732 ;;      Locals:         0       0       0       0       0       0       0       0
 12733 ;;      Temps:          0       0       0       0       0       0       0       0
 12734 ;;      Totals:         0       1       0       0       0       0       0       0
 12735 ;;Total ram usage:        1 bytes
 12736 ;; Hardware stack levels used: 1
 12737 ;; Hardware stack levels required when called: 6
 12738 ;; This function calls:
 12739 ;;		_I2C_SetBuffer
 12740 ;;		_I2C_SetDataCompleteCallback
 12741 ;; This function is called by:
 12742 ;;		_I2C_DO_TX
 12743 ;;		_I2C_DO_RX
 12744 ;;		_I2C_DO_TX_EMPTY
 12745 ;;		_I2C_DO_ADDRESS_NACK
 12746 ;; This function uses a non-reentrant model
 12747 ;;
 12748                           
 12749  1F3B                     _rdBlkRegCompleteHandler:	
 12750                           ;psect for function _rdBlkRegCompleteHandler
 12751                           
 12752                           
 12753                           ;mcc_generated_files/examples/i2c_master_example.c: 170: static i2c_operations_t rdBlkRe
      +                          gCompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 171: {;mc
      +                          c_generated_files/examples/i2c_master_example.c: 172:     I2C_SetBuffer(((i2c_buffer_t *
      +                          )ptr)->data,((i2c_buffer_t*)ptr)->len);
 12754                           
 12755                           ;incstack = 0
 12756                           ; Regs used in _rdBlkRegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 12757  1F3B  0020               	movlb	0	; select bank0
 12758  1F3C  0832               	movf	rdBlkRegCompleteHandler@ptr,w
 12759  1F3D  0086               	movwf	6
 12760  1F3E  0187               	clrf	7
 12761  1F3F  3F40               	moviw [0]fsr1
 12762  1F40  00A9               	movwf	I2C_SetBuffer@bufferSize
 12763  1F41  3F41               	moviw [1]fsr1
 12764  1F42  00AA               	movwf	I2C_SetBuffer@bufferSize+1
 12765  1F43  0832               	movf	rdBlkRegCompleteHandler@ptr,w
 12766  1F44  3E02               	addlw	2
 12767  1F45  0086               	movwf	6
 12768  1F46  0187               	clrf	7
 12769  1F47  0801               	movf	1,w
 12770  1F48  319E  26D1  319F   	fcall	_I2C_SetBuffer
 12771                           
 12772                           ;mcc_generated_files/examples/i2c_master_example.c: 173:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 12773  1F4B  3000               	movlw	0
 12774  1F4C  0020               	movlb	0	; select bank0
 12775  1F4D  00AE               	movwf	I2C_SetDataCompleteCallback@cb
 12776  1F4E  00AF               	movwf	I2C_SetDataCompleteCallback@cb+1
 12777  1F4F  01B0               	clrf	I2C_SetDataCompleteCallback@ptr
 12778  1F50  319E  2639         	fcall	_I2C_SetDataCompleteCallback
 12779                           
 12780                           ;mcc_generated_files/examples/i2c_master_example.c: 174:     return I2C_RESTART_READ;
 12781  1F52  3002               	movlw	2
 12782  1F53  0008               	return
 12783  1F54                     __end_of_rdBlkRegCompleteHandler:
 12784                           
 12785                           	psect	text67
 12786  1EBF                     __ptext67:	
 12787 ;; *************** function _wr1RegCompleteHandler *****************
 12788 ;; Defined at:
 12789 ;;		line 156 in file "mcc_generated_files/examples/i2c_master_example.c"
 12790 ;; Parameters:    Size  Location     Type
 12791 ;;  ptr             1   18[BANK0 ] PTR void 
 12792 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12793 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12794 ;; Auto vars:     Size  Location     Type
 12795 ;;		None
 12796 ;; Return value:  Size  Location     Type
 12797 ;;                  1    wreg      enum E360
 12798 ;; Registers used:
 12799 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12800 ;; Tracked objects:
 12801 ;;		On entry : 1B/4
 12802 ;;		On exit  : 1F/0
 12803 ;;		Unchanged: 0/0
 12804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12805 ;;      Params:         0       1       0       0       0       0       0       0
 12806 ;;      Locals:         0       0       0       0       0       0       0       0
 12807 ;;      Temps:          0       0       0       0       0       0       0       0
 12808 ;;      Totals:         0       1       0       0       0       0       0       0
 12809 ;;Total ram usage:        1 bytes
 12810 ;; Hardware stack levels used: 1
 12811 ;; Hardware stack levels required when called: 6
 12812 ;; This function calls:
 12813 ;;		_I2C_SetBuffer
 12814 ;;		_I2C_SetDataCompleteCallback
 12815 ;; This function is called by:
 12816 ;;		_I2C_DO_TX
 12817 ;;		_I2C_DO_RX
 12818 ;;		_I2C_DO_TX_EMPTY
 12819 ;;		_I2C_DO_ADDRESS_NACK
 12820 ;; This function uses a non-reentrant model
 12821 ;;
 12822                           
 12823  1EBF                     _wr1RegCompleteHandler:	
 12824                           ;psect for function _wr1RegCompleteHandler
 12825                           
 12826                           
 12827                           ;mcc_generated_files/examples/i2c_master_example.c: 156: static i2c_operations_t wr1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 157: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 158:     I2C_SetBuffer(ptr,1);
 12828                           
 12829                           ;incstack = 0
 12830                           ; Regs used in _wr1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12831  1EBF  3001               	movlw	1
 12832  1EC0  0020               	movlb	0	; select bank0
 12833  1EC1  00A9               	movwf	I2C_SetBuffer@bufferSize
 12834  1EC2  3000               	movlw	0
 12835  1EC3  00AA               	movwf	I2C_SetBuffer@bufferSize+1
 12836  1EC4  0832               	movf	wr1RegCompleteHandler@ptr,w
 12837  1EC5  319E  26D1  319E   	fcall	_I2C_SetBuffer
 12838                           
 12839                           ;mcc_generated_files/examples/i2c_master_example.c: 159:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 12840  1EC8  3000               	movlw	0
 12841  1EC9  0020               	movlb	0	; select bank0
 12842  1ECA  00AE               	movwf	I2C_SetDataCompleteCallback@cb
 12843  1ECB  00AF               	movwf	I2C_SetDataCompleteCallback@cb+1
 12844  1ECC  01B0               	clrf	I2C_SetDataCompleteCallback@ptr
 12845  1ECD  319E  2639         	fcall	_I2C_SetDataCompleteCallback
 12846                           
 12847                           ;mcc_generated_files/examples/i2c_master_example.c: 160:     return I2C_CONTINUE;
 12848  1ECF  3004               	movlw	4
 12849  1ED0  0008               	return
 12850  1ED1                     __end_of_wr1RegCompleteHandler:
 12851                           
 12852                           	psect	text68
 12853  1EAD                     __ptext68:	
 12854 ;; *************** function _rd2RegCompleteHandler *****************
 12855 ;; Defined at:
 12856 ;;		line 149 in file "mcc_generated_files/examples/i2c_master_example.c"
 12857 ;; Parameters:    Size  Location     Type
 12858 ;;  ptr             1   18[BANK0 ] PTR void 
 12859 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12860 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12861 ;; Auto vars:     Size  Location     Type
 12862 ;;		None
 12863 ;; Return value:  Size  Location     Type
 12864 ;;                  1    wreg      enum E360
 12865 ;; Registers used:
 12866 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12867 ;; Tracked objects:
 12868 ;;		On entry : 1B/4
 12869 ;;		On exit  : 1F/0
 12870 ;;		Unchanged: 0/0
 12871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12872 ;;      Params:         0       1       0       0       0       0       0       0
 12873 ;;      Locals:         0       0       0       0       0       0       0       0
 12874 ;;      Temps:          0       0       0       0       0       0       0       0
 12875 ;;      Totals:         0       1       0       0       0       0       0       0
 12876 ;;Total ram usage:        1 bytes
 12877 ;; Hardware stack levels used: 1
 12878 ;; Hardware stack levels required when called: 6
 12879 ;; This function calls:
 12880 ;;		_I2C_SetBuffer
 12881 ;;		_I2C_SetDataCompleteCallback
 12882 ;; This function is called by:
 12883 ;;		_I2C_DO_TX
 12884 ;;		_I2C_DO_RX
 12885 ;;		_I2C_DO_TX_EMPTY
 12886 ;;		_I2C_DO_ADDRESS_NACK
 12887 ;; This function uses a non-reentrant model
 12888 ;;
 12889                           
 12890  1EAD                     _rd2RegCompleteHandler:	
 12891                           ;psect for function _rd2RegCompleteHandler
 12892                           
 12893                           
 12894                           ;mcc_generated_files/examples/i2c_master_example.c: 149: static i2c_operations_t rd2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 150: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 151:     I2C_SetBuffer(ptr,2);
 12895                           
 12896                           ;incstack = 0
 12897                           ; Regs used in _rd2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12898  1EAD  3002               	movlw	2
 12899  1EAE  0020               	movlb	0	; select bank0
 12900  1EAF  00A9               	movwf	I2C_SetBuffer@bufferSize
 12901  1EB0  3000               	movlw	0
 12902  1EB1  00AA               	movwf	I2C_SetBuffer@bufferSize+1
 12903  1EB2  0832               	movf	rd2RegCompleteHandler@ptr,w
 12904  1EB3  319E  26D1  319E   	fcall	_I2C_SetBuffer
 12905                           
 12906                           ;mcc_generated_files/examples/i2c_master_example.c: 152:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 12907  1EB6  3000               	movlw	0
 12908  1EB7  0020               	movlb	0	; select bank0
 12909  1EB8  00AE               	movwf	I2C_SetDataCompleteCallback@cb
 12910  1EB9  00AF               	movwf	I2C_SetDataCompleteCallback@cb+1
 12911  1EBA  01B0               	clrf	I2C_SetDataCompleteCallback@ptr
 12912  1EBB  319E  2639         	fcall	_I2C_SetDataCompleteCallback
 12913                           
 12914                           ;mcc_generated_files/examples/i2c_master_example.c: 153:     return I2C_RESTART_READ;
 12915  1EBD  3002               	movlw	2
 12916  1EBE  0008               	return
 12917  1EBF                     __end_of_rd2RegCompleteHandler:
 12918                           
 12919                           	psect	text69
 12920  1E9B                     __ptext69:	
 12921 ;; *************** function _rd1RegCompleteHandler *****************
 12922 ;; Defined at:
 12923 ;;		line 142 in file "mcc_generated_files/examples/i2c_master_example.c"
 12924 ;; Parameters:    Size  Location     Type
 12925 ;;  ptr             1   18[BANK0 ] PTR void 
 12926 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12927 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;		None
 12930 ;; Return value:  Size  Location     Type
 12931 ;;                  1    wreg      enum E360
 12932 ;; Registers used:
 12933 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12934 ;; Tracked objects:
 12935 ;;		On entry : 1B/4
 12936 ;;		On exit  : 1F/0
 12937 ;;		Unchanged: 0/0
 12938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12939 ;;      Params:         0       1       0       0       0       0       0       0
 12940 ;;      Locals:         0       0       0       0       0       0       0       0
 12941 ;;      Temps:          0       0       0       0       0       0       0       0
 12942 ;;      Totals:         0       1       0       0       0       0       0       0
 12943 ;;Total ram usage:        1 bytes
 12944 ;; Hardware stack levels used: 1
 12945 ;; Hardware stack levels required when called: 6
 12946 ;; This function calls:
 12947 ;;		_I2C_SetBuffer
 12948 ;;		_I2C_SetDataCompleteCallback
 12949 ;; This function is called by:
 12950 ;;		_I2C_DO_TX
 12951 ;;		_I2C_DO_RX
 12952 ;;		_I2C_DO_TX_EMPTY
 12953 ;;		_I2C_DO_ADDRESS_NACK
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957  1E9B                     _rd1RegCompleteHandler:	
 12958                           ;psect for function _rd1RegCompleteHandler
 12959                           
 12960                           
 12961                           ;mcc_generated_files/examples/i2c_master_example.c: 142: static i2c_operations_t rd1RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 143: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 144:     I2C_SetBuffer(ptr,1);
 12962                           
 12963                           ;incstack = 0
 12964                           ; Regs used in _rd1RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12965  1E9B  3001               	movlw	1
 12966  1E9C  0020               	movlb	0	; select bank0
 12967  1E9D  00A9               	movwf	I2C_SetBuffer@bufferSize
 12968  1E9E  3000               	movlw	0
 12969  1E9F  00AA               	movwf	I2C_SetBuffer@bufferSize+1
 12970  1EA0  0832               	movf	rd1RegCompleteHandler@ptr,w
 12971  1EA1  319E  26D1  319E   	fcall	_I2C_SetBuffer
 12972                           
 12973                           ;mcc_generated_files/examples/i2c_master_example.c: 145:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 12974  1EA4  3000               	movlw	0
 12975  1EA5  0020               	movlb	0	; select bank0
 12976  1EA6  00AE               	movwf	I2C_SetDataCompleteCallback@cb
 12977  1EA7  00AF               	movwf	I2C_SetDataCompleteCallback@cb+1
 12978  1EA8  01B0               	clrf	I2C_SetDataCompleteCallback@ptr
 12979  1EA9  319E  2639         	fcall	_I2C_SetDataCompleteCallback
 12980                           
 12981                           ;mcc_generated_files/examples/i2c_master_example.c: 146:     return I2C_RESTART_READ;
 12982  1EAB  3002               	movlw	2
 12983  1EAC  0008               	return
 12984  1EAD                     __end_of_rd1RegCompleteHandler:
 12985                           
 12986                           	psect	text70
 12987  1E89                     __ptext70:	
 12988 ;; *************** function _wr2RegCompleteHandler *****************
 12989 ;; Defined at:
 12990 ;;		line 163 in file "mcc_generated_files/examples/i2c_master_example.c"
 12991 ;; Parameters:    Size  Location     Type
 12992 ;;  ptr             1   18[BANK0 ] PTR void 
 12993 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 12994 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 12995 ;; Auto vars:     Size  Location     Type
 12996 ;;		None
 12997 ;; Return value:  Size  Location     Type
 12998 ;;                  1    wreg      enum E360
 12999 ;; Registers used:
 13000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13001 ;; Tracked objects:
 13002 ;;		On entry : 1B/4
 13003 ;;		On exit  : 1F/0
 13004 ;;		Unchanged: 0/0
 13005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13006 ;;      Params:         0       1       0       0       0       0       0       0
 13007 ;;      Locals:         0       0       0       0       0       0       0       0
 13008 ;;      Temps:          0       0       0       0       0       0       0       0
 13009 ;;      Totals:         0       1       0       0       0       0       0       0
 13010 ;;Total ram usage:        1 bytes
 13011 ;; Hardware stack levels used: 1
 13012 ;; Hardware stack levels required when called: 6
 13013 ;; This function calls:
 13014 ;;		_I2C_SetBuffer
 13015 ;;		_I2C_SetDataCompleteCallback
 13016 ;; This function is called by:
 13017 ;;		_I2C_DO_TX
 13018 ;;		_I2C_DO_RX
 13019 ;;		_I2C_DO_TX_EMPTY
 13020 ;;		_I2C_DO_ADDRESS_NACK
 13021 ;; This function uses a non-reentrant model
 13022 ;;
 13023                           
 13024  1E89                     _wr2RegCompleteHandler:	
 13025                           ;psect for function _wr2RegCompleteHandler
 13026                           
 13027                           
 13028                           ;mcc_generated_files/examples/i2c_master_example.c: 163: static i2c_operations_t wr2RegC
      +                          ompleteHandler(void *ptr);mcc_generated_files/examples/i2c_master_example.c: 164: {;mcc_
      +                          generated_files/examples/i2c_master_example.c: 165:     I2C_SetBuffer(ptr,2);
 13029                           
 13030                           ;incstack = 0
 13031                           ; Regs used in _wr2RegCompleteHandler: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13032  1E89  3002               	movlw	2
 13033  1E8A  0020               	movlb	0	; select bank0
 13034  1E8B  00A9               	movwf	I2C_SetBuffer@bufferSize
 13035  1E8C  3000               	movlw	0
 13036  1E8D  00AA               	movwf	I2C_SetBuffer@bufferSize+1
 13037  1E8E  0832               	movf	wr2RegCompleteHandler@ptr,w
 13038  1E8F  319E  26D1  319E   	fcall	_I2C_SetBuffer
 13039                           
 13040                           ;mcc_generated_files/examples/i2c_master_example.c: 166:     I2C_SetDataCompleteCallback
      +                          (((void*)0),((void*)0));
 13041  1E92  3000               	movlw	0
 13042  1E93  0020               	movlb	0	; select bank0
 13043  1E94  00AE               	movwf	I2C_SetDataCompleteCallback@cb
 13044  1E95  00AF               	movwf	I2C_SetDataCompleteCallback@cb+1
 13045  1E96  01B0               	clrf	I2C_SetDataCompleteCallback@ptr
 13046  1E97  319E  2639         	fcall	_I2C_SetDataCompleteCallback
 13047                           
 13048                           ;mcc_generated_files/examples/i2c_master_example.c: 167:     return I2C_CONTINUE;
 13049  1E99  3004               	movlw	4
 13050  1E9A  0008               	return
 13051  1E9B                     __end_of_wr2RegCompleteHandler:
 13052                           
 13053                           	psect	text71
 13054  1E39                     __ptext71:	
 13055 ;; *************** function _I2C_SetDataCompleteCallback *****************
 13056 ;; Defined at:
 13057 ;;		line 273 in file "mcc_generated_files/i2c_master.c"
 13058 ;; Parameters:    Size  Location     Type
 13059 ;;  cb              2   14[BANK0 ] PTR FTN(PTR void ,)enum 
 13060 ;;		 -> Absolute function(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 13061 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 13062 ;;  ptr             1   16[BANK0 ] PTR void 
 13063 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13064 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13065 ;; Auto vars:     Size  Location     Type
 13066 ;;		None
 13067 ;; Return value:  Size  Location     Type
 13068 ;;                  1    wreg      void 
 13069 ;; Registers used:
 13070 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13071 ;; Tracked objects:
 13072 ;;		On entry : 1F/0
 13073 ;;		On exit  : 1F/0
 13074 ;;		Unchanged: 0/0
 13075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13076 ;;      Params:         0       3       0       0       0       0       0       0
 13077 ;;      Locals:         0       0       0       0       0       0       0       0
 13078 ;;      Temps:          0       1       0       0       0       0       0       0
 13079 ;;      Totals:         0       4       0       0       0       0       0       0
 13080 ;;Total ram usage:        4 bytes
 13081 ;; Hardware stack levels used: 1
 13082 ;; Hardware stack levels required when called: 5
 13083 ;; This function calls:
 13084 ;;		_I2C_SetCallback
 13085 ;; This function is called by:
 13086 ;;		_rd1RegCompleteHandler
 13087 ;;		_rd2RegCompleteHandler
 13088 ;;		_wr1RegCompleteHandler
 13089 ;;		_wr2RegCompleteHandler
 13090 ;;		_rdBlkRegCompleteHandler
 13091 ;; This function uses a non-reentrant model
 13092 ;;
 13093                           
 13094  1E39                     _I2C_SetDataCompleteCallback:	
 13095                           ;psect for function _I2C_SetDataCompleteCallback
 13096                           
 13097                           
 13098                           ;mcc_generated_files/i2c_master.c: 273: void I2C_SetDataCompleteCallback(i2c_callback_t 
      +                          cb, void *ptr);mcc_generated_files/i2c_master.c: 274: {;mcc_generated_files/i2c_master.c
      +                          : 275:     I2C_SetCallback(I2C_DATA_COMPLETE, cb, ptr);
 13099                           
 13100                           ;incstack = 0
 13101                           ; Regs used in _I2C_SetDataCompleteCallback: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13102  1E39  082F               	movf	I2C_SetDataCompleteCallback@cb+1,w
 13103  1E3A  00AA               	movwf	I2C_SetCallback@cb+1
 13104  1E3B  082E               	movf	I2C_SetDataCompleteCallback@cb,w
 13105  1E3C  00A9               	movwf	I2C_SetCallback@cb
 13106  1E3D  0830               	movf	I2C_SetDataCompleteCallback@ptr,w
 13107  1E3E  00B1               	movwf	??_I2C_SetDataCompleteCallback
 13108  1E3F  0831               	movf	??_I2C_SetDataCompleteCallback,w
 13109  1E40  00AB               	movwf	I2C_SetCallback@ptr
 13110  1E41  3000               	movlw	0
 13111  1E42  3190  20D7         	fcall	_I2C_SetCallback
 13112  1E44  0008               	return
 13113  1E45                     __end_of_I2C_SetDataCompleteCallback:
 13114                           
 13115                           	psect	text72
 13116  10D7                     __ptext72:	
 13117 ;; *************** function _I2C_SetCallback *****************
 13118 ;; Defined at:
 13119 ;;		line 298 in file "mcc_generated_files/i2c_master.c"
 13120 ;; Parameters:    Size  Location     Type
 13121 ;;  idx             1    wreg     enum E3903
 13122 ;;  cb              2    9[BANK0 ] PTR FTN(PTR void ,)enum 
 13123 ;;		 -> Absolute function(1), rdBlkRegCompleteHandler(1), wr2RegCompleteHandler(1), wr1RegCompleteHandler(1), 
 13124 ;;		 -> rd2RegCompleteHandler(1), rd1RegCompleteHandler(1), 
 13125 ;;  ptr             1   11[BANK0 ] PTR void 
 13126 ;;		 -> I2C_ReadDataBlock@bufferBlock(3), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@data(1), I2C_Read2ByteR
      +egister@returnValue(2), 
 13127 ;;		 -> NULL(0), I2C_Read1ByteRegister@returnValue(1), 
 13128 ;; Auto vars:     Size  Location     Type
 13129 ;;  idx             1   13[BANK0 ] enum E3903
 13130 ;; Return value:  Size  Location     Type
 13131 ;;                  1    wreg      void 
 13132 ;; Registers used:
 13133 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13134 ;; Tracked objects:
 13135 ;;		On entry : 1F/0
 13136 ;;		On exit  : 1F/0
 13137 ;;		Unchanged: 0/0
 13138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13139 ;;      Params:         0       3       0       0       0       0       0       0
 13140 ;;      Locals:         0       1       0       0       0       0       0       0
 13141 ;;      Temps:          0       1       0       0       0       0       0       0
 13142 ;;      Totals:         0       5       0       0       0       0       0       0
 13143 ;;Total ram usage:        5 bytes
 13144 ;; Hardware stack levels used: 1
 13145 ;; Hardware stack levels required when called: 4
 13146 ;; This function calls:
 13147 ;;		Nothing
 13148 ;; This function is called by:
 13149 ;;		_I2C_SetDataCompleteCallback
 13150 ;;		_I2C_SetAddressNackCallback
 13151 ;; This function uses a non-reentrant model
 13152 ;;
 13153                           
 13154  10D7                     _I2C_SetCallback:	
 13155                           ;psect for function _I2C_SetCallback
 13156                           
 13157                           
 13158                           ;incstack = 0
 13159                           ; Regs used in _I2C_SetCallback: [wreg+fsr1l+fsr1h+status,2+status,0]
 13160                           ;I2C_SetCallback@idx stored from wreg
 13161  10D7  00AD               	movwf	I2C_SetCallback@idx
 13162                           
 13163                           ;mcc_generated_files/i2c_master.c: 298: static void I2C_SetCallback(i2c_callbackIndex_t 
      +                          idx, i2c_callback_t cb, void *ptr);mcc_generated_files/i2c_master.c: 299: {;mcc_generate
      +                          d_files/i2c_master.c: 300:     if(cb)
 13164  10D8  0829               	movf	I2C_SetCallback@cb,w
 13165  10D9  042A               	iorwf	I2C_SetCallback@cb+1,w
 13166  10DA  1903               	btfsc	3,2
 13167  10DB  28EF               	goto	l3405
 13168                           
 13169                           ;mcc_generated_files/i2c_master.c: 301:     {;mcc_generated_files/i2c_master.c: 302:    
      +                               I2C_Status.callbackTable[idx] = cb;
 13170  10DC  352D               	lslf	I2C_SetCallback@idx,w
 13171  10DD  3E20               	addlw	(low (_I2C_Status| (0+512)))& (0+255)
 13172  10DE  0086               	movwf	6
 13173  10DF  3002               	movlw	2	; select bank4/5
 13174  10E0  0087               	movwf	7
 13175  10E1  0829               	movf	I2C_SetCallback@cb,w
 13176  10E2  3FC0               	movwi [0]fsr1
 13177  10E3  082A               	movf	I2C_SetCallback@cb+1,w
 13178  10E4  3FC1               	movwi [1]fsr1
 13179                           
 13180                           ;mcc_generated_files/i2c_master.c: 303:         I2C_Status.callbackPayload[idx] = ptr;
 13181  10E5  082B               	movf	I2C_SetCallback@ptr,w
 13182  10E6  00AC               	movwf	??_I2C_SetCallback
 13183  10E7  082D               	movf	I2C_SetCallback@idx,w
 13184  10E8  3E2C               	addlw	(low ((_I2C_Status| (0+512)+12)))& (0+255)
 13185  10E9  0086               	movwf	6
 13186  10EA  3002               	movlw	2	; select bank4/5
 13187  10EB  0087               	movwf	7
 13188  10EC  082C               	movf	??_I2C_SetCallback,w
 13189  10ED  0081               	movwf	1
 13190                           
 13191                           ;mcc_generated_files/i2c_master.c: 304:     }
 13192  10EE  0008               	return
 13193  10EF                     l3405:
 13194                           
 13195                           ;mcc_generated_files/i2c_master.c: 306:     {;mcc_generated_files/i2c_master.c: 307:    
      +                               I2C_Status.callbackTable[idx] = I2C_CallbackReturnStop;
 13196  10EF  352D               	lslf	I2C_SetCallback@idx,w
 13197  10F0  3E20               	addlw	(low (_I2C_Status| (0+512)))& (0+255)
 13198  10F1  0086               	movwf	6
 13199  10F2  3002               	movlw	2	; select bank4/5
 13200  10F3  0087               	movwf	7
 13201  10F4  3047               	movlw	low _I2C_CallbackReturnStop
 13202  10F5  3FC0               	movwi [0]fsr1
 13203  10F6  301D               	movlw	high _I2C_CallbackReturnStop
 13204  10F7  3FC1               	movwi [1]fsr1
 13205                           
 13206                           ;mcc_generated_files/i2c_master.c: 308:         I2C_Status.callbackPayload[idx] = ((void
      +                          *)0);
 13207  10F8  082D               	movf	I2C_SetCallback@idx,w
 13208  10F9  3E2C               	addlw	(low ((_I2C_Status| (0+512)+12)))& (0+255)
 13209  10FA  0086               	movwf	6
 13210  10FB  3002               	movlw	2	; select bank4/5
 13211  10FC  0087               	movwf	7
 13212  10FD  0181               	clrf	1
 13213  10FE  0008               	return
 13214  10FF                     __end_of_I2C_SetCallback:
 13215                           
 13216                           	psect	text73
 13217  1ED1                     __ptext73:	
 13218 ;; *************** function _I2C_SetBuffer *****************
 13219 ;; Defined at:
 13220 ;;		line 263 in file "mcc_generated_files/i2c_master.c"
 13221 ;; Parameters:    Size  Location     Type
 13222 ;;  buffer          1    wreg     PTR void 
 13223 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
 13224 ;;		 -> MCP3422_ReadVoltage@data(3), MCP3422_Write@data(1), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), 
 13225 ;;		 -> bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1
      +), 
 13226 ;;		 -> I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), 
 13227 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13228 ;;  bufferSize      2    9[BANK0 ] unsigned int 
 13229 ;; Auto vars:     Size  Location     Type
 13230 ;;  buffer          1   12[BANK0 ] PTR void 
 13231 ;;		 -> I2C_Read1ByteRegister@returnValue.data(2), I2C_Read2ByteRegister@returnValue.data(2), I2C_Write1ByteRegister@dat
      +a.data(2), I2C_Write2ByteRegister@data.data(2), 
 13232 ;;		 -> MCP3422_ReadVoltage@data(3), MCP3422_Write@data(1), I2C_ReadDataBlock@reg(1), I2C_ReadDataBlock@bufferBlock(3), 
 13233 ;;		 -> bufferBlock.data(2), I2C_Write2ByteRegister@reg(1), I2C_Write2ByteRegister@data(2), I2C_Write1ByteRegister@reg(1
      +), 
 13234 ;;		 -> I2C_Write1ByteRegister@data(1), I2C_Read2ByteRegister@reg(1), I2C_Read2ByteRegister@returnValue(2), NULL(0), 
 13235 ;;		 -> I2C_Read1ByteRegister@reg(1), I2C_Read1ByteRegister@returnValue(1), 
 13236 ;; Return value:  Size  Location     Type
 13237 ;;                  1    wreg      void 
 13238 ;; Registers used:
 13239 ;;		wreg
 13240 ;; Tracked objects:
 13241 ;;		On entry : 1F/0
 13242 ;;		On exit  : 1F/4
 13243 ;;		Unchanged: 0/0
 13244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13245 ;;      Params:         0       2       0       0       0       0       0       0
 13246 ;;      Locals:         0       1       0       0       0       0       0       0
 13247 ;;      Temps:          0       1       0       0       0       0       0       0
 13248 ;;      Totals:         0       4       0       0       0       0       0       0
 13249 ;;Total ram usage:        4 bytes
 13250 ;; Hardware stack levels used: 1
 13251 ;; Hardware stack levels required when called: 4
 13252 ;; This function calls:
 13253 ;;		Nothing
 13254 ;; This function is called by:
 13255 ;;		_I2C_WriteNBytes
 13256 ;;		_I2C_ReadNBytes
 13257 ;;		_rd1RegCompleteHandler
 13258 ;;		_rd2RegCompleteHandler
 13259 ;;		_wr1RegCompleteHandler
 13260 ;;		_wr2RegCompleteHandler
 13261 ;;		_rdBlkRegCompleteHandler
 13262 ;; This function uses a non-reentrant model
 13263 ;;
 13264                           
 13265  1ED1                     _I2C_SetBuffer:	
 13266                           ;psect for function _I2C_SetBuffer
 13267                           
 13268                           
 13269                           ;incstack = 0
 13270                           ; Regs used in _I2C_SetBuffer: [wreg]
 13271                           ;I2C_SetBuffer@buffer stored from wreg
 13272  1ED1  00AC               	movwf	I2C_SetBuffer@buffer
 13273                           
 13274                           ;mcc_generated_files/i2c_master.c: 263: void I2C_SetBuffer(void *buffer, size_t bufferSi
      +                          ze);mcc_generated_files/i2c_master.c: 264: {;mcc_generated_files/i2c_master.c: 265:     
      +                          if(I2C_Status.bufferFree)
 13275  1ED2  0024               	movlb	4	; select bank4
 13276  1ED3  1DBC               	btfss	(_I2C_Status^(0+512)+28),3
 13277  1ED4  0008               	return
 13278                           
 13279                           ;mcc_generated_files/i2c_master.c: 266:     {;mcc_generated_files/i2c_master.c: 267:    
      +                               I2C_Status.data_ptr = buffer;
 13280  1ED5  0020               	movlb	0	; select bank0
 13281  1ED6  082C               	movf	I2C_SetBuffer@buffer,w
 13282  1ED7  00AB               	movwf	??_I2C_SetBuffer
 13283  1ED8  082B               	movf	??_I2C_SetBuffer,w
 13284  1ED9  0024               	movlb	4	; select bank4
 13285  1EDA  00B7               	movwf	(low ((_I2C_Status| (0+512)+23)))^0
 13286                           
 13287                           ;mcc_generated_files/i2c_master.c: 268:         I2C_Status.data_length = bufferSize;
 13288  1EDB  0020               	movlb	0	; select bank0
 13289  1EDC  082A               	movf	I2C_SetBuffer@bufferSize+1,w
 13290  1EDD  0024               	movlb	4	; select bank4
 13291  1EDE  00B9               	movwf	((_I2C_Status+1)^(0+512)+24)
 13292  1EDF  0020               	movlb	0	; select bank0
 13293  1EE0  0829               	movf	I2C_SetBuffer@bufferSize,w
 13294  1EE1  0024               	movlb	4	; select bank4
 13295  1EE2  00B8               	movwf	(_I2C_Status^(0+512)+24)
 13296                           
 13297                           ;mcc_generated_files/i2c_master.c: 269:         I2C_Status.bufferFree = 0;
 13298  1EE3  11BC               	bcf	(_I2C_Status^(0+512)+28),3
 13299  1EE4  0008               	return
 13300  1EE5                     __end_of_I2C_SetBuffer:
 13301                           
 13302                           	psect	text74
 13303  1D5B                     __ptext74:	
 13304 ;; *************** function _I2C_MasterStop *****************
 13305 ;; Defined at:
 13306 ;;		line 593 in file "mcc_generated_files/i2c_master.c"
 13307 ;; Parameters:    Size  Location     Type
 13308 ;;		None
 13309 ;; Auto vars:     Size  Location     Type
 13310 ;;		None
 13311 ;; Return value:  Size  Location     Type
 13312 ;;                  1    wreg      void 
 13313 ;; Registers used:
 13314 ;;		None
 13315 ;; Tracked objects:
 13316 ;;		On entry : 1F/0
 13317 ;;		On exit  : 1F/4
 13318 ;;		Unchanged: 0/0
 13319 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13320 ;;      Params:         0       0       0       0       0       0       0       0
 13321 ;;      Locals:         0       0       0       0       0       0       0       0
 13322 ;;      Temps:          0       0       0       0       0       0       0       0
 13323 ;;      Totals:         0       0       0       0       0       0       0       0
 13324 ;;Total ram usage:        0 bytes
 13325 ;; Hardware stack levels used: 1
 13326 ;; Hardware stack levels required when called: 4
 13327 ;; This function calls:
 13328 ;;		Nothing
 13329 ;; This function is called by:
 13330 ;;		_I2C_DO_SEND_STOP
 13331 ;; This function uses a non-reentrant model
 13332 ;;
 13333                           
 13334  1D5B                     _I2C_MasterStop:	
 13335                           ;psect for function _I2C_MasterStop
 13336                           
 13337                           
 13338                           ;mcc_generated_files/i2c_master.c: 595:     SSP1CON2bits.PEN = 1;
 13339                           
 13340                           ;incstack = 0
 13341                           ; Regs used in _I2C_MasterStop: []
 13342  1D5B  0024               	movlb	4	; select bank4
 13343  1D5C  1516               	bsf	22,2	;volatile
 13344  1D5D  0008               	return
 13345  1D5E                     __end_of_I2C_MasterStop:
 13346                           
 13347                           	psect	text75
 13348  1D58                     __ptext75:	
 13349 ;; *************** function _I2C_MasterEnableRestart *****************
 13350 ;; Defined at:
 13351 ;;		line 573 in file "mcc_generated_files/i2c_master.c"
 13352 ;; Parameters:    Size  Location     Type
 13353 ;;		None
 13354 ;; Auto vars:     Size  Location     Type
 13355 ;;		None
 13356 ;; Return value:  Size  Location     Type
 13357 ;;                  1    wreg      void 
 13358 ;; Registers used:
 13359 ;;		None
 13360 ;; Tracked objects:
 13361 ;;		On entry : 1F/0
 13362 ;;		On exit  : 1F/4
 13363 ;;		Unchanged: 0/0
 13364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13365 ;;      Params:         0       0       0       0       0       0       0       0
 13366 ;;      Locals:         0       0       0       0       0       0       0       0
 13367 ;;      Temps:          0       0       0       0       0       0       0       0
 13368 ;;      Totals:         0       0       0       0       0       0       0       0
 13369 ;;Total ram usage:        0 bytes
 13370 ;; Hardware stack levels used: 1
 13371 ;; Hardware stack levels required when called: 4
 13372 ;; This function calls:
 13373 ;;		Nothing
 13374 ;; This function is called by:
 13375 ;;		_I2C_DO_SEND_RESTART_READ
 13376 ;;		_I2C_DO_SEND_RESTART_WRITE
 13377 ;;		_I2C_DO_SEND_RESTART
 13378 ;; This function uses a non-reentrant model
 13379 ;;
 13380                           
 13381  1D58                     _I2C_MasterEnableRestart:	
 13382                           ;psect for function _I2C_MasterEnableRestart
 13383                           
 13384                           
 13385                           ;mcc_generated_files/i2c_master.c: 575:     SSP1CON2bits.RSEN = 1;
 13386                           
 13387                           ;incstack = 0
 13388                           ; Regs used in _I2C_MasterEnableRestart: []
 13389  1D58  0024               	movlb	4	; select bank4
 13390  1D59  1496               	bsf	22,1	;volatile
 13391  1D5A  0008               	return
 13392  1D5B                     __end_of_I2C_MasterEnableRestart:
 13393                           
 13394                           	psect	text76
 13395  1D45                     __ptext76:	
 13396 ;; *************** function _I2C_MasterStart *****************
 13397 ;; Defined at:
 13398 ;;		line 588 in file "mcc_generated_files/i2c_master.c"
 13399 ;; Parameters:    Size  Location     Type
 13400 ;;		None
 13401 ;; Auto vars:     Size  Location     Type
 13402 ;;		None
 13403 ;; Return value:  Size  Location     Type
 13404 ;;                  1    wreg      void 
 13405 ;; Registers used:
 13406 ;;		None
 13407 ;; Tracked objects:
 13408 ;;		On entry : 1F/4
 13409 ;;		On exit  : 1F/4
 13410 ;;		Unchanged: 0/0
 13411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13412 ;;      Params:         0       0       0       0       0       0       0       0
 13413 ;;      Locals:         0       0       0       0       0       0       0       0
 13414 ;;      Temps:          0       0       0       0       0       0       0       0
 13415 ;;      Totals:         0       0       0       0       0       0       0       0
 13416 ;;Total ram usage:        0 bytes
 13417 ;; Hardware stack levels used: 1
 13418 ;; Hardware stack levels required when called: 4
 13419 ;; This function calls:
 13420 ;;		Nothing
 13421 ;; This function is called by:
 13422 ;;		_I2C_MasterOperation
 13423 ;; This function uses a non-reentrant model
 13424 ;;
 13425                           
 13426  1D45                     _I2C_MasterStart:	
 13427                           ;psect for function _I2C_MasterStart
 13428                           
 13429                           
 13430                           ;mcc_generated_files/i2c_master.c: 590:     SSP1CON2bits.SEN = 1;
 13431                           
 13432                           ;incstack = 0
 13433                           ; Regs used in _I2C_MasterStart: []
 13434  1D45  1416               	bsf	22,0	;volatile
 13435  1D46  0008               	return
 13436  1D47                     __end_of_I2C_MasterStart:
 13437                           
 13438                           	psect	text77
 13439  1F87                     __ptext77:	
 13440 ;; *************** function _I2C_Close *****************
 13441 ;; Defined at:
 13442 ;;		line 209 in file "mcc_generated_files/i2c_master.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;		None
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;  returnValue     1   10[BANK0 ] enum E355
 13447 ;; Return value:  Size  Location     Type
 13448 ;;                  1    wreg      enum E355
 13449 ;; Registers used:
 13450 ;;		wreg, status,2, status,0, pclath, cstack
 13451 ;; Tracked objects:
 13452 ;;		On entry : 1F/0
 13453 ;;		On exit  : 1F/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13456 ;;      Params:         0       0       0       0       0       0       0       0
 13457 ;;      Locals:         0       1       0       0       0       0       0       0
 13458 ;;      Temps:          0       1       0       0       0       0       0       0
 13459 ;;      Totals:         0       2       0       0       0       0       0       0
 13460 ;;Total ram usage:        2 bytes
 13461 ;; Hardware stack levels used: 1
 13462 ;; Hardware stack levels required when called: 5
 13463 ;; This function calls:
 13464 ;;		_I2C_MasterClearIrq
 13465 ;;		_I2C_MasterClose
 13466 ;;		_I2C_MasterDisableIrq
 13467 ;; This function is called by:
 13468 ;;		_I2C_WriteNBytes
 13469 ;;		_I2C_ReadNBytes
 13470 ;; This function uses a non-reentrant model
 13471 ;;
 13472                           
 13473  1F87                     _I2C_Close:	
 13474                           ;psect for function _I2C_Close
 13475                           
 13476                           
 13477                           ;mcc_generated_files/i2c_master.c: 211:     i2c_error_t returnValue = I2C_BUSY;
 13478                           
 13479                           ;incstack = 0
 13480                           ; Regs used in _I2C_Close: [wreg+status,2+status,0+pclath+cstack]
 13481  1F87  01AA               	clrf	I2C_Close@returnValue
 13482  1F88  0AAA               	incf	I2C_Close@returnValue,f
 13483                           
 13484                           ;mcc_generated_files/i2c_master.c: 212:     if(!I2C_Status.busy)
 13485  1F89  0024               	movlb	4	; select bank4
 13486  1F8A  18BC               	btfsc	(_I2C_Status^(0+512)+28),1
 13487  1F8B  2FA0               	goto	l3785
 13488                           
 13489                           ;mcc_generated_files/i2c_master.c: 213:     {;mcc_generated_files/i2c_master.c: 214:    
      +                               I2C_Status.inUse = 0;
 13490  1F8C  113C               	bcf	(_I2C_Status^(0+512)+28),2
 13491                           
 13492                           ;mcc_generated_files/i2c_master.c: 215:         I2C_Status.address = 0xff;
 13493  1F8D  30FF               	movlw	255
 13494  1F8E  0020               	movlb	0	; select bank0
 13495  1F8F  00A9               	movwf	??_I2C_Close
 13496  1F90  0829               	movf	??_I2C_Close,w
 13497  1F91  0024               	movlb	4	; select bank4
 13498  1F92  00B6               	movwf	(_I2C_Status^(0+512)+22)
 13499                           
 13500                           ;mcc_generated_files/i2c_master.c: 216:         I2C_MasterClearIrq();
 13501  1F93  319D  254F  319F   	fcall	_I2C_MasterClearIrq
 13502                           
 13503                           ;mcc_generated_files/i2c_master.c: 217:         I2C_MasterDisableIrq();
 13504  1F96  319D  2555  319F   	fcall	_I2C_MasterDisableIrq
 13505                           
 13506                           ;mcc_generated_files/i2c_master.c: 218:         I2C_MasterClose();
 13507  1F99  319D  2552         	fcall	_I2C_MasterClose
 13508                           
 13509                           ;mcc_generated_files/i2c_master.c: 219:         returnValue = I2C_Status.error;
 13510  1F9B  083B               	movf	(_I2C_Status^(0+512)+27),w
 13511  1F9C  0020               	movlb	0	; select bank0
 13512  1F9D  00A9               	movwf	??_I2C_Close
 13513  1F9E  0829               	movf	??_I2C_Close,w
 13514  1F9F  00AA               	movwf	I2C_Close@returnValue
 13515  1FA0                     l3785:
 13516                           
 13517                           ;mcc_generated_files/i2c_master.c: 221:     return returnValue;
 13518  1FA0  0020               	movlb	0	; select bank0
 13519  1FA1  082A               	movf	I2C_Close@returnValue,w
 13520  1FA2  0008               	return
 13521  1FA3                     __end_of_I2C_Close:
 13522                           
 13523                           	psect	text78
 13524  1D55                     __ptext78:	
 13525 ;; *************** function _I2C_MasterDisableIrq *****************
 13526 ;; Defined at:
 13527 ;;		line 635 in file "mcc_generated_files/i2c_master.c"
 13528 ;; Parameters:    Size  Location     Type
 13529 ;;		None
 13530 ;; Auto vars:     Size  Location     Type
 13531 ;;		None
 13532 ;; Return value:  Size  Location     Type
 13533 ;;                  1    wreg      void 
 13534 ;; Registers used:
 13535 ;;		None
 13536 ;; Tracked objects:
 13537 ;;		On entry : 1F/0
 13538 ;;		On exit  : 1F/1
 13539 ;;		Unchanged: 0/0
 13540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13541 ;;      Params:         0       0       0       0       0       0       0       0
 13542 ;;      Locals:         0       0       0       0       0       0       0       0
 13543 ;;      Temps:          0       0       0       0       0       0       0       0
 13544 ;;      Totals:         0       0       0       0       0       0       0       0
 13545 ;;Total ram usage:        0 bytes
 13546 ;; Hardware stack levels used: 1
 13547 ;; Hardware stack levels required when called: 4
 13548 ;; This function calls:
 13549 ;;		Nothing
 13550 ;; This function is called by:
 13551 ;;		_I2C_Close
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555  1D55                     _I2C_MasterDisableIrq:	
 13556                           ;psect for function _I2C_MasterDisableIrq
 13557                           
 13558                           
 13559                           ;mcc_generated_files/i2c_master.c: 637:     PIE1bits.SSP1IE = 0;
 13560                           
 13561                           ;incstack = 0
 13562                           ; Regs used in _I2C_MasterDisableIrq: []
 13563  1D55  0021               	movlb	1	; select bank1
 13564  1D56  1191               	bcf	17,3	;volatile
 13565  1D57  0008               	return
 13566  1D58                     __end_of_I2C_MasterDisableIrq:
 13567                           
 13568                           	psect	text79
 13569  1D52                     __ptext79:	
 13570 ;; *************** function _I2C_MasterClose *****************
 13571 ;; Defined at:
 13572 ;;		line 557 in file "mcc_generated_files/i2c_master.c"
 13573 ;; Parameters:    Size  Location     Type
 13574 ;;		None
 13575 ;; Auto vars:     Size  Location     Type
 13576 ;;		None
 13577 ;; Return value:  Size  Location     Type
 13578 ;;                  1    wreg      void 
 13579 ;; Registers used:
 13580 ;;		None
 13581 ;; Tracked objects:
 13582 ;;		On entry : 1F/1
 13583 ;;		On exit  : 1F/4
 13584 ;;		Unchanged: 0/0
 13585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13586 ;;      Params:         0       0       0       0       0       0       0       0
 13587 ;;      Locals:         0       0       0       0       0       0       0       0
 13588 ;;      Temps:          0       0       0       0       0       0       0       0
 13589 ;;      Totals:         0       0       0       0       0       0       0       0
 13590 ;;Total ram usage:        0 bytes
 13591 ;; Hardware stack levels used: 1
 13592 ;; Hardware stack levels required when called: 4
 13593 ;; This function calls:
 13594 ;;		Nothing
 13595 ;; This function is called by:
 13596 ;;		_I2C_Close
 13597 ;; This function uses a non-reentrant model
 13598 ;;
 13599                           
 13600  1D52                     _I2C_MasterClose:	
 13601                           ;psect for function _I2C_MasterClose
 13602                           
 13603                           
 13604                           ;mcc_generated_files/i2c_master.c: 560:     SSP1CON1bits.SSPEN = 0;
 13605                           
 13606                           ;incstack = 0
 13607                           ; Regs used in _I2C_MasterClose: []
 13608  1D52  0024               	movlb	4	; select bank4
 13609  1D53  1295               	bcf	21,5	;volatile
 13610  1D54  0008               	return
 13611  1D55                     __end_of_I2C_MasterClose:
 13612                           
 13613                           	psect	text80
 13614  1D4F                     __ptext80:	
 13615 ;; *************** function _I2C_MasterClearIrq *****************
 13616 ;; Defined at:
 13617 ;;		line 640 in file "mcc_generated_files/i2c_master.c"
 13618 ;; Parameters:    Size  Location     Type
 13619 ;;		None
 13620 ;; Auto vars:     Size  Location     Type
 13621 ;;		None
 13622 ;; Return value:  Size  Location     Type
 13623 ;;                  1    wreg      void 
 13624 ;; Registers used:
 13625 ;;		None
 13626 ;; Tracked objects:
 13627 ;;		On entry : 1B/4
 13628 ;;		On exit  : 1F/0
 13629 ;;		Unchanged: 0/0
 13630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13631 ;;      Params:         0       0       0       0       0       0       0       0
 13632 ;;      Locals:         0       0       0       0       0       0       0       0
 13633 ;;      Temps:          0       0       0       0       0       0       0       0
 13634 ;;      Totals:         0       0       0       0       0       0       0       0
 13635 ;;Total ram usage:        0 bytes
 13636 ;; Hardware stack levels used: 1
 13637 ;; Hardware stack levels required when called: 4
 13638 ;; This function calls:
 13639 ;;		Nothing
 13640 ;; This function is called by:
 13641 ;;		_I2C_Open
 13642 ;;		_I2C_Close
 13643 ;;		_I2C_MasterFsm
 13644 ;; This function uses a non-reentrant model
 13645 ;;
 13646                           
 13647  1D4F                     _I2C_MasterClearIrq:	
 13648                           ;psect for function _I2C_MasterClearIrq
 13649                           
 13650                           
 13651                           ;mcc_generated_files/i2c_master.c: 642:     PIR1bits.SSP1IF = 0;
 13652                           
 13653                           ;incstack = 0
 13654                           ; Regs used in _I2C_MasterClearIrq: []
 13655  1D4F  0020               	movlb	0	; select bank0
 13656  1D50  1191               	bcf	17,3	;volatile
 13657  1D51  0008               	return
 13658  1D52                     __end_of_I2C_MasterClearIrq:
 13659                           
 13660                           	psect	text81
 13661  1EE5                     __ptext81:	
 13662 ;; *************** function _InitModbusSlave *****************
 13663 ;; Defined at:
 13664 ;;		line 17 in file "modbus_slave.c"
 13665 ;; Parameters:    Size  Location     Type
 13666 ;;  u8SlaveId       1    wreg     unsigned char 
 13667 ;; Auto vars:     Size  Location     Type
 13668 ;;  u8SlaveId       1   10[BANK0 ] unsigned char 
 13669 ;; Return value:  Size  Location     Type
 13670 ;;                  1    wreg      void 
 13671 ;; Registers used:
 13672 ;;		wreg, status,2
 13673 ;; Tracked objects:
 13674 ;;		On entry : 1F/3
 13675 ;;		On exit  : 1F/2
 13676 ;;		Unchanged: 0/0
 13677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13678 ;;      Params:         0       0       0       0       0       0       0       0
 13679 ;;      Locals:         0       1       0       0       0       0       0       0
 13680 ;;      Temps:          0       1       0       0       0       0       0       0
 13681 ;;      Totals:         0       2       0       0       0       0       0       0
 13682 ;;Total ram usage:        2 bytes
 13683 ;; Hardware stack levels used: 1
 13684 ;; Hardware stack levels required when called: 4
 13685 ;; This function calls:
 13686 ;;		Nothing
 13687 ;; This function is called by:
 13688 ;;		_main
 13689 ;; This function uses a non-reentrant model
 13690 ;;
 13691                           
 13692  1EE5                     _InitModbusSlave:	
 13693                           ;psect for function _InitModbusSlave
 13694                           
 13695                           
 13696                           ;incstack = 0
 13697                           ; Regs used in _InitModbusSlave: [wreg+status,2]
 13698                           ;InitModbusSlave@u8SlaveId stored from wreg
 13699  1EE5  0020               	movlb	0	; select bank0
 13700  1EE6  00AA               	movwf	InitModbusSlave@u8SlaveId
 13701                           
 13702                           ;modbus_slave.c: 17: void InitModbusSlave(uint8_t u8SlaveId);modbus_slave.c: 18: {;modbu
      +                          s_slave.c: 19:     modbusSlaveData.flags.all = 0U;
 13703  1EE7  0023               	movlb	3	; select bank3
 13704  1EE8  01CA               	clrf	(_modbusSlaveData^(0+384)+42)	;volatile
 13705  1EE9  01CB               	clrf	((_modbusSlaveData+1)^(0+384)+42)	;volatile
 13706                           
 13707                           ;modbus_slave.c: 21:     modbusSlaveData.address = u8SlaveId;
 13708  1EEA  0020               	movlb	0	; select bank0
 13709  1EEB  082A               	movf	InitModbusSlave@u8SlaveId,w
 13710  1EEC  00A9               	movwf	??_InitModbusSlave
 13711  1EED  0829               	movf	??_InitModbusSlave,w
 13712  1EEE  0023               	movlb	3	; select bank3
 13713  1EEF  00CC               	movwf	(_modbusSlaveData^(0+384)+44)	;volatile
 13714                           
 13715                           ;modbus_slave.c: 23:     modbusSlaveData.RxPointer = 0U;
 13716  1EF0  01C7               	clrf	(_modbusSlaveData^(0+384)+39)	;volatile
 13717                           
 13718                           ;modbus_slave.c: 24:     modbusSlaveData.TotalRxValue = 8;
 13719  1EF1  3008               	movlw	8
 13720  1EF2  0020               	movlb	0	; select bank0
 13721  1EF3  00A9               	movwf	??_InitModbusSlave
 13722  1EF4  0829               	movf	??_InitModbusSlave,w
 13723  1EF5  0023               	movlb	3	; select bank3
 13724  1EF6  00C9               	movwf	(_modbusSlaveData^(0+384)+41)	;volatile
 13725  1EF7  0022               	movlb	2	; select bank2
 13726  1EF8  138E               	bcf	14,7	;volatile
 13727  1EF9  0008               	return
 13728  1EFA                     __end_of_InitModbusSlave:
 13729                           
 13730                           	psect	text82
 13731  12A0                     __ptext82:	
 13732 ;; *************** function _FLASH_WriteBlock *****************
 13733 ;; Defined at:
 13734 ;;		line 94 in file "mcc_generated_files/memory.c"
 13735 ;; Parameters:    Size  Location     Type
 13736 ;;  writeAddr       2   12[BANK0 ] unsigned short 
 13737 ;;  flashWordArr    1   14[BANK0 ] PTR unsigned short 
 13738 ;;		 -> main@u16CalBuffer(16), 
 13739 ;; Auto vars:     Size  Location     Type
 13740 ;;  blockStartAd    2   18[BANK0 ] unsigned short 
 13741 ;;  i               1   21[BANK0 ] unsigned char 
 13742 ;;  GIEBitValue     1   20[BANK0 ] unsigned char 
 13743 ;; Return value:  Size  Location     Type
 13744 ;;                  1    wreg      char 
 13745 ;; Registers used:
 13746 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13747 ;; Tracked objects:
 13748 ;;		On entry : 1F/0
 13749 ;;		On exit  : 1F/0
 13750 ;;		Unchanged: 0/0
 13751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13752 ;;      Params:         0       3       0       0       0       0       0       0
 13753 ;;      Locals:         0       4       0       0       0       0       0       0
 13754 ;;      Temps:          0       3       0       0       0       0       0       0
 13755 ;;      Totals:         0      10       0       0       0       0       0       0
 13756 ;;Total ram usage:       10 bytes
 13757 ;; Hardware stack levels used: 1
 13758 ;; Hardware stack levels required when called: 5
 13759 ;; This function calls:
 13760 ;;		_FLASH_EraseBlock
 13761 ;; This function is called by:
 13762 ;;		_main
 13763 ;; This function uses a non-reentrant model
 13764 ;;
 13765                           
 13766  12A0                     _FLASH_WriteBlock:	
 13767                           ;psect for function _FLASH_WriteBlock
 13768                           
 13769                           
 13770                           ;mcc_generated_files/memory.c: 94: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t 
      +                          *flashWordArray);mcc_generated_files/memory.c: 95: {;mcc_generated_files/memory.c: 96:  
      +                             uint16_t blockStartAddr = (uint16_t )(writeAddr & ((0x2000 -1) ^ (32 -1)));
 13771                           
 13772                           ;incstack = 0
 13773                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13774  12A0  30E0               	movlw	224
 13775  12A1  052C               	andwf	FLASH_WriteBlock@writeAddr,w
 13776  12A2  00B2               	movwf	FLASH_WriteBlock@blockStartAddr
 13777  12A3  301F               	movlw	31
 13778  12A4  052D               	andwf	FLASH_WriteBlock@writeAddr+1,w
 13779  12A5  00B3               	movwf	FLASH_WriteBlock@blockStartAddr+1
 13780                           
 13781                           ;mcc_generated_files/memory.c: 97:     uint8_t GIEBitValue = INTCONbits.GIE;
 13782  12A6  3000               	movlw	0
 13783  12A7  1B8B               	btfsc	11,7	;volatile
 13784  12A8  3001               	movlw	1
 13785  12A9  00B4               	movwf	FLASH_WriteBlock@GIEBitValue
 13786                           
 13787                           ;mcc_generated_files/memory.c: 98:     uint8_t i;;mcc_generated_files/memory.c: 101:    
      +                           if( writeAddr != blockStartAddr )
 13788  12AA  0833               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 13789  12AB  062D               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 13790  12AC  1D03               	skipz
 13791  12AD  2AB0               	goto	u3835
 13792  12AE  0832               	movf	FLASH_WriteBlock@blockStartAddr,w
 13793  12AF  062C               	xorwf	FLASH_WriteBlock@writeAddr,w
 13794  12B0                     u3835:
 13795  12B0  1D03               	btfss	3,2
 13796  12B1  0008               	return
 13797                           
 13798                           ;mcc_generated_files/memory.c: 106:     INTCONbits.GIE = 0;
 13799                           
 13800                           ;mcc_generated_files/memory.c: 104:     }
 13801  12B2  138B               	bcf	11,7	;volatile
 13802                           
 13803                           ;mcc_generated_files/memory.c: 109:     FLASH_EraseBlock(writeAddr);
 13804  12B3  082D               	movf	FLASH_WriteBlock@writeAddr+1,w
 13805  12B4  00AA               	movwf	FLASH_EraseBlock@startAddr+1
 13806  12B5  082C               	movf	FLASH_WriteBlock@writeAddr,w
 13807  12B6  00A9               	movwf	FLASH_EraseBlock@startAddr
 13808  12B7  3190  2000  3192   	fcall	_FLASH_EraseBlock
 13809                           
 13810                           ;mcc_generated_files/memory.c: 112:     PMCON1bits.CFGS = 0;
 13811  12BA  0023               	movlb	3	; select bank3
 13812  12BB  1315               	bcf	21,6	;volatile
 13813                           
 13814                           ;mcc_generated_files/memory.c: 113:     PMCON1bits.WREN = 1;
 13815  12BC  1515               	bsf	21,2	;volatile
 13816                           
 13817                           ;mcc_generated_files/memory.c: 114:     PMCON1bits.LWLO = 1;
 13818  12BD  1695               	bsf	21,5	;volatile
 13819                           
 13820                           ;mcc_generated_files/memory.c: 116:     for (i=0; i<32; i++)
 13821  12BE  0020               	movlb	0	; select bank0
 13822  12BF  01B5               	clrf	FLASH_WriteBlock@i
 13823  12C0                     l4825:
 13824                           
 13825                           ;mcc_generated_files/memory.c: 117:     {;mcc_generated_files/memory.c: 119:         PMA
      +                          DRL = (writeAddr & 0xFF);
 13826  12C0  082C               	movf	FLASH_WriteBlock@writeAddr,w
 13827  12C1  0023               	movlb	3	; select bank3
 13828  12C2  0091               	movwf	17	;volatile
 13829                           
 13830                           ;mcc_generated_files/memory.c: 121:         PMADRH = ((writeAddr & 0xFF00) >> 8);
 13831  12C3  0020               	movlb	0	; select bank0
 13832  12C4  082D               	movf	FLASH_WriteBlock@writeAddr+1,w
 13833  12C5  0023               	movlb	3	; select bank3
 13834  12C6  0092               	movwf	18	;volatile
 13835                           
 13836                           ;mcc_generated_files/memory.c: 124:         PMDATL = flashWordArray[i];
 13837  12C7  0020               	movlb	0	; select bank0
 13838  12C8  3535               	lslf	FLASH_WriteBlock@i,w
 13839  12C9  072E               	addwf	FLASH_WriteBlock@flashWordArray,w
 13840  12CA  00AF               	movwf	??_FLASH_WriteBlock
 13841  12CB  082F               	movf	??_FLASH_WriteBlock,w
 13842  12CC  0086               	movwf	6
 13843  12CD  3001               	movlw	1	; select bank2/3
 13844  12CE  0087               	movwf	7
 13845  12CF  0801               	movf	1,w
 13846  12D0  0023               	movlb	3	; select bank3
 13847  12D1  0093               	movwf	19	;volatile
 13848                           
 13849                           ;mcc_generated_files/memory.c: 125:         PMDATH = ((flashWordArray[i] & 0xFF00) >> 8)
      +                          ;
 13850  12D2  0020               	movlb	0	; select bank0
 13851  12D3  3535               	lslf	FLASH_WriteBlock@i,w
 13852  12D4  072E               	addwf	FLASH_WriteBlock@flashWordArray,w
 13853  12D5  00AF               	movwf	??_FLASH_WriteBlock
 13854  12D6  082F               	movf	??_FLASH_WriteBlock,w
 13855  12D7  0086               	movwf	6
 13856  12D8  3001               	movlw	1	; select bank2/3
 13857  12D9  0087               	movwf	7
 13858  12DA  3F40               	moviw [0]fsr1
 13859  12DB  00B0               	movwf	??_FLASH_WriteBlock+1
 13860  12DC  3F41               	moviw [1]fsr1
 13861  12DD  00B1               	movwf	??_FLASH_WriteBlock+2
 13862  12DE  0831               	movf	??_FLASH_WriteBlock+2,w
 13863  12DF  0023               	movlb	3	; select bank3
 13864  12E0  0094               	movwf	20	;volatile
 13865                           
 13866                           ;mcc_generated_files/memory.c: 127:         if(i == (32 -1))
 13867  12E1  301F               	movlw	31
 13868  12E2  0020               	movlb	0	; select bank0
 13869  12E3  0635               	xorwf	FLASH_WriteBlock@i,w
 13870  12E4  1D03               	btfss	3,2
 13871  12E5  2AE8               	goto	l4835
 13872                           
 13873                           ;mcc_generated_files/memory.c: 128:         {;mcc_generated_files/memory.c: 130:        
      +                               PMCON1bits.LWLO = 0;
 13874  12E6  0023               	movlb	3	; select bank3
 13875  12E7  1295               	bcf	21,5	;volatile
 13876  12E8                     l4835:
 13877                           
 13878                           ;mcc_generated_files/memory.c: 133:         PMCON2 = 0x55;
 13879  12E8  3055               	movlw	85
 13880  12E9  0023               	movlb	3	; select bank3
 13881  12EA  0096               	movwf	22	;volsfr
 13882                           
 13883                           ;mcc_generated_files/memory.c: 134:         PMCON2 = 0xAA;
 13884  12EB  30AA               	movlw	170
 13885  12EC  0096               	movwf	22	;volsfr
 13886                           
 13887                           ;mcc_generated_files/memory.c: 135:         PMCON1bits.WR = 1;
 13888  12ED  1495               	bsf	21,1	;volatile
 13889                           
 13890                           ;mcc_generated_files/memory.c: 136:         __nop();
 13891  12EE  0000               	nop
 13892                           
 13893                           ;mcc_generated_files/memory.c: 137:         __nop();
 13894  12EF  0000               	nop
 13895                           
 13896                           ;mcc_generated_files/memory.c: 139:      writeAddr++;
 13897  12F0  3001               	movlw	1
 13898  12F1  0020               	movlb	0	; select bank0
 13899  12F2  07AC               	addwf	FLASH_WriteBlock@writeAddr,f
 13900  12F3  3000               	movlw	0
 13901  12F4  3DAD               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 13902                           
 13903                           ;mcc_generated_files/memory.c: 140:     }
 13904  12F5  3001               	movlw	1
 13905  12F6  00AF               	movwf	??_FLASH_WriteBlock
 13906  12F7  082F               	movf	??_FLASH_WriteBlock,w
 13907  12F8  07B5               	addwf	FLASH_WriteBlock@i,f
 13908  12F9  3020               	movlw	32
 13909  12FA  0235               	subwf	FLASH_WriteBlock@i,w
 13910  12FB  1C03               	skipc
 13911  12FC  2AC0               	goto	l4825
 13912                           
 13913                           ;mcc_generated_files/memory.c: 142:     PMCON1bits.WREN = 0;
 13914  12FD  0023               	movlb	3	; select bank3
 13915  12FE  1115               	bcf	21,2	;volatile
 13916                           
 13917                           ;mcc_generated_files/memory.c: 143:     INTCONbits.GIE = GIEBitValue;
 13918  12FF  0020               	movlb	0	; select bank0
 13919  1300  0C34               	rrf	FLASH_WriteBlock@GIEBitValue,w
 13920  1301  1C03               	skipc
 13921  1302  138B               	bcf	11,7	;volatile
 13922  1303  1803               	skipnc
 13923  1304  178B               	bsf	11,7	;volatile
 13924  1305  0008               	return
 13925  1306                     __end_of_FLASH_WriteBlock:
 13926                           
 13927                           	psect	text83
 13928  1000                     __ptext83:	
 13929 ;; *************** function _FLASH_EraseBlock *****************
 13930 ;; Defined at:
 13931 ;;		line 148 in file "mcc_generated_files/memory.c"
 13932 ;; Parameters:    Size  Location     Type
 13933 ;;  startAddr       2    9[BANK0 ] unsigned short 
 13934 ;; Auto vars:     Size  Location     Type
 13935 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 13936 ;; Return value:  Size  Location     Type
 13937 ;;                  1    wreg      void 
 13938 ;; Registers used:
 13939 ;;		wreg, status,2, status,0
 13940 ;; Tracked objects:
 13941 ;;		On entry : 1F/0
 13942 ;;		On exit  : 1F/0
 13943 ;;		Unchanged: 0/0
 13944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 13945 ;;      Params:         0       2       0       0       0       0       0       0
 13946 ;;      Locals:         0       1       0       0       0       0       0       0
 13947 ;;      Temps:          0       0       0       0       0       0       0       0
 13948 ;;      Totals:         0       3       0       0       0       0       0       0
 13949 ;;Total ram usage:        3 bytes
 13950 ;; Hardware stack levels used: 1
 13951 ;; Hardware stack levels required when called: 4
 13952 ;; This function calls:
 13953 ;;		Nothing
 13954 ;; This function is called by:
 13955 ;;		_FLASH_WriteBlock
 13956 ;; This function uses a non-reentrant model
 13957 ;;
 13958                           
 13959  1000                     _FLASH_EraseBlock:	
 13960                           ;psect for function _FLASH_EraseBlock
 13961                           
 13962                           
 13963                           ;mcc_generated_files/memory.c: 148: void FLASH_EraseBlock(uint16_t startAddr);mcc_genera
      +                          ted_files/memory.c: 149: {;mcc_generated_files/memory.c: 150:     uint8_t GIEBitValue = 
      +                          INTCONbits.GIE;
 13964                           
 13965                           ;incstack = 0
 13966                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 13967  1000  3000               	movlw	0
 13968  1001  1B8B               	btfsc	11,7	;volatile
 13969  1002  3001               	movlw	1
 13970  1003  00AB               	movwf	FLASH_EraseBlock@GIEBitValue
 13971                           
 13972                           ;mcc_generated_files/memory.c: 153:     INTCONbits.GIE = 0;
 13973  1004  138B               	bcf	11,7	;volatile
 13974                           
 13975                           ;mcc_generated_files/memory.c: 155:     PMADRL = (startAddr & 0xFF);
 13976  1005  0829               	movf	FLASH_EraseBlock@startAddr,w
 13977  1006  0023               	movlb	3	; select bank3
 13978  1007  0091               	movwf	17	;volatile
 13979                           
 13980                           ;mcc_generated_files/memory.c: 157:     PMADRH = ((startAddr & 0xFF00) >> 8);
 13981  1008  0020               	movlb	0	; select bank0
 13982  1009  082A               	movf	FLASH_EraseBlock@startAddr+1,w
 13983  100A  0023               	movlb	3	; select bank3
 13984  100B  0092               	movwf	18	;volatile
 13985                           
 13986                           ;mcc_generated_files/memory.c: 160:     PMCON1bits.CFGS = 0;
 13987  100C  1315               	bcf	21,6	;volatile
 13988                           
 13989                           ;mcc_generated_files/memory.c: 161:     PMCON1bits.FREE = 1;
 13990  100D  1615               	bsf	21,4	;volatile
 13991                           
 13992                           ;mcc_generated_files/memory.c: 162:     PMCON1bits.WREN = 1;
 13993  100E  1515               	bsf	21,2	;volatile
 13994                           
 13995                           ;mcc_generated_files/memory.c: 165:     PMCON2 = 0x55;
 13996  100F  3055               	movlw	85
 13997  1010  0096               	movwf	22	;volsfr
 13998                           
 13999                           ;mcc_generated_files/memory.c: 166:     PMCON2 = 0xAA;
 14000  1011  30AA               	movlw	170
 14001  1012  0096               	movwf	22	;volsfr
 14002                           
 14003                           ;mcc_generated_files/memory.c: 167:     PMCON1bits.WR = 1;
 14004  1013  1495               	bsf	21,1	;volatile
 14005                           
 14006                           ;mcc_generated_files/memory.c: 168:     __nop();
 14007  1014  0000               	nop
 14008                           
 14009                           ;mcc_generated_files/memory.c: 169:     __nop();
 14010  1015  0000               	nop
 14011                           
 14012                           ;mcc_generated_files/memory.c: 171:     PMCON1bits.WREN = 0;
 14013  1016  0023               	movlb	3	; select bank3
 14014  1017  1115               	bcf	21,2	;volatile
 14015                           
 14016                           ;mcc_generated_files/memory.c: 172:     INTCONbits.GIE = GIEBitValue;
 14017  1018  0020               	movlb	0	; select bank0
 14018  1019  0C2B               	rrf	FLASH_EraseBlock@GIEBitValue,w
 14019  101A  1C03               	skipc
 14020  101B  138B               	bcf	11,7	;volatile
 14021  101C  1803               	skipnc
 14022  101D  178B               	bsf	11,7	;volatile
 14023  101E  0008               	return
 14024  101F                     __end_of_FLASH_EraseBlock:
 14025                           
 14026                           	psect	text84
 14027  1FC1                     __ptext84:	
 14028 ;; *************** function _FLASH_ReadWord *****************
 14029 ;; Defined at:
 14030 ;;		line 58 in file "mcc_generated_files/memory.c"
 14031 ;; Parameters:    Size  Location     Type
 14032 ;;  flashAddr       2    9[BANK0 ] unsigned short 
 14033 ;; Auto vars:     Size  Location     Type
 14034 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 14035 ;; Return value:  Size  Location     Type
 14036 ;;                  2    9[BANK0 ] unsigned short 
 14037 ;; Registers used:
 14038 ;;		wreg, status,2, status,0
 14039 ;; Tracked objects:
 14040 ;;		On entry : 1F/0
 14041 ;;		On exit  : 1F/0
 14042 ;;		Unchanged: 0/0
 14043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14044 ;;      Params:         0       2       0       0       0       0       0       0
 14045 ;;      Locals:         0       1       0       0       0       0       0       0
 14046 ;;      Temps:          0       0       0       0       0       0       0       0
 14047 ;;      Totals:         0       3       0       0       0       0       0       0
 14048 ;;Total ram usage:        3 bytes
 14049 ;; Hardware stack levels used: 1
 14050 ;; Hardware stack levels required when called: 4
 14051 ;; This function calls:
 14052 ;;		Nothing
 14053 ;; This function is called by:
 14054 ;;		_main
 14055 ;; This function uses a non-reentrant model
 14056 ;;
 14057                           
 14058  1FC1                     _FLASH_ReadWord:	
 14059                           ;psect for function _FLASH_ReadWord
 14060                           
 14061                           
 14062                           ;mcc_generated_files/memory.c: 58: uint16_t FLASH_ReadWord(uint16_t flashAddr);mcc_gener
      +                          ated_files/memory.c: 59: {;mcc_generated_files/memory.c: 60:     uint8_t GIEBitValue = I
      +                          NTCONbits.GIE;
 14063                           
 14064                           ;incstack = 0
 14065                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
 14066  1FC1  3000               	movlw	0
 14067  1FC2  1B8B               	btfsc	11,7	;volatile
 14068  1FC3  3001               	movlw	1
 14069  1FC4  00AB               	movwf	FLASH_ReadWord@GIEBitValue
 14070                           
 14071                           ;mcc_generated_files/memory.c: 62:     INTCONbits.GIE = 0;
 14072  1FC5  138B               	bcf	11,7	;volatile
 14073                           
 14074                           ;mcc_generated_files/memory.c: 63:     PMADRL = (flashAddr & 0x00FF);
 14075  1FC6  0829               	movf	FLASH_ReadWord@flashAddr,w
 14076  1FC7  0023               	movlb	3	; select bank3
 14077  1FC8  0091               	movwf	17	;volatile
 14078                           
 14079                           ;mcc_generated_files/memory.c: 64:     PMADRH = ((flashAddr & 0xFF00) >> 8);
 14080  1FC9  0020               	movlb	0	; select bank0
 14081  1FCA  082A               	movf	FLASH_ReadWord@flashAddr+1,w
 14082  1FCB  0023               	movlb	3	; select bank3
 14083  1FCC  0092               	movwf	18	;volatile
 14084                           
 14085                           ;mcc_generated_files/memory.c: 66:     PMCON1bits.CFGS = 0;
 14086  1FCD  1315               	bcf	21,6	;volatile
 14087                           
 14088                           ;mcc_generated_files/memory.c: 67:     PMCON1bits.RD = 1;
 14089  1FCE  1415               	bsf	21,0	;volatile
 14090                           
 14091                           ;mcc_generated_files/memory.c: 68:     __nop();
 14092  1FCF  0000               	nop
 14093                           
 14094                           ;mcc_generated_files/memory.c: 69:     __nop();
 14095  1FD0  0000               	nop
 14096                           
 14097                           ;mcc_generated_files/memory.c: 70:     INTCONbits.GIE = GIEBitValue;
 14098  1FD1  0020               	movlb	0	; select bank0
 14099  1FD2  0C2B               	rrf	FLASH_ReadWord@GIEBitValue,w
 14100  1FD3  1C03               	skipc
 14101  1FD4  138B               	bcf	11,7	;volatile
 14102  1FD5  1803               	skipnc
 14103  1FD6  178B               	bsf	11,7	;volatile
 14104                           
 14105                           ;mcc_generated_files/memory.c: 72:     return ((uint16_t)((PMDATH << 8) | PMDATL));
 14106  1FD7  0023               	movlb	3	; select bank3
 14107  1FD8  0814               	movf	20,w	;volatile
 14108  1FD9  0020               	movlb	0	; select bank0
 14109  1FDA  00AA               	movwf	?_FLASH_ReadWord+1
 14110  1FDB  0023               	movlb	3	; select bank3
 14111  1FDC  0813               	movf	19,w	;volatile
 14112  1FDD  0020               	movlb	0	; select bank0
 14113  1FDE  00A9               	movwf	?_FLASH_ReadWord
 14114  1FDF  0008               	return
 14115  1FE0                     __end_of_FLASH_ReadWord:
 14116                           
 14117                           	psect	intentry
 14118  0004                     __pintentry:	
 14119 ;; *************** function _INTERRUPT_InterruptManager *****************
 14120 ;; Defined at:
 14121 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 14122 ;; Parameters:    Size  Location     Type
 14123 ;;		None
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;		None
 14126 ;; Return value:  Size  Location     Type
 14127 ;;                  1    wreg      void 
 14128 ;; Registers used:
 14129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14135 ;;      Params:         0       0       0       0       0       0       0       0
 14136 ;;      Locals:         0       0       0       0       0       0       0       0
 14137 ;;      Temps:          0       0       0       0       0       0       0       0
 14138 ;;      Totals:         0       0       0       0       0       0       0       0
 14139 ;;Total ram usage:        0 bytes
 14140 ;; Hardware stack levels used: 1
 14141 ;; Hardware stack levels required when called: 3
 14142 ;; This function calls:
 14143 ;;		Absolute function
 14144 ;;		_TMR0_ISR
 14145 ;;		_TMR1_ISR
 14146 ;;		_mbus_rx_handler
 14147 ;;		_mbus_tx_handler
 14148 ;; This function is called by:
 14149 ;;		Interrupt level 1
 14150 ;; This function uses a non-reentrant model
 14151 ;;
 14152                           
 14153  0004                     _INTERRUPT_InterruptManager:
 14154                           
 14155                           ;incstack = 0
 14156  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 14157                           
 14158                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14159  0005  3180               	pagesel	$
 14160                           
 14161                           ;mcc_generated_files/interrupt_manager.c: 55:     if(INTCONbits.TMR0IE == 1 && INTCONbit
      +                          s.TMR0IF == 1)
 14162  0006  1A8B               	btfsc	11,5	;volatile
 14163  0007  1D0B               	btfss	11,2	;volatile
 14164  0008  280D               	goto	i1l121
 14165                           
 14166                           ;mcc_generated_files/interrupt_manager.c: 56:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 57:         TMR0_ISR();
 14167  0009  319D  25C6  3180   	fcall	_TMR0_ISR
 14168                           
 14169                           ;mcc_generated_files/interrupt_manager.c: 58:     }
 14170  000C  2830               	goto	i1l131
 14171  000D                     i1l121:	
 14172                           ;mcc_generated_files/interrupt_manager.c: 59:     else if(INTCONbits.PEIE == 1)
 14173                           
 14174  000D  1F0B               	btfss	11,6	;volatile
 14175  000E  2830               	goto	i1l131
 14176                           
 14177                           ;mcc_generated_files/interrupt_manager.c: 60:     {;mcc_generated_files/interrupt_manage
      +                          r.c: 61:         if(PIE1bits.TXIE == 1 && PIR1bits.TXIF == 1)
 14178  000F  0021               	movlb	1	; select bank1
 14179  0010  1E11               	btfss	17,4	;volatile
 14180  0011  281B               	goto	i1l124
 14181  0012  0020               	movlb	0	; select bank0
 14182  0013  1E11               	btfss	17,4	;volatile
 14183  0014  281B               	goto	i1l124
 14184                           
 14185                           ;mcc_generated_files/interrupt_manager.c: 62:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 63:             EUSART_TxDefaultInterruptHandler();
 14186  0015  0865               	movf	_EUSART_TxDefaultInterruptHandler+1,w
 14187  0016  008A               	movwf	10
 14188  0017  0864               	movf	_EUSART_TxDefaultInterruptHandler,w
 14189  0018  000A               	callw
 14190  0019  3180               	pagesel	$
 14191                           
 14192                           ;mcc_generated_files/interrupt_manager.c: 64:         }
 14193  001A  2830               	goto	i1l131
 14194  001B                     i1l124:	
 14195                           ;mcc_generated_files/interrupt_manager.c: 65:         else if(PIE1bits.RCIE == 1 && PIR1
      +                          bits.RCIF == 1)
 14196                           
 14197  001B  0021               	movlb	1	; select bank1
 14198  001C  1E91               	btfss	17,5	;volatile
 14199  001D  2828               	goto	i1l126
 14200  001E  0020               	movlb	0	; select bank0
 14201  001F  1E91               	btfss	17,5	;volatile
 14202  0020  2828               	goto	i1l126
 14203                           
 14204                           ;mcc_generated_files/interrupt_manager.c: 66:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 67:             EUSART_RxDefaultInterruptHandler();
 14205  0021  0023               	movlb	3	; select bank3
 14206  0022  086F               	movf	(_EUSART_RxDefaultInterruptHandler+1)^(0+384),w
 14207  0023  008A               	movwf	10
 14208  0024  086E               	movf	_EUSART_RxDefaultInterruptHandler^(0+384),w
 14209  0025  000A               	callw
 14210  0026  3180               	pagesel	$
 14211                           
 14212                           ;mcc_generated_files/interrupt_manager.c: 68:         }
 14213  0027  2830               	goto	i1l131
 14214  0028                     i1l126:	
 14215                           ;mcc_generated_files/interrupt_manager.c: 69:         else if(PIE1bits.TMR1IE == 1 && PI
      +                          R1bits.TMR1IF == 1)
 14216                           
 14217  0028  0021               	movlb	1	; select bank1
 14218  0029  1C11               	btfss	17,0	;volatile
 14219  002A  2830               	goto	i1l131
 14220  002B  0020               	movlb	0	; select bank0
 14221  002C  1C11               	btfss	17,0	;volatile
 14222  002D  2830               	goto	i1l131
 14223                           
 14224                           ;mcc_generated_files/interrupt_manager.c: 70:         {;mcc_generated_files/interrupt_ma
      +                          nager.c: 71:             TMR1_ISR();
 14225  002E  319E  262E         	fcall	_TMR1_ISR
 14226  0030                     i1l131:	
 14227                           ;mcc_generated_files/interrupt_manager.c: 77:     }
 14228                           
 14229                           ;mcc_generated_files/interrupt_manager.c: 72:         }
 14230                           
 14231  0030  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 14232  0031  0009               	retfie
 14233  0032                     __end_of_INTERRUPT_InterruptManager:
 14234                           
 14235                           	psect	text86
 14236  10AF                     __ptext86:	
 14237 ;; *************** function _mbus_tx_handler *****************
 14238 ;; Defined at:
 14239 ;;		line 64 in file "modbus_slave.c"
 14240 ;; Parameters:    Size  Location     Type
 14241 ;;		None
 14242 ;; Auto vars:     Size  Location     Type
 14243 ;;		None
 14244 ;; Return value:  Size  Location     Type
 14245 ;;                  1    wreg      void 
 14246 ;; Registers used:
 14247 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14248 ;; Tracked objects:
 14249 ;;		On entry : 1F/0
 14250 ;;		On exit  : 1C/0
 14251 ;;		Unchanged: 0/0
 14252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14253 ;;      Params:         0       0       0       0       0       0       0       0
 14254 ;;      Locals:         0       0       0       0       0       0       0       0
 14255 ;;      Temps:          1       0       0       0       0       0       0       0
 14256 ;;      Totals:         1       0       0       0       0       0       0       0
 14257 ;;Total ram usage:        1 bytes
 14258 ;; Hardware stack levels used: 1
 14259 ;; This function calls:
 14260 ;;		Nothing
 14261 ;; This function is called by:
 14262 ;;		_EUSART_Initialize
 14263 ;;		_INTERRUPT_InterruptManager
 14264 ;; This function uses a non-reentrant model
 14265 ;;
 14266                           
 14267  10AF                     _mbus_tx_handler:	
 14268                           ;psect for function _mbus_tx_handler
 14269                           
 14270                           
 14271                           ;modbus_slave.c: 66:     TMR1L = 0x00; TMR1H = 0xE0; PIR1bits.TMR1IF = 0;;
 14272                           
 14273                           ;incstack = 0
 14274                           ; Regs used in _mbus_tx_handler: [wreg+fsr1l+fsr1h+status,2+status,0]
 14275  10AF  0196               	clrf	22	;volatile
 14276  10B0  30E0               	movlw	224
 14277  10B1  0097               	movwf	23	;volatile
 14278  10B2  1011               	bcf	17,0	;volatile
 14279                           
 14280                           ;modbus_slave.c: 67:     if(modbusSlaveData.TxPointer < modbusSlaveData.TotalTxValue)
 14281  10B3  0023               	movlb	3	; select bank3
 14282  10B4  0848               	movf	(_modbusSlaveData^(0+384)+40),w	;volatile
 14283  10B5  0246               	subwf	(_modbusSlaveData^(0+384)+38),w	;volatile
 14284  10B6  1803               	skipnc
 14285  10B7  28C3               	goto	i1l4919
 14286                           
 14287                           ;modbus_slave.c: 68:     {;modbus_slave.c: 69:         TXREG = modbusSlaveData.ModbusFra
      +                          me[modbusSlaveData.TxPointer++];
 14288  10B8  0846               	movf	(_modbusSlaveData^(0+384)+38),w	;volatile
 14289  10B9  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14290  10BA  0086               	movwf	6
 14291  10BB  3001               	movlw	1	; select bank3/4
 14292  10BC  0087               	movwf	7
 14293  10BD  0801               	movf	1,w
 14294  10BE  009A               	movwf	26	;volatile
 14295  10BF  3001               	movlw	1
 14296  10C0  00F0               	movwf	??_mbus_tx_handler
 14297  10C1  0870               	movf	??_mbus_tx_handler,w
 14298  10C2  07C6               	addwf	(_modbusSlaveData^(0+384)+38),f	;volatile
 14299  10C3                     i1l4919:
 14300                           
 14301                           ;modbus_slave.c: 71:     if(modbusSlaveData.TxPointer == modbusSlaveData.TotalTxValue)
 14302  10C3  0846               	movf	(_modbusSlaveData^(0+384)+38),w	;volatile
 14303  10C4  0648               	xorwf	(_modbusSlaveData^(0+384)+40),w	;volatile
 14304  10C5  1D03               	skipz
 14305  10C6  0008               	return
 14306  10C7                     i1l951:
 14307  10C7  1C9E               	btfss	30,1	;volatile
 14308  10C8  28C7               	goto	i1l951
 14309                           
 14310                           ;modbus_slave.c: 74:         PIE1bits.TXIE = 0; TXSTAbits.TXEN = 0;
 14311  10C9  0021               	movlb	1	; select bank1
 14312  10CA  1211               	bcf	17,4	;volatile
 14313  10CB  0023               	movlb	3	; select bank3
 14314  10CC  129E               	bcf	30,5	;volatile
 14315                           
 14316                           ;modbus_slave.c: 76:         modbusSlaveData.RxPointer = 0; modbusSlaveData.TotalRxValue
      +                           = 8;;
 14317  10CD  01C7               	clrf	(_modbusSlaveData^(0+384)+39)	;volatile
 14318  10CE  3008               	movlw	8
 14319  10CF  00F0               	movwf	??_mbus_tx_handler
 14320  10D0  0870               	movf	??_mbus_tx_handler,w
 14321  10D1  00C9               	movwf	(_modbusSlaveData^(0+384)+41)	;volatile
 14322  10D2  0022               	movlb	2	; select bank2
 14323  10D3  138E               	bcf	14,7	;volatile
 14324                           
 14325                           ;modbus_slave.c: 78:         T1CONbits.TMR1ON = 1;
 14326  10D4  0020               	movlb	0	; select bank0
 14327  10D5  1418               	bsf	24,0	;volatile
 14328  10D6  0008               	return
 14329  10D7                     __end_of_mbus_tx_handler:
 14330                           
 14331                           	psect	text87
 14332  1088                     __ptext87:	
 14333 ;; *************** function _mbus_rx_handler *****************
 14334 ;; Defined at:
 14335 ;;		line 45 in file "modbus_slave.c"
 14336 ;; Parameters:    Size  Location     Type
 14337 ;;		None
 14338 ;; Auto vars:     Size  Location     Type
 14339 ;;		None
 14340 ;; Return value:  Size  Location     Type
 14341 ;;                  1    wreg      void 
 14342 ;; Registers used:
 14343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14344 ;; Tracked objects:
 14345 ;;		On entry : 1F/3
 14346 ;;		On exit  : 1F/3
 14347 ;;		Unchanged: 0/0
 14348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14349 ;;      Params:         0       0       0       0       0       0       0       0
 14350 ;;      Locals:         0       0       0       0       0       0       0       0
 14351 ;;      Temps:          1       0       0       0       0       0       0       0
 14352 ;;      Totals:         1       0       0       0       0       0       0       0
 14353 ;;Total ram usage:        1 bytes
 14354 ;; Hardware stack levels used: 1
 14355 ;; Hardware stack levels required when called: 2
 14356 ;; This function calls:
 14357 ;;		_ModbusSlaveProcessReceivedQuery
 14358 ;; This function is called by:
 14359 ;;		_EUSART_Initialize
 14360 ;;		_INTERRUPT_InterruptManager
 14361 ;; This function uses a non-reentrant model
 14362 ;;
 14363                           
 14364  1088                     _mbus_rx_handler:	
 14365                           ;psect for function _mbus_rx_handler
 14366                           
 14367                           
 14368                           ;modbus_slave.c: 47:     TMR1L = 0x00; TMR1H = 0xE0; PIR1bits.TMR1IF = 0;;
 14369                           
 14370                           ;incstack = 0
 14371                           ; Regs used in _mbus_rx_handler: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14372  1088  0020               	movlb	0	; select bank0
 14373  1089  0196               	clrf	22	;volatile
 14374  108A  30E0               	movlw	224
 14375  108B  0097               	movwf	23	;volatile
 14376  108C  1011               	bcf	17,0	;volatile
 14377                           
 14378                           ;modbus_slave.c: 48:     modbusSlaveData.ModbusFrame[modbusSlaveData.RxPointer++] = RCRE
      +                          G;
 14379  108D  0023               	movlb	3	; select bank3
 14380  108E  0819               	movf	25,w	;volatile
 14381  108F  00F9               	movwf	??_mbus_rx_handler
 14382  1090  0847               	movf	(_modbusSlaveData^(0+384)+39),w	;volatile
 14383  1091  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14384  1092  0086               	movwf	6
 14385  1093  3001               	movlw	1	; select bank3/4
 14386  1094  0087               	movwf	7
 14387  1095  0879               	movf	??_mbus_rx_handler,w
 14388  1096  0081               	movwf	1
 14389  1097  3001               	movlw	1
 14390  1098  00F9               	movwf	??_mbus_rx_handler
 14391  1099  0879               	movf	??_mbus_rx_handler,w
 14392  109A  07C7               	addwf	(_modbusSlaveData^(0+384)+39),f	;volatile
 14393                           
 14394                           ;modbus_slave.c: 50:     if(modbusSlaveData.RxPointer == 7U)
 14395  109B  3007               	movlw	7
 14396  109C  0647               	xorwf	(_modbusSlaveData^(0+384)+39),w	;volatile
 14397  109D  1D03               	btfss	3,2
 14398  109E  28A8               	goto	i1l6081
 14399                           
 14400                           ;modbus_slave.c: 51:     {;modbus_slave.c: 52:         if(modbusSlaveData.ModbusFrame[1U
      +                          ] == 16U)
 14401  109F  3010               	movlw	16
 14402  10A0  0631               	xorwf	(_modbusSlaveData^(0+384)+17),w	;volatile
 14403  10A1  1D03               	btfss	3,2
 14404  10A2  28A8               	goto	i1l6081
 14405                           
 14406                           ;modbus_slave.c: 53:         {;modbus_slave.c: 54:             modbusSlaveData.TotalRxVa
      +                          lue += (modbusSlaveData.ModbusFrame[6U]+1U);
 14407  10A3  0836               	movf	(_modbusSlaveData^(0+384)+22),w	;volatile
 14408  10A4  3E01               	addlw	1
 14409  10A5  00F9               	movwf	??_mbus_rx_handler
 14410  10A6  0879               	movf	??_mbus_rx_handler,w
 14411  10A7  07C9               	addwf	(_modbusSlaveData^(0+384)+41),f	;volatile
 14412  10A8                     i1l6081:
 14413                           
 14414                           ;modbus_slave.c: 58:     if(modbusSlaveData.RxPointer == modbusSlaveData.TotalRxValue)
 14415  10A8  0847               	movf	(_modbusSlaveData^(0+384)+39),w	;volatile
 14416  10A9  0649               	xorwf	(_modbusSlaveData^(0+384)+41),w	;volatile
 14417  10AA  1D03               	skipz
 14418  10AB  0008               	return
 14419                           
 14420                           ;modbus_slave.c: 59:     {;modbus_slave.c: 60:         ModbusSlaveProcessReceivedQuery()
      +                          ;
 14421  10AC  3196  2681         	fcall	_ModbusSlaveProcessReceivedQuery
 14422  10AE  0008               	return
 14423  10AF                     __end_of_mbus_rx_handler:
 14424                           
 14425                           	psect	text88
 14426  1681                     __ptext88:	
 14427 ;; *************** function _ModbusSlaveProcessReceivedQuery *****************
 14428 ;; Defined at:
 14429 ;;		line 88 in file "modbus_slave.c"
 14430 ;; Parameters:    Size  Location     Type
 14431 ;;		None
 14432 ;; Auto vars:     Size  Location     Type
 14433 ;;  u16Data         2    3[BANK0 ] unsigned short 
 14434 ;;  u8ReadReg       1    0[BANK0 ] unsigned char 
 14435 ;;  i               2    7[BANK0 ] unsigned int 
 14436 ;;  j               2    5[BANK0 ] unsigned int 
 14437 ;;  k               2    1[BANK0 ] unsigned int 
 14438 ;; Return value:  Size  Location     Type
 14439 ;;                  1    wreg      void 
 14440 ;; Registers used:
 14441 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14442 ;; Tracked objects:
 14443 ;;		On entry : 1F/3
 14444 ;;		On exit  : 1F/3
 14445 ;;		Unchanged: 0/0
 14446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14447 ;;      Params:         0       0       0       0       0       0       0       0
 14448 ;;      Locals:         0       9       0       0       0       0       0       0
 14449 ;;      Temps:          3       0       0       0       0       0       0       0
 14450 ;;      Totals:         3       9       0       0       0       0       0       0
 14451 ;;Total ram usage:       12 bytes
 14452 ;; Hardware stack levels used: 1
 14453 ;; Hardware stack levels required when called: 1
 14454 ;; This function calls:
 14455 ;;		_calculate_crc
 14456 ;; This function is called by:
 14457 ;;		_mbus_rx_handler
 14458 ;; This function uses a non-reentrant model
 14459 ;;
 14460                           
 14461  1681                     _ModbusSlaveProcessReceivedQuery:	
 14462                           ;psect for function _ModbusSlaveProcessReceivedQuery
 14463                           
 14464                           
 14465                           ;modbus_slave.c: 90:    unsigned int i, j, k;;modbus_slave.c: 92:     crcModbusSlave = 0
      +                          xFFFF;
 14466                           
 14467                           ;incstack = 0
 14468                           ; Regs used in _ModbusSlaveProcessReceivedQuery: [wreg-fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 14469  1681  30FF               	movlw	255
 14470  1682  00FA               	movwf	_crcModbusSlave
 14471  1683  30FF               	movlw	255
 14472  1684  00FB               	movwf	_crcModbusSlave+1
 14473                           
 14474                           ;modbus_slave.c: 93:     for(i=0; i<modbusSlaveData.TotalRxValue-2; i++)
 14475  1685  0020               	movlb	0	; select bank0
 14476  1686  01A7               	clrf	ModbusSlaveProcessReceivedQuery@i
 14477  1687  01A8               	clrf	ModbusSlaveProcessReceivedQuery@i+1
 14478  1688                     i1l5907:
 14479  1688  0023               	movlb	3	; select bank3
 14480  1689  0849               	movf	(_modbusSlaveData^(0+384)+41),w	;volatile
 14481  168A  3EFE               	addlw	254
 14482  168B  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14483  168C  30FF               	movlw	255
 14484  168D  1803               	skipnc
 14485  168E  3000               	movlw	0
 14486  168F  00F7               	movwf	??_ModbusSlaveProcessReceivedQuery+1
 14487  1690  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14488  1691  0020               	movlb	0	; select bank0
 14489  1692  0228               	subwf	ModbusSlaveProcessReceivedQuery@i+1,w
 14490  1693  1D03               	skipz
 14491  1694  2E97               	goto	u553_25
 14492  1695  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14493  1696  0227               	subwf	ModbusSlaveProcessReceivedQuery@i,w
 14494  1697                     u553_25:
 14495  1697  1803               	btfsc	3,0
 14496  1698  2EA7               	goto	i1l5909
 14497                           
 14498                           ;modbus_slave.c: 94:     {;modbus_slave.c: 95:         calculate_crc(modbusSlaveData.Mod
      +                          busFrame[i]);
 14499  1699  0827               	movf	ModbusSlaveProcessReceivedQuery@i,w
 14500  169A  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14501  169B  0086               	movwf	6
 14502  169C  3001               	movlw	1	; select bank3/4
 14503  169D  0087               	movwf	7
 14504  169E  0801               	movf	1,w
 14505  169F  3190  2061  3196   	fcall	_calculate_crc
 14506                           
 14507                           ;modbus_slave.c: 96:     }
 14508  16A2  3001               	movlw	1
 14509  16A3  07A7               	addwf	ModbusSlaveProcessReceivedQuery@i,f
 14510  16A4  3000               	movlw	0
 14511  16A5  3DA8               	addwfc	ModbusSlaveProcessReceivedQuery@i+1,f
 14512  16A6  2E88               	goto	i1l5907
 14513  16A7                     i1l5909:
 14514                           
 14515                           ;modbus_slave.c: 98:     if(modbusSlaveData.ModbusFrame[i++] != (crcModbusSlave & 0xFF))
 14516  16A7  0828               	movf	ModbusSlaveProcessReceivedQuery@i+1,w
 14517  16A8  00F7               	movwf	??_ModbusSlaveProcessReceivedQuery+1
 14518  16A9  0827               	movf	ModbusSlaveProcessReceivedQuery@i,w
 14519  16AA  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14520  16AB  0AA7               	incf	ModbusSlaveProcessReceivedQuery@i,f
 14521  16AC  1903               	skipnz
 14522  16AD  0AA8               	incf	ModbusSlaveProcessReceivedQuery@i+1,f
 14523  16AE  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14524  16AF  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14525  16B0  0086               	movwf	6
 14526  16B1  3001               	movlw	1	; select bank3/4
 14527  16B2  0087               	movwf	7
 14528  16B3  0801               	movf	1,w
 14529  16B4  067A               	xorwf	_crcModbusSlave,w
 14530  16B5  1903               	skipnz
 14531  16B6  2EBA               	goto	i1l5913
 14532  16B7                     i1l5911:
 14533                           
 14534                           ;modbus_slave.c: 99:     {;modbus_slave.c: 100:         modbusSlaveData.flags.bitValue.e
      +                          rror = 1;
 14535  16B7  0023               	movlb	3	; select bank3
 14536  16B8  15CA               	bsf	(_modbusSlaveData^(0+384)+42),3	;volatile
 14537                           
 14538                           ;modbus_slave.c: 101:         return;
 14539  16B9  0008               	return
 14540  16BA                     i1l5913:
 14541                           
 14542                           ;modbus_slave.c: 104:     if(modbusSlaveData.ModbusFrame[i] != (crcModbusSlave>>8))
 14543  16BA  0827               	movf	ModbusSlaveProcessReceivedQuery@i,w
 14544  16BB  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14545  16BC  0086               	movwf	6
 14546  16BD  3001               	movlw	1	; select bank3/4
 14547  16BE  0087               	movwf	7
 14548  16BF  087B               	movf	_crcModbusSlave+1,w
 14549  16C0  0601               	xorwf	1,w
 14550  16C1  1D03               	btfss	3,2
 14551  16C2  2EB7               	goto	i1l5911
 14552                           
 14553                           ;modbus_slave.c: 110:     if(modbusSlaveData.ModbusFrame[0] != modbusSlaveData.address)
 14554  16C3  0023               	movlb	3	; select bank3
 14555  16C4  0830               	movf	(_modbusSlaveData^(0+384)+16),w	;volatile
 14556  16C5  064C               	xorwf	(_modbusSlaveData^(0+384)+44),w	;volatile
 14557  16C6  1D03               	btfss	3,2
 14558  16C7  0008               	return
 14559                           
 14560                           ;modbus_slave.c: 114:     modbusSlaveData.TotalTxValue = 0;
 14561  16C8  01C8               	clrf	(_modbusSlaveData^(0+384)+40)	;volatile
 14562                           
 14563                           ;modbus_slave.c: 115:     switch(modbusSlaveData.ModbusFrame[1])
 14564  16C9  2FA5               	goto	i1l5967
 14565  16CA                     i1l5923:
 14566                           
 14567                           ;modbus_slave.c: 118:             modbusSlaveData.TotalTxValue = 2;
 14568  16CA  3002               	movlw	2
 14569  16CB  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14570  16CC  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14571  16CD  00C8               	movwf	(_modbusSlaveData^(0+384)+40)	;volatile
 14572                           
 14573                           ;modbus_slave.c: 119:             j = (modbusSlaveData.ModbusFrame[2] << 8U) | modbusSla
      +                          veData.ModbusFrame[3];
 14574  16CE  0832               	movf	(_modbusSlaveData^(0+384)+18),w	;volatile
 14575  16CF  0020               	movlb	0	; select bank0
 14576  16D0  00A6               	movwf	ModbusSlaveProcessReceivedQuery@j+1
 14577  16D1  0023               	movlb	3	; select bank3
 14578  16D2  0833               	movf	(_modbusSlaveData^(0+384)+19),w	;volatile
 14579  16D3  0020               	movlb	0	; select bank0
 14580  16D4  00A5               	movwf	ModbusSlaveProcessReceivedQuery@j
 14581                           
 14582                           ;modbus_slave.c: 121:             modbusSlaveData.ModbusFrame[modbusSlaveData.TotalTxVal
      +                          ue++] = modbusSlaveData.ModbusFrame[5]<<1;
 14583  16D5  0023               	movlb	3	; select bank3
 14584  16D6  3535               	lslf	(_modbusSlaveData^(0+384)+21),w	;volatile
 14585  16D7  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14586  16D8  0848               	movf	(_modbusSlaveData^(0+384)+40),w	;volatile
 14587  16D9  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14588  16DA  0086               	movwf	6
 14589  16DB  3001               	movlw	1	; select bank3/4
 14590  16DC  0087               	movwf	7
 14591  16DD  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14592  16DE  0081               	movwf	1
 14593  16DF  3001               	movlw	1
 14594  16E0  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14595  16E1  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14596  16E2  07C8               	addwf	(_modbusSlaveData^(0+384)+40),f	;volatile
 14597                           
 14598                           ;modbus_slave.c: 122:             uint8_t u8ReadReg = modbusSlaveData.ModbusFrame[5];
 14599  16E3  0835               	movf	(_modbusSlaveData^(0+384)+21),w	;volatile
 14600  16E4  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14601  16E5  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14602  16E6  0020               	movlb	0	; select bank0
 14603  16E7  00A0               	movwf	ModbusSlaveProcessReceivedQuery@u8ReadReg
 14604                           
 14605                           ;modbus_slave.c: 123:             for(i=j; i<(u8ReadReg+j); i++)
 14606  16E8  0826               	movf	ModbusSlaveProcessReceivedQuery@j+1,w
 14607  16E9  00A8               	movwf	ModbusSlaveProcessReceivedQuery@i+1
 14608  16EA  0825               	movf	ModbusSlaveProcessReceivedQuery@j,w
 14609  16EB  00A7               	movwf	ModbusSlaveProcessReceivedQuery@i
 14610  16EC                     i1l5941:
 14611  16EC  0820               	movf	ModbusSlaveProcessReceivedQuery@u8ReadReg,w
 14612  16ED  0725               	addwf	ModbusSlaveProcessReceivedQuery@j,w
 14613  16EE  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14614  16EF  0826               	movf	ModbusSlaveProcessReceivedQuery@j+1,w
 14615  16F0  1803               	skipnc
 14616  16F1  0A26               	incf	ModbusSlaveProcessReceivedQuery@j+1,w
 14617  16F2  00F7               	movwf	??_ModbusSlaveProcessReceivedQuery+1
 14618  16F3  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14619  16F4  0228               	subwf	ModbusSlaveProcessReceivedQuery@i+1,w
 14620  16F5  1D03               	skipz
 14621  16F6  2EF9               	goto	u557_25
 14622  16F7  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14623  16F8  0227               	subwf	ModbusSlaveProcessReceivedQuery@i,w
 14624  16F9                     u557_25:
 14625  16F9  1803               	btfsc	3,0
 14626  16FA  2FB8               	goto	i1l5969
 14627                           
 14628                           ;modbus_slave.c: 124:             {;modbus_slave.c: 125:                 modbusSlaveData
      +                          .ModbusFrame[modbusSlaveData.TotalTxValue++] = (modbusSlaveData.ModbusHoldingRegister[i]
      +                           >> 8U) & 0xFF;
 14629  16FB  3527               	lslf	ModbusSlaveProcessReceivedQuery@i,w
 14630  16FC  3EA0               	addlw	(low (_modbusSlaveData| (0+256)))& (0+255)
 14631  16FD  0086               	movwf	6
 14632  16FE  3001               	movlw	1	; select bank3/4
 14633  16FF  0087               	movwf	7
 14634  1700  3F40               	moviw [0]fsr1
 14635  1701  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14636  1702  3F41               	moviw [1]fsr1
 14637  1703  00F7               	movwf	??_ModbusSlaveProcessReceivedQuery+1
 14638  1704  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14639  1705  00F8               	movwf	??_ModbusSlaveProcessReceivedQuery+2
 14640  1706  0023               	movlb	3	; select bank3
 14641  1707  0848               	movf	(_modbusSlaveData^(0+384)+40),w	;volatile
 14642  1708  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14643  1709  0086               	movwf	6
 14644  170A  3001               	movlw	1	; select bank3/4
 14645  170B  0087               	movwf	7
 14646  170C  0878               	movf	??_ModbusSlaveProcessReceivedQuery+2,w
 14647  170D  0081               	movwf	1
 14648  170E  3001               	movlw	1
 14649  170F  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14650  1710  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14651  1711  07C8               	addwf	(_modbusSlaveData^(0+384)+40),f	;volatile
 14652                           
 14653                           ;modbus_slave.c: 126:                 modbusSlaveData.ModbusFrame[modbusSlaveData.TotalT
      +                          xValue++] = modbusSlaveData.ModbusHoldingRegister[i] & 0xFF;
 14654  1712  0020               	movlb	0	; select bank0
 14655  1713  3527               	lslf	ModbusSlaveProcessReceivedQuery@i,w
 14656  1714  3EA0               	addlw	(low (_modbusSlaveData| (0+256)))& (0+255)
 14657  1715  0086               	movwf	6
 14658  1716  3001               	movlw	1	; select bank3/4
 14659  1717  0087               	movwf	7
 14660  1718  0801               	movf	1,w
 14661  1719  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14662  171A  0023               	movlb	3	; select bank3
 14663  171B  0848               	movf	(_modbusSlaveData^(0+384)+40),w	;volatile
 14664  171C  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14665  171D  0086               	movwf	6
 14666  171E  3001               	movlw	1	; select bank3/4
 14667  171F  0087               	movwf	7
 14668  1720  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14669  1721  0081               	movwf	1
 14670  1722  3001               	movlw	1
 14671  1723  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14672  1724  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14673  1725  07C8               	addwf	(_modbusSlaveData^(0+384)+40),f	;volatile
 14674                           
 14675                           ;modbus_slave.c: 127:             }
 14676  1726  3001               	movlw	1
 14677  1727  0020               	movlb	0	; select bank0
 14678  1728  07A7               	addwf	ModbusSlaveProcessReceivedQuery@i,f
 14679  1729  3000               	movlw	0
 14680  172A  3DA8               	addwfc	ModbusSlaveProcessReceivedQuery@i+1,f
 14681  172B  2EEC               	goto	i1l5941
 14682  172C                     i1l5943:
 14683                           
 14684                           ;modbus_slave.c: 131:             i = modbusSlaveData.ModbusFrame[2];
 14685  172C  0832               	movf	(_modbusSlaveData^(0+384)+18),w	;volatile
 14686  172D  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14687  172E  01F7               	clrf	??_ModbusSlaveProcessReceivedQuery+1
 14688  172F  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14689  1730  0020               	movlb	0	; select bank0
 14690  1731  00A7               	movwf	ModbusSlaveProcessReceivedQuery@i
 14691  1732  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14692  1733  00A8               	movwf	ModbusSlaveProcessReceivedQuery@i+1
 14693                           
 14694                           ;modbus_slave.c: 132:             i <<= 8U;
 14695  1734  3008               	movlw	8
 14696  1735                     u558_25:
 14697  1735  35A7               	lslf	ModbusSlaveProcessReceivedQuery@i,f
 14698  1736  0DA8               	rlf	ModbusSlaveProcessReceivedQuery@i+1,f
 14699  1737  0B89               	decfsz	9,f
 14700  1738  2F35               	goto	u558_25
 14701                           
 14702                           ;modbus_slave.c: 133:             i |= modbusSlaveData.ModbusFrame[3];
 14703  1739  0023               	movlb	3	; select bank3
 14704  173A  0833               	movf	(_modbusSlaveData^(0+384)+19),w	;volatile
 14705  173B  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14706  173C  01F7               	clrf	??_ModbusSlaveProcessReceivedQuery+1
 14707  173D  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14708  173E  0020               	movlb	0	; select bank0
 14709  173F  04A7               	iorwf	ModbusSlaveProcessReceivedQuery@i,f
 14710  1740  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14711  1741  04A8               	iorwf	ModbusSlaveProcessReceivedQuery@i+1,f
 14712                           
 14713                           ;modbus_slave.c: 135:             uint16_t u16Data = modbusSlaveData.ModbusFrame[4];
 14714  1742  0023               	movlb	3	; select bank3
 14715  1743  0834               	movf	(_modbusSlaveData^(0+384)+20),w	;volatile
 14716  1744  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14717  1745  01F7               	clrf	??_ModbusSlaveProcessReceivedQuery+1
 14718  1746  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14719  1747  0020               	movlb	0	; select bank0
 14720  1748  00A3               	movwf	ModbusSlaveProcessReceivedQuery@u16Data
 14721  1749  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14722  174A  00A4               	movwf	ModbusSlaveProcessReceivedQuery@u16Data+1
 14723                           
 14724                           ;modbus_slave.c: 136:             u16Data <<= 8U;
 14725  174B  3008               	movlw	8
 14726  174C                     u559_25:
 14727  174C  35A3               	lslf	ModbusSlaveProcessReceivedQuery@u16Data,f
 14728  174D  0DA4               	rlf	ModbusSlaveProcessReceivedQuery@u16Data+1,f
 14729  174E  0B89               	decfsz	9,f
 14730  174F  2F4C               	goto	u559_25
 14731                           
 14732                           ;modbus_slave.c: 137:             u16Data |= modbusSlaveData.ModbusFrame[5];
 14733  1750  0023               	movlb	3	; select bank3
 14734  1751  0835               	movf	(_modbusSlaveData^(0+384)+21),w	;volatile
 14735  1752  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14736  1753  01F7               	clrf	??_ModbusSlaveProcessReceivedQuery+1
 14737  1754  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14738  1755  0020               	movlb	0	; select bank0
 14739  1756  04A3               	iorwf	ModbusSlaveProcessReceivedQuery@u16Data,f
 14740  1757  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14741  1758  04A4               	iorwf	ModbusSlaveProcessReceivedQuery@u16Data+1,f
 14742                           
 14743                           ;modbus_slave.c: 138:             modbusSlaveData.ModbusHoldingRegister[i] = u16Data;
 14744  1759  3527               	lslf	ModbusSlaveProcessReceivedQuery@i,w
 14745  175A  3EA0               	addlw	(low (_modbusSlaveData| (0+256)))& (0+255)
 14746  175B  0086               	movwf	6
 14747  175C  3001               	movlw	1	; select bank3/4
 14748  175D  0087               	movwf	7
 14749  175E  0823               	movf	ModbusSlaveProcessReceivedQuery@u16Data,w
 14750  175F  3FC0               	movwi [0]fsr1
 14751  1760  0824               	movf	ModbusSlaveProcessReceivedQuery@u16Data+1,w
 14752  1761  3FC1               	movwi [1]fsr1
 14753  1762                     i1l5947:
 14754                           
 14755                           ;modbus_slave.c: 139:             modbusSlaveData.TotalTxValue = 6;
 14756  1762  3006               	movlw	6
 14757  1763  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14758  1764  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14759  1765  0023               	movlb	3	; select bank3
 14760  1766  00C8               	movwf	(_modbusSlaveData^(0+384)+40)	;volatile
 14761                           
 14762                           ;modbus_slave.c: 140:             break;
 14763  1767  2FB8               	goto	i1l5969
 14764  1768                     i1l5949:
 14765                           
 14766                           ;modbus_slave.c: 143:             j = modbusSlaveData.ModbusFrame[3]<<1;
 14767  1768  0833               	movf	(_modbusSlaveData^(0+384)+19),w	;volatile
 14768  1769  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14769  176A  01F7               	clrf	??_ModbusSlaveProcessReceivedQuery+1
 14770  176B  35F6               	lslf	??_ModbusSlaveProcessReceivedQuery,f
 14771  176C  0DF7               	rlf	??_ModbusSlaveProcessReceivedQuery+1,f
 14772  176D  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14773  176E  0020               	movlb	0	; select bank0
 14774  176F  00A5               	movwf	ModbusSlaveProcessReceivedQuery@j
 14775  1770  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14776  1771  00A6               	movwf	ModbusSlaveProcessReceivedQuery@j+1
 14777                           
 14778                           ;modbus_slave.c: 144:             k = 7;
 14779  1772  3007               	movlw	7
 14780  1773  00A1               	movwf	ModbusSlaveProcessReceivedQuery@k
 14781  1774  3000               	movlw	0
 14782  1775  00A2               	movwf	ModbusSlaveProcessReceivedQuery@k+1
 14783                           
 14784                           ;modbus_slave.c: 145:             for(i=j; i<(modbusSlaveData.ModbusFrame[6]+j); i++)
 14785  1776  0826               	movf	ModbusSlaveProcessReceivedQuery@j+1,w
 14786  1777  00A8               	movwf	ModbusSlaveProcessReceivedQuery@i+1
 14787  1778  0825               	movf	ModbusSlaveProcessReceivedQuery@j,w
 14788  1779  00A7               	movwf	ModbusSlaveProcessReceivedQuery@i
 14789  177A                     i1l5961:
 14790  177A  0023               	movlb	3	; select bank3
 14791  177B  0836               	movf	(_modbusSlaveData^(0+384)+22),w	;volatile
 14792  177C  0020               	movlb	0	; select bank0
 14793  177D  0725               	addwf	ModbusSlaveProcessReceivedQuery@j,w
 14794  177E  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14795  177F  0826               	movf	ModbusSlaveProcessReceivedQuery@j+1,w
 14796  1780  1803               	skipnc
 14797  1781  0A26               	incf	ModbusSlaveProcessReceivedQuery@j+1,w
 14798  1782  00F7               	movwf	??_ModbusSlaveProcessReceivedQuery+1
 14799  1783  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14800  1784  0228               	subwf	ModbusSlaveProcessReceivedQuery@i+1,w
 14801  1785  1D03               	skipz
 14802  1786  2F89               	goto	u560_25
 14803  1787  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14804  1788  0227               	subwf	ModbusSlaveProcessReceivedQuery@i,w
 14805  1789                     u560_25:
 14806  1789  1803               	btfsc	3,0
 14807  178A  2F62               	goto	i1l5947
 14808                           
 14809                           ;modbus_slave.c: 146:             {;modbus_slave.c: 147:                 modbusSlaveData
      +                          .ModbusHoldingRegister[i] = modbusSlaveData.ModbusFrame[k++];
 14810  178B  0821               	movf	ModbusSlaveProcessReceivedQuery@k,w
 14811  178C  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14812  178D  0086               	movwf	6
 14813  178E  3001               	movlw	1	; select bank3/4
 14814  178F  0087               	movwf	7
 14815  1790  0801               	movf	1,w
 14816  1791  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14817  1792  01F7               	clrf	??_ModbusSlaveProcessReceivedQuery+1
 14818  1793  3527               	lslf	ModbusSlaveProcessReceivedQuery@i,w
 14819  1794  3EA0               	addlw	(low (_modbusSlaveData| (0+256)))& (0+255)
 14820  1795  0086               	movwf	6
 14821  1796  3001               	movlw	1	; select bank3/4
 14822  1797  0087               	movwf	7
 14823  1798  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14824  1799  3FC0               	movwi [0]fsr1
 14825  179A  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14826  179B  3FC1               	movwi [1]fsr1
 14827  179C  3001               	movlw	1
 14828  179D  07A1               	addwf	ModbusSlaveProcessReceivedQuery@k,f
 14829  179E  3000               	movlw	0
 14830  179F  3DA2               	addwfc	ModbusSlaveProcessReceivedQuery@k+1,f
 14831                           
 14832                           ;modbus_slave.c: 148:             }
 14833  17A0  3001               	movlw	1
 14834  17A1  07A7               	addwf	ModbusSlaveProcessReceivedQuery@i,f
 14835  17A2  3000               	movlw	0
 14836  17A3  3DA8               	addwfc	ModbusSlaveProcessReceivedQuery@i+1,f
 14837  17A4  2F7A               	goto	i1l5961
 14838  17A5                     i1l5967:
 14839  17A5  0831               	movf	(_modbusSlaveData^(0+384)+17),w	;volatile
 14840  17A6  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14841  17A7  01F7               	clrf	??_ModbusSlaveProcessReceivedQuery+1
 14842                           
 14843                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14844                           ; Switch size 1, requested type "simple"
 14845                           ; Number of cases is 1, Range of values is 0 to 0
 14846                           ; switch strategies available:
 14847                           ; Name         Instructions Cycles
 14848                           ; simple_byte            4     3 (average)
 14849                           ; direct_byte            8     6 (fixed)
 14850                           ; jumptable            260     6 (fixed)
 14851                           ;	Chosen strategy is simple_byte
 14852  17A8  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14853  17A9  3A00               	xorlw	0	; case 0
 14854  17AA  1903               	skipnz
 14855  17AB  2FAD               	goto	i1l6383
 14856  17AC  2FB8               	goto	i1l5969
 14857  17AD                     i1l6383:
 14858                           
 14859                           ; Switch size 1, requested type "simple"
 14860                           ; Number of cases is 3, Range of values is 3 to 16
 14861                           ; switch strategies available:
 14862                           ; Name         Instructions Cycles
 14863                           ; simple_byte           10     6 (average)
 14864                           ; direct_byte           37     9 (fixed)
 14865                           ; jumptable            263     9 (fixed)
 14866                           ;	Chosen strategy is simple_byte
 14867  17AD  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14868  17AE  3A03               	xorlw	3	; case 3
 14869  17AF  1903               	skipnz
 14870  17B0  2ECA               	goto	i1l5923
 14871  17B1  3A05               	xorlw	5	; case 6
 14872  17B2  1903               	skipnz
 14873  17B3  2F2C               	goto	i1l5943
 14874  17B4  3A16               	xorlw	22	; case 16
 14875  17B5  1903               	skipnz
 14876  17B6  2F68               	goto	i1l5949
 14877  17B7  2FB8               	goto	i1l5969
 14878  17B8                     i1l5969:
 14879                           
 14880                           ;modbus_slave.c: 156:     crcModbusSlave = 0xFFFF;
 14881  17B8  30FF               	movlw	255
 14882  17B9  00FA               	movwf	_crcModbusSlave
 14883  17BA  30FF               	movlw	255
 14884  17BB  00FB               	movwf	_crcModbusSlave+1
 14885                           
 14886                           ;modbus_slave.c: 157:     for(i=0; i<modbusSlaveData.TotalTxValue; i++)
 14887  17BC  0020               	movlb	0	; select bank0
 14888  17BD  01A7               	clrf	ModbusSlaveProcessReceivedQuery@i
 14889  17BE  01A8               	clrf	ModbusSlaveProcessReceivedQuery@i+1
 14890  17BF                     i1l5977:
 14891  17BF  0023               	movlb	3	; select bank3
 14892  17C0  0848               	movf	(_modbusSlaveData^(0+384)+40),w	;volatile
 14893  17C1  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14894  17C2  01F7               	clrf	??_ModbusSlaveProcessReceivedQuery+1
 14895  17C3  0877               	movf	??_ModbusSlaveProcessReceivedQuery+1,w
 14896  17C4  0020               	movlb	0	; select bank0
 14897  17C5  0228               	subwf	ModbusSlaveProcessReceivedQuery@i+1,w
 14898  17C6  1D03               	skipz
 14899  17C7  2FCA               	goto	u561_25
 14900  17C8  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14901  17C9  0227               	subwf	ModbusSlaveProcessReceivedQuery@i,w
 14902  17CA                     u561_25:
 14903  17CA  1803               	btfsc	3,0
 14904  17CB  2FDA               	goto	i1l5979
 14905                           
 14906                           ;modbus_slave.c: 158:     {;modbus_slave.c: 159:         calculate_crc(modbusSlaveData.M
      +                          odbusFrame[i]);
 14907  17CC  0827               	movf	ModbusSlaveProcessReceivedQuery@i,w
 14908  17CD  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14909  17CE  0086               	movwf	6
 14910  17CF  3001               	movlw	1	; select bank3/4
 14911  17D0  0087               	movwf	7
 14912  17D1  0801               	movf	1,w
 14913  17D2  3190  2061  3196   	fcall	_calculate_crc
 14914                           
 14915                           ;modbus_slave.c: 160:     }
 14916  17D5  3001               	movlw	1
 14917  17D6  07A7               	addwf	ModbusSlaveProcessReceivedQuery@i,f
 14918  17D7  3000               	movlw	0
 14919  17D8  3DA8               	addwfc	ModbusSlaveProcessReceivedQuery@i+1,f
 14920  17D9  2FBF               	goto	i1l5977
 14921  17DA                     i1l5979:
 14922                           
 14923                           ;modbus_slave.c: 161:     modbusSlaveData.ModbusFrame[modbusSlaveData.TotalTxValue++] = 
      +                          crcModbusSlave & 0xFF;
 14924  17DA  087A               	movf	_crcModbusSlave,w
 14925  17DB  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14926  17DC  0023               	movlb	3	; select bank3
 14927  17DD  0848               	movf	(_modbusSlaveData^(0+384)+40),w	;volatile
 14928  17DE  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14929  17DF  0086               	movwf	6
 14930  17E0  3001               	movlw	1	; select bank3/4
 14931  17E1  0087               	movwf	7
 14932  17E2  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14933  17E3  0081               	movwf	1
 14934  17E4  3001               	movlw	1
 14935  17E5  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14936  17E6  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14937  17E7  07C8               	addwf	(_modbusSlaveData^(0+384)+40),f	;volatile
 14938                           
 14939                           ;modbus_slave.c: 162:     modbusSlaveData.ModbusFrame[modbusSlaveData.TotalTxValue++] = 
      +                          crcModbusSlave >> 8;
 14940  17E8  087B               	movf	_crcModbusSlave+1,w
 14941  17E9  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14942  17EA  0848               	movf	(_modbusSlaveData^(0+384)+40),w	;volatile
 14943  17EB  3EB0               	addlw	(low ((_modbusSlaveData| (0+256)+16)))& (0+255)
 14944  17EC  0086               	movwf	6
 14945  17ED  3001               	movlw	1	; select bank3/4
 14946  17EE  0087               	movwf	7
 14947  17EF  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14948  17F0  0081               	movwf	1
 14949  17F1  3001               	movlw	1
 14950  17F2  00F6               	movwf	??_ModbusSlaveProcessReceivedQuery
 14951  17F3  0876               	movf	??_ModbusSlaveProcessReceivedQuery,w
 14952  17F4  07C8               	addwf	(_modbusSlaveData^(0+384)+40),f	;volatile
 14953                           
 14954                           ;modbus_slave.c: 164:     T1CONbits.TMR1ON = 0;
 14955  17F5  0020               	movlb	0	; select bank0
 14956  17F6  1018               	bcf	24,0	;volatile
 14957                           
 14958                           ;modbus_slave.c: 165:     modbusSlaveData.TxPointer = 0;
 14959  17F7  0023               	movlb	3	; select bank3
 14960  17F8  01C6               	clrf	(_modbusSlaveData^(0+384)+38)	;volatile
 14961  17F9  0022               	movlb	2	; select bank2
 14962  17FA  178E               	bsf	14,7	;volatile
 14963                           
 14964                           ;modbus_slave.c: 167:     PIE1bits.TXIE = 1; TXSTAbits.TXEN = 1;
 14965  17FB  0021               	movlb	1	; select bank1
 14966  17FC  1611               	bsf	17,4	;volatile
 14967  17FD  0023               	movlb	3	; select bank3
 14968  17FE  169E               	bsf	30,5	;volatile
 14969  17FF  0008               	return
 14970  1800                     __end_of_ModbusSlaveProcessReceivedQuery:
 14971                           
 14972                           	psect	text89
 14973  1061                     __ptext89:	
 14974 ;; *************** function _calculate_crc *****************
 14975 ;; Defined at:
 14976 ;;		line 28 in file "modbus_slave.c"
 14977 ;; Parameters:    Size  Location     Type
 14978 ;;  crcreg          1    wreg     unsigned char 
 14979 ;; Auto vars:     Size  Location     Type
 14980 ;;  crcreg          1    2[COMMON] unsigned char 
 14981 ;;  i               1    5[COMMON] unsigned char 
 14982 ;;  crcbit          2    3[COMMON] unsigned short 
 14983 ;; Return value:  Size  Location     Type
 14984 ;;                  1    wreg      void 
 14985 ;; Registers used:
 14986 ;;		wreg, status,2, status,0
 14987 ;; Tracked objects:
 14988 ;;		On entry : 1F/0
 14989 ;;		On exit  : 1F/0
 14990 ;;		Unchanged: 1F/0
 14991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 14992 ;;      Params:         0       0       0       0       0       0       0       0
 14993 ;;      Locals:         4       0       0       0       0       0       0       0
 14994 ;;      Temps:          2       0       0       0       0       0       0       0
 14995 ;;      Totals:         6       0       0       0       0       0       0       0
 14996 ;;Total ram usage:        6 bytes
 14997 ;; Hardware stack levels used: 1
 14998 ;; This function calls:
 14999 ;;		Nothing
 15000 ;; This function is called by:
 15001 ;;		_ModbusSlaveProcessReceivedQuery
 15002 ;; This function uses a non-reentrant model
 15003 ;;
 15004                           
 15005  1061                     _calculate_crc:	
 15006                           ;psect for function _calculate_crc
 15007                           
 15008                           
 15009                           ;incstack = 0
 15010                           ; Regs used in _calculate_crc: [wreg+status,2+status,0]
 15011                           ;calculate_crc@crcreg stored from wreg
 15012  1061  00F2               	movwf	calculate_crc@crcreg
 15013                           
 15014                           ;modbus_slave.c: 28: void calculate_crc(uint8_t crcreg);modbus_slave.c: 29: {;modbus_sla
      +                          ve.c: 30:     uint16_t crcbit;;modbus_slave.c: 32:     crcModbusSlave ^= crcreg;
 15015  1062  0872               	movf	calculate_crc@crcreg,w
 15016  1063  00F0               	movwf	??_calculate_crc
 15017  1064  01F1               	clrf	??_calculate_crc+1
 15018  1065  0870               	movf	??_calculate_crc,w
 15019  1066  06FA               	xorwf	_crcModbusSlave,f
 15020  1067  0871               	movf	??_calculate_crc+1,w
 15021  1068  06FB               	xorwf	_crcModbusSlave+1,f
 15022                           
 15023                           ;modbus_slave.c: 33:     for(uint8_t i=0; i<=7; i++)
 15024  1069  01F5               	clrf	calculate_crc@i
 15025  106A                     i1l4045:
 15026                           
 15027                           ;modbus_slave.c: 34:     {;modbus_slave.c: 35:         crcbit = 0;
 15028  106A  01F3               	clrf	calculate_crc@crcbit
 15029  106B  01F4               	clrf	calculate_crc@crcbit+1
 15030                           
 15031                           ;modbus_slave.c: 36:         if((crcModbusSlave & 0x0001) == 0x0001)
 15032  106C  1C7A               	btfss	_crcModbusSlave,0
 15033  106D  2872               	goto	i1l4051
 15034                           
 15035                           ;modbus_slave.c: 37:             crcbit = 1;
 15036  106E  3001               	movlw	1
 15037  106F  00F3               	movwf	calculate_crc@crcbit
 15038  1070  3000               	movlw	0
 15039  1071  00F4               	movwf	calculate_crc@crcbit+1
 15040  1072                     i1l4051:
 15041                           
 15042                           ;modbus_slave.c: 39:         crcModbusSlave >>= 1;
 15043  1072  3001               	movlw	1
 15044  1073                     u280_25:
 15045  1073  36FB               	lsrf	_crcModbusSlave+1,f
 15046  1074  0CFA               	rrf	_crcModbusSlave,f
 15047  1075  0B89               	decfsz	9,f
 15048  1076  2873               	goto	u280_25
 15049                           
 15050                           ;modbus_slave.c: 40:         if(crcbit)
 15051  1077  0873               	movf	calculate_crc@crcbit,w
 15052  1078  0474               	iorwf	calculate_crc@crcbit+1,w
 15053  1079  1903               	btfsc	3,2
 15054  107A  287F               	goto	i1l4057
 15055                           
 15056                           ;modbus_slave.c: 41:             crcModbusSlave ^= 0xa001;
 15057  107B  3001               	movlw	1
 15058  107C  06FA               	xorwf	_crcModbusSlave,f
 15059  107D  30A0               	movlw	160
 15060  107E  06FB               	xorwf	_crcModbusSlave+1,f
 15061  107F                     i1l4057:
 15062                           
 15063                           ;modbus_slave.c: 42:     }
 15064  107F  3001               	movlw	1
 15065  1080  00F0               	movwf	??_calculate_crc
 15066  1081  0870               	movf	??_calculate_crc,w
 15067  1082  07F5               	addwf	calculate_crc@i,f
 15068  1083  3008               	movlw	8
 15069  1084  0275               	subwf	calculate_crc@i,w
 15070  1085  1803               	btfsc	3,0
 15071  1086  0008               	return
 15072  1087  286A               	goto	i1l4045
 15073  1088                     __end_of_calculate_crc:
 15074                           
 15075                           	psect	text90
 15076  1E2E                     __ptext90:	
 15077 ;; *************** function _TMR1_ISR *****************
 15078 ;; Defined at:
 15079 ;;		line 158 in file "mcc_generated_files/tmr1.c"
 15080 ;; Parameters:    Size  Location     Type
 15081 ;;		None
 15082 ;; Auto vars:     Size  Location     Type
 15083 ;;		None
 15084 ;; Return value:  Size  Location     Type
 15085 ;;                  1    wreg      void 
 15086 ;; Registers used:
 15087 ;;		wreg, status,2, status,0, pclath, cstack
 15088 ;; Tracked objects:
 15089 ;;		On entry : 1F/0
 15090 ;;		On exit  : 0/0
 15091 ;;		Unchanged: 0/0
 15092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15093 ;;      Params:         0       0       0       0       0       0       0       0
 15094 ;;      Locals:         0       0       0       0       0       0       0       0
 15095 ;;      Temps:          0       0       0       0       0       0       0       0
 15096 ;;      Totals:         0       0       0       0       0       0       0       0
 15097 ;;Total ram usage:        0 bytes
 15098 ;; Hardware stack levels used: 1
 15099 ;; Hardware stack levels required when called: 2
 15100 ;; This function calls:
 15101 ;;		_TMR1_CallBack
 15102 ;;		_TMR1_WriteTimer
 15103 ;; This function is called by:
 15104 ;;		_INTERRUPT_InterruptManager
 15105 ;; This function uses a non-reentrant model
 15106 ;;
 15107                           
 15108  1E2E                     _TMR1_ISR:	
 15109                           ;psect for function _TMR1_ISR
 15110                           
 15111                           
 15112                           ;mcc_generated_files/tmr1.c: 162:     PIR1bits.TMR1IF = 0;
 15113                           
 15114                           ;incstack = 0
 15115                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 15116  1E2E  1011               	bcf	17,0	;volatile
 15117                           
 15118                           ;mcc_generated_files/tmr1.c: 163:     TMR1_WriteTimer(timer1ReloadVal);
 15119  1E2F  0863               	movf	_timer1ReloadVal+1,w	;volatile
 15120  1E30  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 15121  1E31  0862               	movf	_timer1ReloadVal,w	;volatile
 15122  1E32  00F0               	movwf	TMR1_WriteTimer@timerVal
 15123  1E33  319E  265D  319E   	fcall	_TMR1_WriteTimer
 15124                           
 15125                           ;mcc_generated_files/tmr1.c: 167:     TMR1_CallBack();
 15126  1E36  319E  260F         	fcall	_TMR1_CallBack
 15127  1E38  0008               	return
 15128  1E39                     __end_of_TMR1_ISR:
 15129                           
 15130                           	psect	text91
 15131  1E5D                     __ptext91:	
 15132 ;; *************** function _TMR1_WriteTimer *****************
 15133 ;; Defined at:
 15134 ;;		line 121 in file "mcc_generated_files/tmr1.c"
 15135 ;; Parameters:    Size  Location     Type
 15136 ;;  timerVal        2    0[COMMON] unsigned short 
 15137 ;; Auto vars:     Size  Location     Type
 15138 ;;		None
 15139 ;; Return value:  Size  Location     Type
 15140 ;;                  1    wreg      void 
 15141 ;; Registers used:
 15142 ;;		wreg
 15143 ;; Tracked objects:
 15144 ;;		On entry : 1F/0
 15145 ;;		On exit  : 1F/0
 15146 ;;		Unchanged: 0/0
 15147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15148 ;;      Params:         2       0       0       0       0       0       0       0
 15149 ;;      Locals:         0       0       0       0       0       0       0       0
 15150 ;;      Temps:          0       0       0       0       0       0       0       0
 15151 ;;      Totals:         2       0       0       0       0       0       0       0
 15152 ;;Total ram usage:        2 bytes
 15153 ;; Hardware stack levels used: 1
 15154 ;; This function calls:
 15155 ;;		Nothing
 15156 ;; This function is called by:
 15157 ;;		_TMR1_ISR
 15158 ;; This function uses a non-reentrant model
 15159 ;;
 15160                           
 15161  1E5D                     _TMR1_WriteTimer:	
 15162                           ;psect for function _TMR1_WriteTimer
 15163                           
 15164                           
 15165                           ;mcc_generated_files/tmr1.c: 121: void TMR1_WriteTimer(uint16_t timerVal);mcc_generated_
      +                          files/tmr1.c: 122: {;mcc_generated_files/tmr1.c: 123:     if (T1CONbits.nT1SYNC == 1)
 15166                           
 15167                           ;incstack = 0
 15168                           ; Regs used in _TMR1_WriteTimer: [wreg]
 15169  1E5D  1D18               	btfss	24,2	;volatile
 15170  1E5E  2E66               	goto	i1l4501
 15171                           
 15172                           ;mcc_generated_files/tmr1.c: 124:     {;mcc_generated_files/tmr1.c: 126:         T1CONbi
      +                          ts.TMR1ON = 0;
 15173  1E5F  1018               	bcf	24,0	;volatile
 15174                           
 15175                           ;mcc_generated_files/tmr1.c: 129:         TMR1H = (uint8_t)(timerVal >> 8);
 15176  1E60  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 15177  1E61  0097               	movwf	23	;volatile
 15178                           
 15179                           ;mcc_generated_files/tmr1.c: 130:         TMR1L = (uint8_t)timerVal;
 15180  1E62  0870               	movf	TMR1_WriteTimer@timerVal,w
 15181  1E63  0096               	movwf	22	;volatile
 15182                           
 15183                           ;mcc_generated_files/tmr1.c: 133:         T1CONbits.TMR1ON =1;
 15184  1E64  1418               	bsf	24,0	;volatile
 15185                           
 15186                           ;mcc_generated_files/tmr1.c: 134:     }
 15187  1E65  0008               	return
 15188  1E66                     i1l4501:
 15189                           
 15190                           ;mcc_generated_files/tmr1.c: 136:     {;mcc_generated_files/tmr1.c: 138:         TMR1H =
      +                           (uint8_t)(timerVal >> 8);
 15191  1E66  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 15192  1E67  0097               	movwf	23	;volatile
 15193                           
 15194                           ;mcc_generated_files/tmr1.c: 139:         TMR1L = (uint8_t)timerVal;
 15195  1E68  0870               	movf	TMR1_WriteTimer@timerVal,w
 15196  1E69  0096               	movwf	22	;volatile
 15197  1E6A  0008               	return
 15198  1E6B                     __end_of_TMR1_WriteTimer:
 15199                           
 15200                           	psect	text92
 15201  1E0F                     __ptext92:	
 15202 ;; *************** function _TMR1_CallBack *****************
 15203 ;; Defined at:
 15204 ;;		line 170 in file "mcc_generated_files/tmr1.c"
 15205 ;; Parameters:    Size  Location     Type
 15206 ;;		None
 15207 ;; Auto vars:     Size  Location     Type
 15208 ;;		None
 15209 ;; Return value:  Size  Location     Type
 15210 ;;                  1    wreg      void 
 15211 ;; Registers used:
 15212 ;;		wreg, status,2, status,0, pclath, cstack
 15213 ;; Tracked objects:
 15214 ;;		On entry : 1F/0
 15215 ;;		On exit  : 0/0
 15216 ;;		Unchanged: 0/0
 15217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15218 ;;      Params:         0       0       0       0       0       0       0       0
 15219 ;;      Locals:         0       0       0       0       0       0       0       0
 15220 ;;      Temps:          0       0       0       0       0       0       0       0
 15221 ;;      Totals:         0       0       0       0       0       0       0       0
 15222 ;;Total ram usage:        0 bytes
 15223 ;; Hardware stack levels used: 1
 15224 ;; Hardware stack levels required when called: 1
 15225 ;; This function calls:
 15226 ;;		Absolute function
 15227 ;;		_mbus_timer_handler
 15228 ;; This function is called by:
 15229 ;;		_TMR1_ISR
 15230 ;; This function uses a non-reentrant model
 15231 ;;
 15232                           
 15233  1E0F                     _TMR1_CallBack:	
 15234                           ;psect for function _TMR1_CallBack
 15235                           
 15236                           
 15237                           ;mcc_generated_files/tmr1.c: 173:     if(TMR1_InterruptHandler)
 15238                           
 15239                           ;incstack = 0
 15240                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 15241  1E0F  0860               	movf	_TMR1_InterruptHandler,w
 15242  1E10  0461               	iorwf	_TMR1_InterruptHandler+1,w
 15243  1E11  1903               	btfsc	3,2
 15244  1E12  0008               	return
 15245                           
 15246                           ;mcc_generated_files/tmr1.c: 174:     {;mcc_generated_files/tmr1.c: 175:         TMR1_In
      +                          terruptHandler();
 15247  1E13  0861               	movf	_TMR1_InterruptHandler+1,w
 15248  1E14  008A               	movwf	10
 15249  1E15  0860               	movf	_TMR1_InterruptHandler,w
 15250  1E16  000A               	callw
 15251  1E17  319E               	pagesel	$
 15252  1E18  0008               	return
 15253  1E19                     __end_of_TMR1_CallBack:
 15254                           
 15255                           	psect	text93
 15256  1E23                     __ptext93:	
 15257 ;; *************** function _mbus_timer_handler *****************
 15258 ;; Defined at:
 15259 ;;		line 82 in file "modbus_slave.c"
 15260 ;; Parameters:    Size  Location     Type
 15261 ;;		None
 15262 ;; Auto vars:     Size  Location     Type
 15263 ;;		None
 15264 ;; Return value:  Size  Location     Type
 15265 ;;                  1    wreg      void 
 15266 ;; Registers used:
 15267 ;;		wreg, status,2
 15268 ;; Tracked objects:
 15269 ;;		On entry : 1F/0
 15270 ;;		On exit  : 1F/3
 15271 ;;		Unchanged: 0/0
 15272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15273 ;;      Params:         0       0       0       0       0       0       0       0
 15274 ;;      Locals:         0       0       0       0       0       0       0       0
 15275 ;;      Temps:          1       0       0       0       0       0       0       0
 15276 ;;      Totals:         1       0       0       0       0       0       0       0
 15277 ;;Total ram usage:        1 bytes
 15278 ;; Hardware stack levels used: 1
 15279 ;; This function calls:
 15280 ;;		Nothing
 15281 ;; This function is called by:
 15282 ;;		_TMR1_Initialize
 15283 ;;		_TMR1_CallBack
 15284 ;; This function uses a non-reentrant model
 15285 ;;
 15286                           
 15287  1E23                     _mbus_timer_handler:	
 15288                           ;psect for function _mbus_timer_handler
 15289                           
 15290                           
 15291                           ;modbus_slave.c: 84:     TMR1L = 0x00; TMR1H = 0xE0; PIR1bits.TMR1IF = 0;;
 15292                           
 15293                           ;incstack = 0
 15294                           ; Regs used in _mbus_timer_handler: [wreg+status,2]
 15295  1E23  0196               	clrf	22	;volatile
 15296  1E24  30E0               	movlw	224
 15297  1E25  0097               	movwf	23	;volatile
 15298  1E26  1011               	bcf	17,0	;volatile
 15299                           
 15300                           ;modbus_slave.c: 85:     modbusSlaveData.RxPointer = 0; modbusSlaveData.TotalRxValue = 8
      +                          ;;
 15301  1E27  0023               	movlb	3	; select bank3
 15302  1E28  01C7               	clrf	(_modbusSlaveData^(0+384)+39)	;volatile
 15303  1E29  3008               	movlw	8
 15304  1E2A  00F0               	movwf	??_mbus_timer_handler
 15305  1E2B  0870               	movf	??_mbus_timer_handler,w
 15306  1E2C  00C9               	movwf	(_modbusSlaveData^(0+384)+41)	;volatile
 15307  1E2D  0008               	return
 15308  1E2E                     __end_of_mbus_timer_handler:
 15309                           
 15310                           	psect	text94
 15311  1DC6                     __ptext94:	
 15312 ;; *************** function _TMR0_ISR *****************
 15313 ;; Defined at:
 15314 ;;		line 108 in file "mcc_generated_files/tmr0.c"
 15315 ;; Parameters:    Size  Location     Type
 15316 ;;		None
 15317 ;; Auto vars:     Size  Location     Type
 15318 ;;		None
 15319 ;; Return value:  Size  Location     Type
 15320 ;;                  1    wreg      void 
 15321 ;; Registers used:
 15322 ;;		wreg, status,2, status,0, pclath, cstack
 15323 ;; Tracked objects:
 15324 ;;		On entry : 0/0
 15325 ;;		On exit  : 0/0
 15326 ;;		Unchanged: 0/0
 15327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15328 ;;      Params:         0       0       0       0       0       0       0       0
 15329 ;;      Locals:         0       0       0       0       0       0       0       0
 15330 ;;      Temps:          0       0       0       0       0       0       0       0
 15331 ;;      Totals:         0       0       0       0       0       0       0       0
 15332 ;;Total ram usage:        0 bytes
 15333 ;; Hardware stack levels used: 1
 15334 ;; Hardware stack levels required when called: 2
 15335 ;; This function calls:
 15336 ;;		_TMR0_CallBack
 15337 ;; This function is called by:
 15338 ;;		_INTERRUPT_InterruptManager
 15339 ;; This function uses a non-reentrant model
 15340 ;;
 15341                           
 15342  1DC6                     _TMR0_ISR:	
 15343                           ;psect for function _TMR0_ISR
 15344                           
 15345                           
 15346                           ;mcc_generated_files/tmr0.c: 112:     INTCONbits.TMR0IF = 0;
 15347                           
 15348                           ;incstack = 0
 15349                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 15350  1DC6  110B               	bcf	11,2	;volatile
 15351                           
 15352                           ;mcc_generated_files/tmr0.c: 114:     TMR0 = timer0ReloadVal;
 15353  1DC7  0020               	movlb	0	; select bank0
 15354  1DC8  0866               	movf	_timer0ReloadVal,w	;volatile
 15355  1DC9  0095               	movwf	21	;volatile
 15356                           
 15357                           ;mcc_generated_files/tmr0.c: 118:     TMR0_CallBack();
 15358  1DCA  319E  2605         	fcall	_TMR0_CallBack
 15359  1DCC  0008               	return
 15360  1DCD                     __end_of_TMR0_ISR:
 15361                           
 15362                           	psect	text95
 15363  1E05                     __ptext95:	
 15364 ;; *************** function _TMR0_CallBack *****************
 15365 ;; Defined at:
 15366 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 15367 ;; Parameters:    Size  Location     Type
 15368 ;;		None
 15369 ;; Auto vars:     Size  Location     Type
 15370 ;;		None
 15371 ;; Return value:  Size  Location     Type
 15372 ;;                  1    wreg      void 
 15373 ;; Registers used:
 15374 ;;		wreg, status,2, status,0, pclath, cstack
 15375 ;; Tracked objects:
 15376 ;;		On entry : 1F/0
 15377 ;;		On exit  : 0/0
 15378 ;;		Unchanged: 0/0
 15379 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15380 ;;      Params:         0       0       0       0       0       0       0       0
 15381 ;;      Locals:         0       0       0       0       0       0       0       0
 15382 ;;      Temps:          0       0       0       0       0       0       0       0
 15383 ;;      Totals:         0       0       0       0       0       0       0       0
 15384 ;;Total ram usage:        0 bytes
 15385 ;; Hardware stack levels used: 1
 15386 ;; Hardware stack levels required when called: 1
 15387 ;; This function calls:
 15388 ;;		Absolute function
 15389 ;;		_TMR0_DefaultInterruptHandler
 15390 ;; This function is called by:
 15391 ;;		_TMR0_ISR
 15392 ;; This function uses a non-reentrant model
 15393 ;;
 15394                           
 15395  1E05                     _TMR0_CallBack:	
 15396                           ;psect for function _TMR0_CallBack
 15397                           
 15398                           
 15399                           ;mcc_generated_files/tmr0.c: 127:     if(TMR0_InterruptHandler)
 15400                           
 15401                           ;incstack = 0
 15402                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 15403  1E05  085E               	movf	_TMR0_InterruptHandler,w
 15404  1E06  045F               	iorwf	_TMR0_InterruptHandler+1,w
 15405  1E07  1903               	btfsc	3,2
 15406  1E08  0008               	return
 15407                           
 15408                           ;mcc_generated_files/tmr0.c: 128:     {;mcc_generated_files/tmr0.c: 129:         TMR0_In
      +                          terruptHandler();
 15409  1E09  085F               	movf	_TMR0_InterruptHandler+1,w
 15410  1E0A  008A               	movwf	10
 15411  1E0B  085E               	movf	_TMR0_InterruptHandler,w
 15412  1E0C  000A               	callw
 15413  1E0D  319E               	pagesel	$
 15414  1E0E  0008               	return
 15415  1E0F                     __end_of_TMR0_CallBack:
 15416                           
 15417                           	psect	text96
 15418  1D44                     __ptext96:	
 15419 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 15420 ;; Defined at:
 15421 ;;		line 137 in file "mcc_generated_files/tmr0.c"
 15422 ;; Parameters:    Size  Location     Type
 15423 ;;		None
 15424 ;; Auto vars:     Size  Location     Type
 15425 ;;		None
 15426 ;; Return value:  Size  Location     Type
 15427 ;;                  1    wreg      void 
 15428 ;; Registers used:
 15429 ;;		None
 15430 ;; Tracked objects:
 15431 ;;		On entry : 1F/0
 15432 ;;		On exit  : 1F/0
 15433 ;;		Unchanged: 1F/0
 15434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 15435 ;;      Params:         0       0       0       0       0       0       0       0
 15436 ;;      Locals:         0       0       0       0       0       0       0       0
 15437 ;;      Temps:          0       0       0       0       0       0       0       0
 15438 ;;      Totals:         0       0       0       0       0       0       0       0
 15439 ;;Total ram usage:        0 bytes
 15440 ;; Hardware stack levels used: 1
 15441 ;; This function calls:
 15442 ;;		Nothing
 15443 ;; This function is called by:
 15444 ;;		_TMR0_Initialize
 15445 ;;		_TMR0_CallBack
 15446 ;; This function uses a non-reentrant model
 15447 ;;
 15448                           
 15449  1D44                     _TMR0_DefaultInterruptHandler:	
 15450                           ;psect for function _TMR0_DefaultInterruptHandler
 15451                           
 15452                           
 15453                           ;incstack = 0
 15454                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 15455  1D44  0008               	return
 15456  1D45                     __end_of_TMR0_DefaultInterruptHandler:
 15457  007E                     btemp	set	126	;btemp
 15458  007E                     int$flags	set	126
 15459  007E                     wtemp0	set	126
 15460                           
 15461                           	psect	idloc
 15462                           
 15463                           ;Config register IDLOC0 @ 0x8000
 15464                           ;	unspecified, using default values
 15465  8000                     	org	32768
 15466  8000  3FFF               	dw	16383
 15467                           
 15468                           ;Config register IDLOC1 @ 0x8001
 15469                           ;	unspecified, using default values
 15470  8001                     	org	32769
 15471  8001  3FFF               	dw	16383
 15472                           
 15473                           ;Config register IDLOC2 @ 0x8002
 15474                           ;	unspecified, using default values
 15475  8002                     	org	32770
 15476  8002  3FFF               	dw	16383
 15477                           
 15478                           ;Config register IDLOC3 @ 0x8003
 15479                           ;	unspecified, using default values
 15480  8003                     	org	32771
 15481  8003  3FFF               	dw	16383
 15482                           
 15483                           	psect	config
 15484                           
 15485                           ;Config register CONFIG1 @ 0x8007
 15486                           ;	Oscillator Selection Bits
 15487                           ;	FOSC = HS, HS Oscillator, High-speed crystal/resonator connected between OSC1 and OSC2
      +                           pins
 15488                           ;	Watchdog Timer Enable
 15489                           ;	WDTE = ON, WDT enabled
 15490                           ;	Power-up Timer Enable
 15491                           ;	PWRTE = OFF, PWRT disabled
 15492                           ;	MCLR Pin Function Select
 15493                           ;	MCLRE = ON, MCLR/VPP pin function is MCLR
 15494                           ;	Flash Program Memory Code Protection
 15495                           ;	CP = OFF, Program memory code protection is disabled
 15496                           ;	Brown-out Reset Enable
 15497                           ;	BOREN = ON, Brown-out Reset enabled
 15498                           ;	Clock Out Enable
 15499                           ;	CLKOUTEN = OFF, CLKOUT function is disabled. I/O or oscillator function on the CLKOUT 
      +                          pin
 15500                           ;	Internal/External Switchover Mode
 15501                           ;	IESO = ON, Internal/External Switchover Mode is enabled
 15502                           ;	Fail-Safe Clock Monitor Enable
 15503                           ;	FCMEN = ON, Fail-Safe Clock Monitor is enabled
 15504  8007                     	org	32775
 15505  8007  3FFA               	dw	16378
 15506                           
 15507                           ;Config register CONFIG2 @ 0x8008
 15508                           ;	Flash Memory Self-Write Protection
 15509                           ;	WRT = OFF, Write protection off
 15510                           ;	Stack Overflow/Underflow Reset Enable
 15511                           ;	STVREN = ON, Stack Overflow or Underflow will cause a Reset
 15512                           ;	Brown-out Reset Voltage Selection
 15513                           ;	BORV = LO, Brown-out Reset Voltage (Vbor), low trip point selected.
 15514                           ;	Low-Power Brown Out Reset
 15515                           ;	LPBOR = OFF, Low-Power BOR is disabled
 15516                           ;	Low-Voltage Programming Enable
 15517                           ;	LVP = ON, Low-voltage programming enabled
 15518  8008                     	org	32776
 15519  8008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    56
    Data        2
    BSS         206
    Persistent  50
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     49      71
    BANK1            80     78      79
    BANK2            80     78      80
    BANK3            80     26      80
    BANK4            80      0      79
    BANK5            80      0      66
    BANK6            16      0       0

Pointer List with Targets:

    I2C_Read1ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Read2ByteRegister@returnValue.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write1ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_Write2ByteRegister@data.data	PTR unsigned char  size(1) Largest target is 0

    I2C_DO_TX$2283$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$2288	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_DO_TX$2283	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_MasterFsm$2282	const PTR FTN()enum E3885 size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    I2C_CallbackReturnStop@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_CallbackReturnReset@funPtr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    Absolute function$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    cb$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S447$0$0	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    MCP3422_Read@data	PTR unsigned char  size(1) Largest target is 3
		 -> MCP3422_ReadVoltage@data(BANK1[3]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 16
		 -> main@u16CalBuffer(BANK3[16]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> mbus_timer_handler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> mbus_timer_handler(), Absolute function(), 

    EUSART_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> mbus_rx_handler(), 

    EUSART_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> mbus_tx_handler(), 

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), Absolute function(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), Absolute function(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), Absolute function(), 

    I2C_SetCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetAddressNackCallback@ptr	PTR void  size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    I2C_SetAddressNackCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), 

    I2C_SetDataCompleteCallback@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_SetDataCompleteCallback@cb	PTR FTN(PTR void ,)enum E360 size(2) Largest target is 1
		 -> Absolute function(), rdBlkRegCompleteHandler(), wr2RegCompleteHandler(), wr1RegCompleteHandler(), 
		 -> rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_SetBuffer@buffer	PTR void  size(1) Largest target is 4
		 -> I2C_Read1ByteRegister@returnValue.data(COMMON[2]), I2C_Read2ByteRegister@returnValue.data(COMMON[2]), I2C_Write1ByteRegister@data.data(COMMON[2]), I2C_Write2ByteRegister@data.data(COMMON[2]), 
		 -> MCP3422_ReadVoltage@data(BANK1[3]), MCP3422_Write@data(BANK0[1]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), 
		 -> bufferBlock.data(COMMON[2]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), 
		 -> I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S447$data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> MCP3422_ReadVoltage@data(BANK1[3]), MCP3422_Write@data(BANK0[1]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), 
		 -> I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), I2C_Write1ByteRegister@data(COMMON[1]), 
		 -> I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), I2C_Read1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.data_ptr	PTR unsigned char  size(1) Largest target is 4
		 -> I2C_Read1ByteRegister@returnValue.data(COMMON[2]), I2C_Read2ByteRegister@returnValue.data(COMMON[2]), I2C_Write1ByteRegister@data.data(COMMON[2]), I2C_Write2ByteRegister@data.data(COMMON[2]), 
		 -> MCP3422_ReadVoltage@data(BANK1[3]), MCP3422_Write@data(BANK0[1]), I2C_ReadDataBlock@reg(COMMON[1]), I2C_ReadDataBlock@bufferBlock(COMMON[3]), 
		 -> bufferBlock.data(COMMON[2]), I2C_Write2ByteRegister@reg(COMMON[1]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@reg(COMMON[1]), 
		 -> I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@reg(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), NULL(NULL[0]), 
		 -> I2C_Read1ByteRegister@reg(COMMON[1]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S447$callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    I2C_Status.callbackPayload	PTR void [6] size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S447$callbackTable	PTR FTN(PTR void ,)enum E360[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    I2C_Status.callbackTable	PTR FTN(PTR void ,)enum E360[6] size(2) Largest target is 1
		 -> I2C_CallbackReturnReset(), I2C_CallbackReturnStop(), Absolute function(), rdBlkRegCompleteHandler(), 
		 -> wr2RegCompleteHandler(), wr1RegCompleteHandler(), rd2RegCompleteHandler(), rd1RegCompleteHandler(), 

    i2c_fsmStateTable	const PTR FTN()enum E3885[16] size(2) Largest target is 1
		 -> I2C_DO_ADDRESS_NACK(), I2C_DO_RESET(), I2C_DO_RX_NACK_RESTART(), I2C_DO_RX_NACK_STOP(), 
		 -> I2C_DO_RX_ACK(), I2C_DO_SEND_STOP(), I2C_DO_SEND_RESTART(), I2C_DO_SEND_RESTART_WRITE(), 
		 -> I2C_DO_SEND_RESTART_READ(), I2C_DO_TX_EMPTY(), I2C_DO_RCEN(), I2C_DO_RX(), 
		 -> I2C_DO_TX(), I2C_DO_SEND_ADR_WRITE(), I2C_DO_SEND_ADR_READ(), I2C_DO_IDLE(), 

    EUSART_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> mbus_rx_handler(), Absolute function(), 

    EUSART_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> mbus_tx_handler(), Absolute function(), 

    rdBlkRegCompleteHandler@ptr.data	PTR unsigned char  size(1) Largest target is 0

    rdBlkRegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    wr1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd2RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    rd1RegCompleteHandler@ptr	PTR void  size(1) Largest target is 4
		 -> I2C_ReadDataBlock@bufferBlock(COMMON[3]), I2C_Write2ByteRegister@data(COMMON[2]), I2C_Write1ByteRegister@data(COMMON[1]), I2C_Read2ByteRegister@returnValue(COMMON[2]), 
		 -> NULL(NULL[0]), I2C_Read1ByteRegister@returnValue(COMMON[1]), 

    S94$data	PTR unsigned char  size(1) Largest target is 0

    bufferBlock.data	PTR unsigned char  size(1) Largest target is 0

    I2C_ReadNBytes@data	PTR unsigned char  size(1) Largest target is 3
		 -> MCP3422_ReadVoltage@data(BANK1[3]), 

    I2C_WriteNBytes@data	PTR unsigned char  size(1) Largest target is 1
		 -> MCP3422_Write@data(BANK0[1]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _INTERRUPT_InterruptManager->_mbus_rx_handler
    _mbus_rx_handler->_ModbusSlaveProcessReceivedQuery
    _ModbusSlaveProcessReceivedQuery->_calculate_crc
    _TMR1_ISR->_TMR1_WriteTimer
    _TMR1_CallBack->_mbus_timer_handler

Critical Paths under _main in BANK0

    _main->___flmul
    _map->___flmul
    ___fltol->___flmul
    _logf->___flmul
    ___flsub->___fladd
    ___fladd->___xxtofl
    ___fldiv->___flmul
    ___flge->___xxtofl
    _SYSTEM_Initialize->_EUSART_Initialize
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler
    _EUSART_Initialize->_EUSART_SetRxInterruptHandler
    _EUSART_Initialize->_EUSART_SetTxInterruptHandler
    _MCP3422_ReadVoltage->___flmul
    ___flmul->___fladd
    _MCP3422_Write->_I2C_WriteNBytes
    _I2C_SetAddressNackCallback->_I2C_SetCallback
    _I2C_MasterWrite->_I2C_MasterOperation
    _MCP3422_Read->_I2C_ReadNBytes
    _I2C_MasterRead->_I2C_MasterOperation
    _I2C_Poller->_I2C_MasterFsm
    _I2C_MasterFsm->_I2C_DO_ADDRESS_NACK
    _I2C_MasterFsm->_I2C_DO_RX
    _I2C_MasterFsm->_I2C_DO_TX
    _I2C_MasterFsm->_I2C_DO_TX_EMPTY
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnReset
    _I2C_DO_TX_EMPTY->_I2C_CallbackReturnStop
    _I2C_DO_TX_EMPTY->_rd1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rd2RegCompleteHandler
    _I2C_DO_TX_EMPTY->_rdBlkRegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr1RegCompleteHandler
    _I2C_DO_TX_EMPTY->_wr2RegCompleteHandler
    _I2C_DO_TX->_I2C_CallbackReturnReset
    _I2C_DO_TX->_I2C_CallbackReturnStop
    _I2C_DO_TX->_rd1RegCompleteHandler
    _I2C_DO_TX->_rd2RegCompleteHandler
    _I2C_DO_TX->_rdBlkRegCompleteHandler
    _I2C_DO_TX->_wr1RegCompleteHandler
    _I2C_DO_TX->_wr2RegCompleteHandler
    _I2C_DO_SEND_ADR_WRITE->_I2C_MasterSendTxData
    _I2C_DO_RX->_I2C_CallbackReturnReset
    _I2C_DO_RX->_I2C_CallbackReturnStop
    _I2C_DO_RX->_rd1RegCompleteHandler
    _I2C_DO_RX->_rd2RegCompleteHandler
    _I2C_DO_RX->_rdBlkRegCompleteHandler
    _I2C_DO_RX->_wr1RegCompleteHandler
    _I2C_DO_RX->_wr2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnReset
    _I2C_DO_ADDRESS_NACK->_I2C_CallbackReturnStop
    _I2C_DO_ADDRESS_NACK->_rd1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rd2RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_rdBlkRegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr1RegCompleteHandler
    _I2C_DO_ADDRESS_NACK->_wr2RegCompleteHandler
    _wr2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _wr1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rdBlkRegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd2RegCompleteHandler->_I2C_SetDataCompleteCallback
    _rd1RegCompleteHandler->_I2C_SetDataCompleteCallback
    _I2C_SetDataCompleteCallback->_I2C_SetCallback
    _FLASH_WriteBlock->_FLASH_EraseBlock

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _mbus_rx_handler->_ModbusSlaveProcessReceivedQuery

Critical Paths under _main in BANK1

    _main->_map
    _map->___fltol
    ___fltol->___fldiv
    _get_ntc_temperature->_logf
    _logf->___fldiv
    ___fldiv->___flmul
    _MCP3422_ReadVoltage->___flmul
    ___flmul->___flsub

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_get_ntc_temperature
    _get_ntc_temperature->_logf

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                27    27      0  234959
                                             48 BANK0      1     1      0
                                              0 BANK3     26    26      0
                     _FLASH_ReadWord
                   _FLASH_WriteBlock
                    _InitModbusSlave
                _MCP3422_ReadVoltage
                  _SYSTEM_Initialize
                             ___flge
                            ___flmul
                            ___fltol
                           ___xxtofl
                _get_ntc_temperature
                                _map
 ---------------------------------------------------------------------------------
 (1) _map                                                 32    12     20   24292
                                             66 BANK1     12    12      0
                                              0 BANK2     20     0     20
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             11     7      4    1147
                                             55 BANK1     11     7      4
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _get_ntc_temperature                                 16    12      4   39430
                                             67 BANK1      4     0      4
                                             66 BANK2     12    12      0
                            ___fladd
                            ___fldiv
                            ___flsub
                               _logf
 ---------------------------------------------------------------------------------
 (2) _logf                                                78    74      4   24171
                                             55 BANK1     12     8      4
                                              0 BANK2     66    66      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    6067
                                              0 BANK1      8     0      8
                          __Umul8_16 (ARG)
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    5282
                                             23 BANK0     20    12      8
                          __Umul8_16 (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    3483
                                             29 BANK1     26    18      8
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) ___flge                                              12     4      8     790
                                             23 BANK0     12     4      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     686
                  _EUSART_Initialize
                     _I2C_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      98
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0      98
                                             11 BANK0      1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _I2C_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0     490
                                             11 BANK0      1     1      0
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetTxInterruptHandler                         2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetRxInterruptHandler                         2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              9 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _MCP3422_ReadVoltage                                 16    12      4  158400
                                             29 BANK1     16    12      4
                       _MCP3422_Read
                      _MCP3422_Write
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1376
                                              9 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    6236
                                             43 BANK0      5     5      0
                                              8 BANK1     21    13      8
                          __Umul8_16
                            ___fladd (ARG)
                            ___flsub (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     980
                                              9 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) _MCP3422_Write                                        2     2      0   76050
                                             32 BANK0      2     2      0
                    _I2C_WriteNBytes
 ---------------------------------------------------------------------------------
 (3) _I2C_WriteNBytes                                      4     1      3   76025
                                             28 BANK0      4     1      3
                          _I2C_Close
                    _I2C_MasterWrite
                           _I2C_Open
         _I2C_SetAddressNackCallback
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (4) _I2C_SetAddressNackCallback                           4     1      3    1662
                                             14 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterWrite                                      0     0      0   72788
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (2) _MCP3422_Read                                         5     4      1   74516
                                             32 BANK0      5     4      1
                     _I2C_ReadNBytes
 ---------------------------------------------------------------------------------
 (3) _I2C_ReadNBytes                                       4     1      3   74363
                                             28 BANK0      4     1      3
                          _I2C_Close
                     _I2C_MasterRead
                           _I2C_Open
                      _I2C_SetBuffer
 ---------------------------------------------------------------------------------
 (4) _I2C_Open                                             3     3      0      46
                                              9 BANK0      3     3      0
                 _I2C_MasterClearIrq
                     _I2C_MasterOpen
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterOpen                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_MasterRead                                       0     0      0   72788
                _I2C_MasterOperation
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterOperation                                  3     3      0   72788
                                             25 BANK0      3     3      0
                    _I2C_MasterStart
                         _I2C_Poller
 ---------------------------------------------------------------------------------
 (6) _I2C_Poller                                           0     0      0   72742
                      _I2C_MasterFsm
             _I2C_MasterWaitForEvent
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterWaitForEvent                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _I2C_MasterFsm                                        3     3      0   72742
                                             22 BANK0      3     3      0
                _I2C_DO_ADDRESS_NACK *
                        _I2C_DO_IDLE *
                        _I2C_DO_RCEN *
                       _I2C_DO_RESET *
                          _I2C_DO_RX *
                      _I2C_DO_RX_ACK *
             _I2C_DO_RX_NACK_RESTART *
                _I2C_DO_RX_NACK_STOP *
               _I2C_DO_SEND_ADR_READ *
              _I2C_DO_SEND_ADR_WRITE *
                _I2C_DO_SEND_RESTART *
           _I2C_DO_SEND_RESTART_READ *
          _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                          _I2C_DO_TX *
                    _I2C_DO_TX_EMPTY *
                 _I2C_MasterClearIrq
                   _I2C_MasterIsNack
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_TX_EMPTY                                      3     3      0   18169
                                             19 BANK0      3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
                   _I2C_MasterSetIrq
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterSetIrq                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_TX                                            3     3      0   18191
                                             19 BANK0      3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
           _I2C_DO_SEND_RESTART_READ
          _I2C_DO_SEND_RESTART_WRITE
                   _I2C_DO_SEND_STOP
                   _I2C_MasterIsNack
               _I2C_MasterSendTxData
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (8) _I2C_MasterIsNack                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_DO_SEND_RESTART_WRITE                            0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (9) _I2C_DO_SEND_RESTART_READ                             0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_SEND_ADR_WRITE                                0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_SEND_ADR_READ                                 0     0      0      22
               _I2C_MasterSendTxData
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterSendTxData                                 1     1      0      22
                                              9 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RX_ACK                                        0     0      0       0
                  _I2C_MasterSendAck
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RX                                            3     3      0   18169
                                             19 BANK0      3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
             _I2C_DO_RX_NACK_RESTART
                _I2C_DO_RX_NACK_STOP
                _I2C_MasterGetRxData
                  _I2C_MasterSendAck
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterSendAck                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterGetRxData                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RX_NACK_STOP                                  0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RX_NACK_RESTART                               0     0      0       0
                 _I2C_MasterSendNack
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterSendNack                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RESET                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_RCEN                                          0     0      0       0
                  _I2C_MasterStartRx
 ---------------------------------------------------------------------------------
 (9) _I2C_MasterStartRx                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_IDLE                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _I2C_DO_ADDRESS_NACK                                  3     3      0   18169
                                             19 BANK0      3     3      0
                   Absolute function *
            _I2C_CallbackReturnReset *
             _I2C_CallbackReturnStop *
                _I2C_DO_SEND_RESTART
                   _I2C_DO_SEND_STOP
              _rd1RegCompleteHandler *
              _rd2RegCompleteHandler *
            _rdBlkRegCompleteHandler *
              _wr1RegCompleteHandler *
              _wr2RegCompleteHandler *
 ---------------------------------------------------------------------------------
 (9) _wr2RegCompleteHandler                                1     0      1    3579
                                             18 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _wr1RegCompleteHandler                                1     0      1    3579
                                             18 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rdBlkRegCompleteHandler                              1     0      1    3601
                                             18 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rd2RegCompleteHandler                                1     0      1    3579
                                             18 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (9) _rd1RegCompleteHandler                                1     0      1    3579
                                             18 BANK0      1     0      1
                      _I2C_SetBuffer
        _I2C_SetDataCompleteCallback
 ---------------------------------------------------------------------------------
 (10) _I2C_SetDataCompleteCallback                         4     1      3    2270
                                             14 BANK0      4     1      3
                    _I2C_SetCallback
 ---------------------------------------------------------------------------------
 (5) _I2C_SetCallback                                      5     2      3     836
                                              9 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (4) _I2C_SetBuffer                                        4     2      2    1287
                                              9 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (9) _I2C_DO_SEND_STOP                                     0     0      0       0
                     _I2C_MasterStop
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterStop                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_DO_SEND_RESTART                                  0     0      0       0
            _I2C_MasterEnableRestart
 ---------------------------------------------------------------------------------
 (10) _I2C_MasterEnableRestart                             0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _I2C_CallbackReturnStop                               1     0      1       0
                                             18 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (9) _I2C_CallbackReturnReset                              1     0      1     252
                                             18 BANK0      1     0      1
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 (6) _I2C_MasterStart                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _I2C_Close                                            2     2      0      24
                                              9 BANK0      2     2      0
                 _I2C_MasterClearIrq
                    _I2C_MasterClose
               _I2C_MasterDisableIrq
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterDisableIrq                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterClose                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _I2C_MasterClearIrq                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitModbusSlave                                      2     2      0      22
                                              9 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _FLASH_WriteBlock                                    10     7      3     736
                                             12 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_EraseBlock                                     3     1      2     144
                                              9 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _FLASH_ReadWord                                       3     1      2     435
                                              9 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _INTERRUPT_InterruptManager                          0     0      0     967
                   Absolute function *
                           _TMR0_ISR
                           _TMR1_ISR
                    _mbus_rx_handler *
                    _mbus_tx_handler *
 ---------------------------------------------------------------------------------
 (13) _mbus_tx_handler                                     1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) _mbus_rx_handler                                     1     1      0     738
                                              9 COMMON     1     1      0
    _ModbusSlaveProcessReceivedQuery
 ---------------------------------------------------------------------------------
 (14) _ModbusSlaveProcessReceivedQuery                    12    12      0     738
                                              6 COMMON     3     3      0
                                              0 BANK0      9     9      0
                      _calculate_crc
 ---------------------------------------------------------------------------------
 (15) _calculate_crc                                       6     6      0      92
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (13) _TMR1_ISR                                            0     0      0     229
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (14) _TMR1_WriteTimer                                     2     0      2     229
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (14) _TMR1_CallBack                                       0     0      0       0
                   Absolute function *
                 _mbus_timer_handler *
 ---------------------------------------------------------------------------------
 (15) _mbus_timer_handler                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (13) _TMR0_ISR                                            0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (14) _TMR0_CallBack                                       0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (15) _TMR0_DefaultInterruptHandler                        0     0      0       0
 ---------------------------------------------------------------------------------
 (15) Absolute function(Fake)                              1     0      1       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _FLASH_ReadWord
   _FLASH_WriteBlock
     _FLASH_EraseBlock
   _InitModbusSlave
   _MCP3422_ReadVoltage
     _MCP3422_Read
       _I2C_ReadNBytes
         _I2C_Close
           _I2C_MasterClearIrq
           _I2C_MasterClose
           _I2C_MasterDisableIrq
         _I2C_MasterRead
           _I2C_MasterOperation
             _I2C_MasterStart
             _I2C_Poller
               _I2C_MasterFsm
                 _I2C_DO_ADDRESS_NACK *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                     _I2C_MasterEnableRestart
                   _I2C_DO_SEND_STOP *
                     _I2C_MasterStop
                   _rd1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                       _I2C_SetCallback
                   _rd2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                   _rdBlkRegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                   _wr1RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                   _wr2RegCompleteHandler *
                     _I2C_SetBuffer
                     _I2C_SetDataCompleteCallback
                 _I2C_DO_IDLE *
                 _I2C_DO_RCEN *
                   _I2C_MasterStartRx
                 _I2C_DO_RESET *
                 _I2C_DO_RX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_RX_NACK_RESTART *
                     _I2C_MasterSendNack
                   _I2C_DO_RX_NACK_STOP *
                     _I2C_MasterSendNack
                   _I2C_MasterGetRxData *
                   _I2C_MasterSendAck *
                   _rd1RegCompleteHandler *
                   _rd2RegCompleteHandler *
                   _rdBlkRegCompleteHandler *
                   _wr1RegCompleteHandler *
                   _wr2RegCompleteHandler *
                 _I2C_DO_RX_ACK *
                   _I2C_MasterSendAck
                 _I2C_DO_RX_NACK_RESTART *
                 _I2C_DO_RX_NACK_STOP *
                 _I2C_DO_SEND_ADR_READ *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_ADR_WRITE *
                   _I2C_MasterSendTxData
                 _I2C_DO_SEND_RESTART *
                 _I2C_DO_SEND_RESTART_READ *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_MasterEnableRestart
                 _I2C_DO_SEND_STOP *
                 _I2C_DO_TX *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART_READ *
                   _I2C_DO_SEND_RESTART_WRITE *
                   _I2C_DO_SEND_STOP *
                   _I2C_MasterIsNack *
                   _I2C_MasterSendTxData *
                   _rd1RegCompleteHandler *
                   _rd2RegCompleteHandler *
                   _rdBlkRegCompleteHandler *
                   _wr1RegCompleteHandler *
                   _wr2RegCompleteHandler *
                 _I2C_DO_TX_EMPTY *
                   Absolute function(Fake) *
                   _I2C_CallbackReturnReset *
                   _I2C_CallbackReturnStop *
                   _I2C_DO_SEND_RESTART *
                   _I2C_DO_SEND_STOP *
                   _I2C_MasterSetIrq *
                   _rd1RegCompleteHandler *
                   _rd2RegCompleteHandler *
                   _rdBlkRegCompleteHandler *
                   _wr1RegCompleteHandler *
                   _wr2RegCompleteHandler *
                 _I2C_MasterClearIrq *
                 _I2C_MasterIsNack *
               _I2C_MasterWaitForEvent
         _I2C_Open
           _I2C_MasterClearIrq
           _I2C_MasterOpen
         _I2C_SetBuffer
     _MCP3422_Write
       _I2C_WriteNBytes
         _I2C_Close
         _I2C_MasterWrite
           _I2C_MasterOperation
         _I2C_Open
         _I2C_SetAddressNackCallback
           _I2C_SetCallback
         _I2C_SetBuffer
     ___flmul
       __Umul8_16
       ___fladd (ARG)
         __Umul8_16 (ARG)
         ___xxtofl (ARG)
       ___flsub (ARG)
         __Umul8_16 (ARG)
         ___fladd (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___xxtofl
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
       _EUSART_SetRxInterruptHandler
       _EUSART_SetTxInterruptHandler
     _I2C_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _WDT_Initialize
   ___flge
     ___xxtofl (ARG)
   ___flmul
   ___fltol
     ___fladd (ARG)
     ___fldiv (ARG)
       ___fladd (ARG)
       ___flmul (ARG)
       ___flsub (ARG)
       ___xxtofl (ARG)
     ___flmul (ARG)
     ___flsub (ARG)
     ___xxtofl (ARG)
   ___xxtofl
   _get_ntc_temperature
     ___fladd
     ___fldiv
     ___flsub
     _logf
       ___fladd
       ___fldiv
       ___flmul
       ___flsub
       ___xxtofl
   _map
     ___fladd
     ___fldiv
     ___flmul
     ___flsub
     ___fltol
     ___xxtofl

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _TMR0_ISR *
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
   _TMR1_ISR *
     _TMR1_CallBack
       Absolute function(Fake) *
       _mbus_timer_handler *
     _TMR1_WriteTimer
   _mbus_rx_handler *
     _ModbusSlaveProcessReceivedQuery
       _calculate_crc
   _mbus_tx_handler *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     1D3       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     31      47       6       88.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50     4E      4F       8       98.8%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     4E      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     1A      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      4F      14       98.8%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      42      16       82.5%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               10      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     1D3      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sat May 06 16:25:09 2023

                ?_EUSART_SetRxInterruptHandler 0029                         ??_I2C_DO_SEND_ADR_READ 0029  
                                 ___fldiv@aexp 00D6                                   ___fldiv@bexp 00D5  
                                 ___fldiv@sign 00CE                        ??_I2C_DO_SEND_ADR_WRITE 002A  
                              _timer0ReloadVal 0066                          ??_I2C_DO_SEND_RESTART 0029  
                          __Umul8_16@word_mpld 002F                                   main@u16TdVal 01D2  
                                          l302 11F3                                            l525 1D94  
                                          l368 0838                                            l384 07D2  
                                          l881 0DCA                                            l886 0E48  
                                          l887 0E9F                                            l897 0F99  
                                          _Lg1 182C                                            _Lg2 1828  
                                          _Lg3 1824                                            _Lg4 1820  
                              _timer1ReloadVal 0062                                            _map 13FA  
                       _I2C_MasterWaitForEvent 1D94                 ?_EUSART_SetFramingErrorHandler 0029  
                          _MCP3422_ReadVoltage 1306                              ??_InitModbusSlave 0029  
                                          wreg 0009                                   ___flmul@aexp 00B1  
                                 ___flmul@bexp 00B2                   ??_I2C_SetAddressNackCallback 0031  
                                 ___flmul@sign 00B0                                   ___flmul@temp 00BB  
                                 ___flmul@prod 00B7                 FLASH_WriteBlock@flashWordArray 002E  
                     ??_I2C_CallbackReturnStop 0033                                   _I2C_DO_RESET 1D8F  
                                 ___fltol@exp1 00E1                        ??_rd2RegCompleteHandler 0033  
                                         l1231 1399                                           l1234 13E7  
                                         l1410 1550                                           l1500 08A5  
                                         l1254 1284                                           l1431 1657  
                                         l1432 166F                                           l1360 0696  
                                         l1434 167C                                           l1354 0620  
                                         l4011 105A                                           l4003 1040  
                                         l1507 08B9                                           l1508 08C3  
                                         l4021 1F80                                           l1462 0D14  
                                         l1358 06B3                                           l4015 1F6E  
                                         l1375 0736                                           l1396 07AD  
                                         l1388 0795                                           l3405 10EF  
                                         l1469 1030                                           l1494 086F  
                                         l6001 1244                                           l3603 07DA  
                                         l6021 1272                                           l6005 124D  
                                         l3623 112E                                           l6031 1291  
                                         l6023 1280                                           l3553 080D  
                                         l3619 112B                                           l3635 1135  
                                         l3571 0850                                           l3563 0813  
                                         l3723 1FB4                                           l5403 0767  
                                         l6203 0E8C                                           l3629 1132  
                                         l3557 0810                                           l3549 080A  
                                         l3725 1FB9                                           l5261 05F8  
                                         l6205 0E99                                           l6141 0DAC  
                                         l6133 0D99                                           ?_map 0120  
                                         l3663 1163                                           l5503 156F  
                                         l5407 0769                                           l5327 069E  
                                         l5319 0666                                           l5255 05ED  
                                         l6215 0F39                                           l6207 0E9F  
                                         l6135 0D9D                                           l6127 0D8C  
                                         l3593 07D4                                           l3729 1FBE  
                                         l5425 07A5                                           l5353 06D3  
                                         l5345 06C1                                           l5329 06A0  
                                         l5337 06AE                                           l6161 0DFC  
                                         l6145 0DB7                                           l6129 0D8E  
                                         l3659 1160                                           l5611 0A8E  
                                         l5355 06D5                                           l5363 06E4  
                                         l5283 0618                                           l5259 05F0  
                                         l6219 0F69                                           l6147 0DBB  
                                         l6139 0DA8                                           l3597 07D7  
                                         l3669 1166                                           l3685 1111  
                                         l5613 0A96                                           l5509 157B  
                                         l5429 07A9                                           l5381 0748  
                                         l5373 072E                                           l6229 0FFD  
                                         l3695 1DFC                                           l5439 102A  
                                         l5703 0C96                                           l5631 0ABD  
                                         l5535 15DB                                           l5279 0615  
                                         l4825 12C0                                           l3785 1FA0  
                                         l5713 0CCD                                           l5609 0A8C  
                                         l5561 1614                                           l5553 15E6  
                                         l5529 15C2                                           l5537 15A4  
                                         l5473 1524                                           l5289 062A  
                                         l6193 0E50                                           l6169 0E20  
                                         l4835 12E8                                           l5723 0CFD  
                                         l5627 0AB3                                           l5555 15FD  
                                         l5539 15E0                                           l5475 152C  
                                         l5395 075C                                           l6381 1148  
                                         l5717 0CE4                                           l5629 0AB5  
                                         l5741 0867                                           l4941 13CD  
                                         l5565 1616                                           l5493 1548  
                                         l5469 1521                                           l5389 0755  
                                         l5397 075E                                           l6373 0E91  
                                         l6197 0E6E                                           l6375 117D  
                                         l5639 0ACB                                           l5751 0882  
                                         l5575 163F                                           l6377 07ED  
                                         l5761 08B7                                           l5753 0892  
                                         l4937 13B3                                           l5489 1545  
                                         l5833 0146                                           l5825 00F8  
                                         l5841 017F                                           l5817 0093  
                                         l6379 082A                                           l5691 0C5D  
                                         l5763 08AA                                           l5747 087E  
                                         l5819 00AD                                           l5693 0C74  
                                         l5589 1678                                           l5853 019A  
                                         l5775 08DE                                           l5699 0C93  
                                         _LATA 010C                                           _LATB 010D  
                                         _LATC 010E                                           u5005 162D  
                                         u5015 1648                                           u4400 0686  
                                         u5025 1661                                           u5125 0B7D  
                                         u5135 0BB4                                           u5145 0C1D  
                                         u4513 06F6                                           u4505 06D9  
                                         u5155 0C48                                           u6107 1319  
                                         u4435 06A4                                           u5165 0C60  
                                         u5405 08CB                                           u5325 088B  
                                         u4390 0685                                           u5255 0CB4  
                                         u5265 0CD8                                           u5185 0C69  
                                         u5345 089F                                           u4385 067A  
                                         u3835 12B0                                           u5275 0CF0  
                                         u4555 0749                                           u5365 08B1  
                                         u5525 01B3                                           u5445 00A4  
                                         u6077 0D40                                           u4735 1031  
                                         u4655 0780                                           u6087 0DC3  
                                         u5465 00BE                                           u6097 0E3E  
                                         u4915 15E9                                           u5635 1256  
                                         u5725 1339                                           u4845 15AC  
                                         u5485 0109                                           u5735 1342  
                                         u4935 15F2                                           u4855 15B3  
                                         u5665 1273                                           u4875 15BC  
                                         u5860 0D36                                           u4885 15D0  
                                         u5950 0DFA                                           u5695 1288  
                                         _TMR0 0015                                           _WPUA 020C  
                                         _WPUB 020D                        ??_wr2RegCompleteHandler 0033  
                                         _main 0D23                       ?_I2C_CallbackReturnReset 0032  
                                         _logf 0062                                           fsr0h 0005  
                                         fsr1h 0007                                           indf0 0000  
                                         fsr0l 0004                                           indf1 0001  
                                         fsr1l 0006                                           map@x 0120  
                             __end_of_I2C_Open 11F6                                           btemp 007E  
                            ?_FLASH_WriteBlock 002C                                           start 0032  
                         ?_MCP3422_ReadVoltage 00BD                                ___fldiv@new_exp 00CF  
                           ??_FLASH_WriteBlock 002F                     ??_TMR1_SetInterruptHandler 002B  
                         __end_of_MCP3422_Read 1E89                                          ??_map 00E2  
                             ?_I2C_MasterClose 0070                        __end_of_TMR0_Initialize 1F0F  
                              _I2C_WriteNBytes 103F                 ??_TMR0_DefaultInterruptHandler 0070  
                             ?_I2C_MasterStart 0070                                  _I2C_DO_RX_ACK 1D76  
                             ?_I2C_MasterWrite 0070                  __end_of_OSCILLATOR_Initialize 1DC0  
                                ___fltol@sign1 00E0                                __end_of___fladd 07B5  
                                        ?_main 0070                                          ?_logf 00D7  
                              __end_of___fldiv 1681                                __end_of___flmul 0D23  
                              __end_of___flsub 11B9                                __end_of___fltol 12A0  
                                        _T1CON 0018                                          i1l121 000D  
                                        i1l131 0030                                          i1l124 001B  
                                        i1l126 0028                                          i1l951 10C7  
                                        _RCREG 0199                                          _RCSTA 019D  
                                        _TMR1H 0017                                          _TMR1L 0016  
                            ??_I2C_DO_TX_EMPTY 0033                                          _TRISA 008C  
                                        _TRISB 008D                                          _TRISC 008E  
                                        _TXREG 019A                                          _TXSTA 019E  
                    ?_TMR0_SetInterruptHandler 0029                               __end_of_TMR0_ISR 1DCD  
                             __end_of_TMR1_ISR 1E39                              __end_of_I2C_DO_RX 07FC  
                            __end_of_I2C_DO_TX 0852                                 _WDT_Initialize 07FC  
                                        _errno 016E                              __end_of_I2C_Close 1FA3  
               I2C_MasterOperation@returnValue 003B                        _I2C_MasterEnableRestart 1D58  
                                        logf@R 0120                        __end_of_TMR1_Initialize 1F3B  
                                        logf@f 015A                                          logf@k 013C  
                                        logf@s 0146                                          logf@u 0156  
                                        logf@w 014E                                          logf@x 00D7  
                                        logf@z 014A                                          pclath 000A  
                             ?_I2C_SetCallback 0029                   I2C_SetAddressNackCallback@cb 002E  
                                        status 0003                                          wtemp0 007E  
                            ?_I2C_DO_SEND_STOP 0070                          ??_MCP3422_ReadVoltage 00C1  
                 MCP3422_ReadVoltage@adc_value 00C9                                _TMR1_WriteTimer 1E5D  
                   __end_of_mbus_timer_handler 1E2E                             ??_I2C_DO_SEND_STOP 0029  
                              __initialization 0034                                   __end_of_main 1000  
                                 __end_of_logf 05D4                      ?_I2C_DO_SEND_RESTART_READ 0070  
                        __end_of_MCP3422_Write 1E79                                 ?_I2C_DO_RX_ACK 0070  
                  ?_INTERRUPT_InterruptManager 0070                 ??_EUSART_SetRxInterruptHandler 002B  
                                       ??_main 0050                                         ??_logf 00DB  
                            ?_I2C_MasterIsNack 0070                              ?_I2C_MasterSetIrq 0070  
                           ??_I2C_MasterIsNack 0029                              __end_of_HEFregion 2020  
                       __end_of_WDT_Initialize 0800                             ??_I2C_MasterSetIrq 0029  
            _EUSART_DefaultFramingErrorHandler 0000                     _EUSART_OverrunErrorHandler 026D  
                    FLASH_WriteBlock@writeAddr 002C                __end_of_I2C_CallbackReturnReset 1D4B  
                                       _APFCON 011D                  I2C_SetDataCompleteCallback@cb 002E  
                                       _ANSELA 018C                                         _ANSELB 018D  
                                       _ANSELC 018E                                         _BORCON 0116  
                                       _T1GCON 0019                                   ??_I2C_Poller 0039  
                      TMR1_WriteTimer@timerVal 0070                                         i1l4051 1072  
                                       i1l4045 106A                                         i1l4057 107F  
                                       i1l4501 1E66                                         i1l6081 10A8  
                                       i1l6383 17AD                                         i1l5911 16B7  
                                       i1l4919 10C3                                         i1l5913 16BA  
                                       i1l5923 16CA                                         i1l5907 1688  
                                       i1l5941 16EC                                         i1l5909 16A7  
                                       i1l5943 172C                                         i1l5961 177A  
                                       i1l5947 1762                                         i1l5949 1768  
                                       i1l5967 17A5                                         i1l5977 17BF  
                                       i1l5969 17B8                                         i1l5979 17DA  
                                       _PMADRH 0192                                         u280_25 1073  
                                       _PMADRL 0191                                         _PMDATH 0194  
                                       _PMDATL 0193                                         _PMCON2 0196  
                                       u560_25 1789                                         u561_25 17CA  
                                       u553_25 1697                                         _OSCCON 0099  
                                       u557_25 16F9                                         u558_25 1735  
                                       u559_25 174C                                         _SPBRGH 019C  
                                       _SPBRGL 019B                                         _WDTCON 0097  
                             __end_of___xxtofl 08E7       ModbusSlaveProcessReceivedQuery@u8ReadReg 0020  
                          _I2C_MasterGetRxData 0800                        __end_of_I2C_WriteNBytes 1061  
                                       ___flge 137F                                      ??___fladd 003F  
                                       _ln2_hi 1834                                      ??___fldiv 00C5  
                                _I2C_MasterFsm 10FF                                         _ln2_lo 1830  
                                    ??___flmul 004B                                      ??___flsub 004B  
                                    ??___fltol 00DB                                 main@fTdVoltage 01E8  
                             ?_TMR0_Initialize 0070                              I2C_SetCallback@cb 0029  
                                _I2C_SetBuffer 1ED1                             __end_of_I2C_Poller 1E05  
                 __end_of_I2C_MasterDisableIrq 1D58                                         logf@t1 0124  
                                       logf@t2 0128                                         logf@dk 0142  
                                       logf@ix 015E                            _I2C_DO_ADDRESS_NACK 1157  
                      FLASH_ReadWord@flashAddr 0029                                   __pdataCOMMON 007A  
                         ?_I2C_MasterGetRxData 0070                                      ?_I2C_Open 0070  
           __end_of_I2C_SetAddressNackCallback 1E5D                     _I2C_SetAddressNackCallback 1E51  
                              ?_WDT_Initialize 0070                      ??_I2C_MasterEnableRestart 0029  
                        __end_of_TMR0_CallBack 1E0F       TMR0_SetInterruptHandler@InterruptHandler 0029  
     TMR1_SetInterruptHandler@InterruptHandler 0029                        __end_of_TMR1_WriteTimer 1E6B  
                             main@u16CalBuffer 01D8               ModbusSlaveProcessReceivedQuery@i 0027  
             ModbusSlaveProcessReceivedQuery@j 0025               ModbusSlaveProcessReceivedQuery@k 0021  
                        __end_of_TMR1_CallBack 1E19                                     ___flge@ff1 0037  
                                   ___flge@ff2 003B                               ?_TMR1_Initialize 0070  
                                 ___xxtofl@arg 0033                                   ___xxtofl@exp 0032  
                            _SYSTEM_Initialize 1F0F                                   ___xxtofl@val 0029  
                  __end_of_get_ntc_temperature 0A6F                        __end_of__initialization 005E  
                      get_ntc_temperature@temp 016A                        get_ntc_temperature@rntc 0162  
                          _I2C_MasterOperation 1FA3                             ?_SYSTEM_Initialize 0070  
                         ?_I2C_DO_ADDRESS_NACK 0070                                     ___fltol@f1 00D7  
         __end_of_EUSART_SetTxInterruptHandler 1D9E                   _EUSART_SetTxInterruptHandler 1D99  
                      _rdBlkRegCompleteHandler 1F3B                                 __pcstackCOMMON 0070  
                               ?_I2C_MasterFsm 0070                                ??_I2C_DO_RX_ACK 0029  
                       _I2C_CallbackReturnStop 1D47                                _InitModbusSlave 1EE5  
                          ??_SYSTEM_Initialize 002C                                      ?_TMR0_ISR 0070  
                                    ?_TMR1_ISR 0070                                 ?_I2C_SetBuffer 0029  
                      ?_I2C_MasterWaitForEvent 0070                  __end_of_I2C_DO_SEND_ADR_WRITE 1DD4  
                   ?_I2C_DO_SEND_RESTART_WRITE 0070                           ?_I2C_MasterOperation 0070  
                        ??_I2C_MasterGetRxData 0029                                 _OPTION_REGbits 0095  
                        I2C_ReadNBytes@address 003F                                     ??_I2C_Open 0029  
                         _eusartRxStatusBuffer 024D                     __end_of_I2C_MasterClearIrq 1D52  
                  FLASH_WriteBlock@GIEBitValue 0034                ??_EUSART_SetOverrunErrorHandler 002B  
                                 _MCP3422_Read 1E79                      __end_of_SYSTEM_Initialize 1F24  
                            _I2C_MasterSendAck 1D62                                     __pbssBANK0 0051  
                                   __pbssBANK2 016E                                     __pbssBANK3 01A0  
                                   __pbssBANK4 0220                                     __pbssBANK5 02A0  
                               _crcModbusSlave 007A                                  ??_I2C_DO_IDLE 0029  
                                ??_I2C_DO_RCEN 0029                  __end_of_rd2RegCompleteHandler 1EBF  
                 __end_of_I2C_MasterSendTxData 1DAE                             ?_I2C_MasterSendAck 0070  
                            _I2C_MasterStartRx 1D4B                          ??_I2C_DO_ADDRESS_NACK 0033  
                __end_of_wr2RegCompleteHandler 1E9B                              ??_mbus_rx_handler 0079  
                          _I2C_DO_RX_NACK_STOP 1D7A                          _rd1RegCompleteHandler 1E9B  
                           ?_I2C_MasterStartRx 0070                     __end_of_I2C_MasterSendNack 1D62  
                            __end_of__Umul8_16 103F                               ?_I2C_WriteNBytes 003C  
                       I2C_WriteNBytes@address 003F                          _wr1RegCompleteHandler 1EBF  
                                   __pmaintext 0D23                            ??_I2C_MasterSendAck 0029  
                     rd1RegCompleteHandler@ptr 0032                                        ?___flge 0037  
                ?_EUSART_SetTxInterruptHandler 0029               _EUSART_TxDefaultInterruptHandler 0064  
                  __end_of_I2C_DO_SEND_RESTART 1D72                                _I2C_DO_TX_EMPTY 1128  
             __end_of_TMR0_SetInterruptHandler 1DA3                            I2C_SetBuffer@buffer 002C  
                                   ??_TMR0_ISR 0070                                     ??_TMR1_ISR 0072  
                            ??_mbus_tx_handler 0070                                     __pintentry 0004  
               __end_of_I2C_MasterWaitForEvent 1D99                            ??_I2C_MasterStartRx 0029  
                                      _BAUDCON 019F                          ??_I2C_MasterOperation 0039  
               I2C_SetDataCompleteCallback@ptr 0030                       ??_I2C_DO_RX_NACK_RESTART 0029  
                               _FLASH_ReadWord 1FC1              __end_of_I2C_DO_SEND_RESTART_WRITE 1D6E  
                         ?_I2C_DO_RX_NACK_STOP 0070                  get_ntc_temperature@adcVoltage 00E3  
                                _eusartRxCount 0059                                      ?___xxtofl 0029  
                    __end_of_I2C_MasterSendAck 1D66                                        _SSP1ADD 0212  
                                      _SSP1BUF 0211                       ??_EUSART_SetErrorHandler 002B  
                               calculate_crc@i 0075                               ?_TMR1_WriteTimer 0070  
                    __end_of_I2C_MasterStartRx 1D4D                           I2C_Close@returnValue 002A  
                 ?_I2C_SetDataCompleteCallback 002E                                      _I2C_DO_RX 07B5  
                                    _I2C_DO_TX 0803               __end_of_I2C_DO_SEND_RESTART_READ 1D6A  
                             _FLASH_EraseBlock 1000                                      _I2C_Close 1F87  
                    ??_rdBlkRegCompleteHandler 0033                        __end_of_InitModbusSlave 1EFA  
                         _I2C_MasterDisableIrq 1D55                                ??_I2C_MasterFsm 0036  
                               _I2C_ReadNBytes 1F6D                            __end_of_I2C_DO_IDLE 1D8F  
                          __end_of_I2C_DO_RCEN 1DBA                                        ___fladd 05D4  
                                      ___fldiv 1508                                        ___flmul 0A6F  
                                      ___flsub 1186                                        ___fltol 123B  
                              ??_I2C_SetBuffer 002B                        I2C_SetBuffer@bufferSize 0029  
                           I2C_ReadNBytes@data 003C        __end_of_ModbusSlaveProcessReceivedQuery 1800  
            ??_ModbusSlaveProcessReceivedQuery 0076               ?_ModbusSlaveProcessReceivedQuery 0070  
              _ModbusSlaveProcessReceivedQuery 1681                                 _I2C_MasterRead 1D82  
                               _I2C_MasterOpen 1E45                         __end_of_FLASH_ReadWord 1FE0  
                               _I2C_MasterStop 1D5B                                 _I2C_Initialize 1E19  
                                      __ptext1 13FA                                        __ptext2 123B  
                                      __ptext3 08E7                                        __ptext4 0062  
                                      __ptext5 1186                                        __ptext6 05D4  
                                      __ptext7 1508                                        __ptext8 137F  
                                      __ptext9 1F0F                          ??_I2C_DO_RX_NACK_STOP 0029  
                           _mbus_timer_handler 1E23                                      _T1CONbits 0018  
                        _OSCILLATOR_Initialize 1DBA                                     ??___xxtofl 002D  
                           I2C_SetCallback@idx 002D                       ??_PIN_MANAGER_Initialize 0029  
                I2C_CallbackReturnReset@funPtr 0032                      ?_TMR1_SetInterruptHandler 0029  
                           I2C_SetCallback@ptr 002B                                        _tempNTC 01CD  
                     wr1RegCompleteHandler@ptr 0032                            ?_mbus_timer_handler 0070  
                                      clrloop0 1DC1                    __end_of_MCP3422_ReadVoltage 137F  
                              main@fNtcVoltage 01D4                                      _HEFregion 1FE0  
                         end_of_initialization 005E                                     ?_I2C_DO_RX 0070  
                                   ?_I2C_DO_TX 0070          __end_of_EUSART_SetOverrunErrorHandler 1DF4  
                _EUSART_SetOverrunErrorHandler 1DEC                        MCP3422_ReadVoltage@data 00C6  
                                   ?_I2C_Close 0070                         ?_rd1RegCompleteHandler 0032  
                      __end_of_I2C_DO_TX_EMPTY 1157                          ?_I2C_MasterDisableIrq 0070  
                       __end_of_I2C_ReadNBytes 1F87                                  _calculate_crc 1061  
                            _EUSART_Initialize 11F6                         ?_wr1RegCompleteHandler 0032  
                           ?_EUSART_Initialize 0070                           ??_mbus_timer_handler 0070  
                       __end_of_I2C_MasterRead 1D86                         __end_of_I2C_MasterOpen 1E51  
                       __end_of_I2C_MasterStop 1D5E                         __end_of_I2C_Initialize 1E23  
                    FLASH_ReadWord@GIEBitValue 002B                                ?_FLASH_ReadWord 0029  
                          ??_EUSART_Initialize 002B                               ??_WDT_Initialize 0029  
               ??_EUSART_SetTxInterruptHandler 002B                       _TMR0_SetInterruptHandler 1D9E  
              __end_of_rdBlkRegCompleteHandler 1F54                           _I2C_MasterSendTxData 1DA8  
                                  ___fladd@grs 004A                                  ___xxtofl@sign 0031  
                  ?_I2C_SetAddressNackCallback 002E                                    ___fldiv@grs 00D1  
                                  ___fldiv@rem 00CA                                     map@out_max 0130  
                                   map@out_min 012C                                    ___flmul@grs 00B3  
                    __end_of_EUSART_Initialize 123B                                    _I2C_DO_IDLE 1D8A  
                                  _I2C_DO_RCEN 1DB4                     rdBlkRegCompleteHandler@ptr 0032  
                               ?_calculate_crc 0070                                      _TXSTAbits 019E  
                             ?_InitModbusSlave 0070                                ?_I2C_ReadNBytes 003C  
                      ?_I2C_CallbackReturnStop 0032                       _I2C_DO_SEND_RESTART_READ 1D66  
                            FLASH_WriteBlock@i 0035                              _HEFregion_absaddr 1FE0  
                 I2C_CallbackReturnStop@funPtr 0032                                ?_I2C_MasterRead 0070  
                              ?_I2C_MasterOpen 0070                                ?_I2C_MasterStop 0070  
                              ?_I2C_Initialize 0070                        _I2C_CallbackReturnReset 1D49  
                               __end_of___flge 13FA                     _EUSART_DefaultErrorHandler 0000  
                               __end_of_ln2_hi 1838                                 __end_of_ln2_lo 1834  
                                __pidataCOMMON 0002                               _FLASH_WriteBlock 12A0  
                        ?_I2C_MasterSendTxData 0070                         ?_OSCILLATOR_Initialize 0070  
                  ??_I2C_DO_SEND_RESTART_WRITE 0029                            start_initialization 0034  
                                  __end_of_Lg1 1830                                    __end_of_Lg2 182C  
                                  __end_of_Lg3 1828                                    __end_of_Lg4 1824  
                     InitModbusSlave@u8SlaveId 002A                                _mbus_rx_handler 1088  
                                  __end_of_map 1508                                  ?_I2C_DO_RESET 0070  
 EUSART_SetRxInterruptHandler@interruptHandler 0029   EUSART_SetTxInterruptHandler@interruptHandler 0029  
                                  ??_I2C_DO_RX 0033                                    ??_I2C_DO_TX 0033  
                            ??_I2C_MasterClose 0029                                _mbus_tx_handler 10AF  
                       ??_I2C_MasterDisableIrq 0029                                    ??_I2C_Close 0029  
                            ??_I2C_MasterStart 0029                              ??_I2C_MasterWrite 003C  
               __end_of_I2C_CallbackReturnStop 1D49                         _I2C_DO_RX_NACK_RESTART 1D7E  
                             ?_I2C_DO_TX_EMPTY 0070                             _I2C_MasterClearIrq 1D4F  
               ?_EUSART_SetOverrunErrorHandler 0029                     _EUSART_FramingErrorHandler 01EC  
                                     ??___flge 003F                         _EUSART_SetErrorHandler 1DDC  
                          ?_I2C_MasterClearIrq 0070                                      __Umul8_16 101F  
                  __end_of_I2C_MasterGetRxData 0803                          __end_of_I2C_DO_RX_ACK 1D7A  
                  FLASH_EraseBlock@GIEBitValue 002B                                  _MCP3422_Write 1E6B  
                     __end_of_FLASH_EraseBlock 101F                               _I2C_DO_SEND_STOP 1D72  
                            ??_I2C_SetCallback 002C                            I2C_Open@returnValue 002B  
                           _I2C_MasterSendNack 1D5E                       ?_I2C_MasterEnableRestart 0070  
                            __p_HEFregion_text 1FE0                                      ___fladd@a 003B  
                                    ___fladd@b 0037                              _i2c_fsmStateTable 1800  
                                    ___fldiv@a 00BD                                      ___fldiv@b 00C1  
                        _I2C_DO_SEND_ADR_WRITE 1DCD                                      ___flmul@a 00AC  
                                    ___flmul@b 00A8                                      ___flsub@a 00A0  
                                    ___flsub@b 00A4                                      ___latbits 0002  
                                __pcstackBANK0 0020                                  __pcstackBANK1 00A0  
                                __pcstackBANK2 0120                                  __pcstackBANK3 01D2  
                               ??_I2C_DO_RESET 0029                            ?_I2C_MasterSendNack 0070  
                 __end_of_I2C_DO_SEND_ADR_READ 1DDC                           ??_I2C_MasterClearIrq 0029  
                  __end_of_I2C_DO_ADDRESS_NACK 1186                                ??_calculate_crc 0070  
                             _I2C_MasterIsNack 1DAE                      _I2C_DO_SEND_RESTART_WRITE 1D6A  
             _EUSART_RxDefaultInterruptHandler 01EE                               _I2C_MasterSetIrq 1D4D  
                        _TMR0_InterruptHandler 005E                                      __pnvBANK0 005E  
                                    __pnvBANK1 00EE                                      __pnvBANK3 01EC  
                                    __pnvBANK4 026D                                      __pnvBANK5 02E0  
                        _rd2RegCompleteHandler 1EAD                         _PIN_MANAGER_Initialize 1F54  
                        _wr2RegCompleteHandler 1E89                      ??_I2C_CallbackReturnReset 0033  
                     _get_ntc_temperature$2276 0166                    __end_of_I2C_MasterOperation 1FC1  
                         ??_I2C_MasterSendNack 0029                       rd2RegCompleteHandler@ptr 0032  
             __end_of_TMR1_SetInterruptHandler 1DA8                                       ?___fladd 0037  
                                     ?___fldiv 00BD                                       ?___flmul 00A8  
                                     ?___flsub 00A0                                       ?___fltol 00D7  
                                   ?__Umul8_16 0029                                 ?_MCP3422_Write 0070  
                                 _eusartRxHead 005B                                   _eusartTxHead 005D  
                                 _eusartRxTail 005A                         ??_I2C_MasterSendTxData 0029  
                                 _eusartTxTail 005C                      __end_of_i2c_fsmStateTable 1820  
                                    _logf$2280 0134                                      _logf$2281 0138  
                                    _logf$2277 0152                                      _logf$2278 012C  
                                    _logf$2279 0130                   ??_INTERRUPT_InterruptManager 007A  
                      __end_of_mbus_rx_handler 10AF                        _eusartTxBufferRemaining 00EE  
                      I2C_MasterOperation@read 003A                                       _I2C_Open 11B9  
                      __end_of_mbus_tx_handler 10D7                              I2C_ReadNBytes@len 003D  
                                _TMR0_CallBack 1E05                        ??_rd1RegCompleteHandler 0033  
               FLASH_WriteBlock@blockStartAddr 0032                                 _eusartRxBuffer 025D  
                      ??_wr1RegCompleteHandler 0033                                  _TMR1_CallBack 1E0F  
                            ??_TMR0_Initialize 002B                                 _eusartTxBuffer 02A0  
       EUSART_SetErrorHandler@interruptHandler 0029                                       _LATCbits 010E  
                                    clear_ram0 1DC0                                       _PIE1bits 0091  
                            _eusartRxLastError 0058                     ??_TMR0_SetInterruptHandler 002B  
                                     _PIR1bits 0011                ??_EUSART_SetFramingErrorHandler 002B  
                    FLASH_EraseBlock@startAddr 0029                               ??_FLASH_ReadWord 002B  
                        __end_of_I2C_MasterFsm 1128                                      main@F4497 023D  
                  __end_of_I2C_DO_RX_NACK_STOP 1D7E                                       _SSP1CON1 0215  
                                     _SSP1CON2 0216                                       _TMR0_ISR 1DC6  
            _EUSART_DefaultOverrunErrorHandler 0000                                       _TMR1_ISR 1E2E  
              __end_of_I2C_MasterEnableRestart 1D5B                                       _SSP1STAT 0214  
                        __end_of_I2C_SetBuffer 1EE5                                      map@in_max 0128  
                                    map@in_min 0124                              ??_TMR1_Initialize 002B  
                       ?_I2C_DO_SEND_ADR_WRITE 0070                       I2C_MasterSendTxData@data 0029  
                     wr2RegCompleteHandler@ptr 0032                                 ?_TMR0_CallBack 0070  
                   ??_I2C_DO_SEND_RESTART_READ 0029                       ?_rdBlkRegCompleteHandler 0032  
                             ??_I2C_ReadNBytes 003F                                 ?_TMR1_CallBack 0070  
                                   _I2C_Poller 1DFC                                     _I2C_Status 0220  
                                 ?_I2C_DO_IDLE 0070                                       _bCalMode 01D1  
                                 ?_I2C_DO_RCEN 0070                     MCP3422_ReadVoltage@channel 00C5  
                     __end_of_FLASH_WriteBlock 1306                         ?_rd2RegCompleteHandler 0032  
                             ??_I2C_MasterRead 003C                            I2C_WriteNBytes@data 003C  
                             ??_I2C_MasterOpen 0029                         ?_wr2RegCompleteHandler 0032  
                             ??_I2C_MasterStop 0029                       ??_I2C_MasterWaitForEvent 0029  
                             ??_I2C_Initialize 0029                                ??_MCP3422_Write 0040  
                         __end_of_I2C_DO_RESET 1D94                        ??_OSCILLATOR_Initialize 0029  
                                  ??__Umul8_16 002B                            _EUSART_ErrorHandler 02E0  
                         _I2C_DO_SEND_ADR_READ 1DD4                                       _map$2275 00EA  
                     _TMR1_SetInterruptHandler 1DA3                               ?_mbus_rx_handler 0070  
                            MCP3422_Read@count 0040                          _TMR1_InterruptHandler 0060  
                              _I2C_MasterClose 1D52                  I2C_SetAddressNackCallback@ptr 0030  
                              I2C_Open@address 002A                                       ___xxtofl 0852  
                              _I2C_MasterStart 1D45                                _I2C_MasterWrite 1D86  
                          _get_ntc_temperature 08E7                              ??_I2C_WriteNBytes 003F  
                                ?_MCP3422_Read 0040                               ?_mbus_tx_handler 0070  
                                     __ptext10 07FC                                       __ptext11 1F24  
                                     __ptext20 1DF4                                       __ptext12 1DA3  
                                     __ptext21 1DEC                                       __ptext13 1EFA  
                                     __ptext30 1E51                                       __ptext22 1DE4  
                                     __ptext14 1D9E                                       __ptext31 1D86  
                                     __ptext23 1DDC                                       __ptext15 1F54  
                                     __ptext40 10FF                                       __ptext32 1E79  
                                     __ptext24 1306                                       __ptext16 1DBA  
                                     __ptext41 1157                                       __ptext33 1F6D  
                                     __ptext25 0852                                       __ptext17 1E19  
                                     __ptext50 1DB4                                       __ptext42 1D8F  
                                     __ptext34 11B9                                       __ptext26 0A6F  
                                     __ptext18 11F6                                       __ptext51 07B5  
                                     __ptext43 1D7E                                       __ptext35 1E45  
                                     __ptext27 101F                                       __ptext19 1D99  
                                     __ptext60 1D62                                       __ptext52 0803  
                                     __ptext44 1D7A                                       __ptext36 1D82  
                                     __ptext28 1E6B                                       __ptext61 0800  
                                     __ptext53 1DCD                                       __ptext45 1D76  
                                     __ptext37 1FA3                                       __ptext29 103F  
                                     __ptext70 1E89                                       __ptext62 1D5E  
                                     __ptext54 1DD4                                       __ptext46 1D72  
                                     __ptext38 1DFC                                       __ptext71 1E39  
                                     __ptext63 1D4B                                       __ptext55 1D8A  
                                     __ptext47 1D6E                                       __ptext39 1D94  
                                     __ptext80 1D4F                                       __ptext72 10D7  
                                     __ptext64 1D49                                       __ptext56 1128  
                                     __ptext48 1D6A                                       __ptext81 1EE5  
                                     __ptext73 1ED1                                       __ptext65 1D47  
                                     __ptext57 1D4D                                       __ptext49 1D66  
                                     __ptext90 1E2E                                       __ptext82 12A0  
                                     __ptext74 1D5B                                       __ptext66 1F3B  
                                     __ptext58 1DAE                                       __ptext91 1E5D  
                                     __ptext83 1000                                       __ptext75 1D58  
                                     __ptext67 1EBF                                       __ptext59 1DA8  
                                     __ptext92 1E0F                                       __ptext84 1FC1  
                                     __ptext76 1D45                                       __ptext68 1EAD  
                                     __ptext93 1E23                                       __ptext77 1F87  
                                     __ptext69 1E9B                                       __ptext94 1DC6  
                                     __ptext86 10AF                                       __ptext78 1D55  
                                     __ptext95 1E05                                       __ptext87 1088  
                                     __ptext79 1D52                                       __ptext96 1D44  
                                     __ptext88 1681                                       __ptext89 1061  
                                 _SSP1CON1bits 0215                                   _SSP1CON2bits 0216  
          __end_of_I2C_SetDataCompleteCallback 1E45                    _I2C_SetDataCompleteCallback 1E39  
                      ?_I2C_DO_RX_NACK_RESTART 0070                                _modbusSlaveData 01A0  
                     __end_of_I2C_DO_SEND_STOP 1D76           __end_of_TMR0_DefaultInterruptHandler 1D45  
                 _TMR0_DefaultInterruptHandler 1D44                        ?_EUSART_SetErrorHandler 0029  
                              _I2C_SetCallback 10D7                  ??_I2C_SetDataCompleteCallback 0031  
                         ?_get_ntc_temperature 00E3  EUSART_SetOverrunErrorHandler@interruptHandler 0029  
                                     int$flags 007E                          ?_I2C_DO_SEND_ADR_READ 0070  
           __end_of_INTERRUPT_InterruptManager 0032                     _INTERRUPT_InterruptManager 0004  
        __end_of_EUSART_SetFramingErrorHandler 1DEC                  _EUSART_SetFramingErrorHandler 1DE4  
                            ??_TMR1_WriteTimer 0072                       MCP3422_ReadVoltage@F4487 0055  
                     __end_of_I2C_MasterIsNack 1DB4         ModbusSlaveProcessReceivedQuery@u16Data 0023  
                            ?_FLASH_EraseBlock 0029                                       logf@F472 0051  
                     __end_of_I2C_MasterSetIrq 1D4F                             ??_FLASH_EraseBlock 002B  
                                   _INTCONbits 000B                             I2C_WriteNBytes@len 003D  
                              ??_TMR0_CallBack 0070                                 ??_MCP3422_Read 0041  
                                     logf@hfsq 013E                 __end_of_I2C_DO_RX_NACK_RESTART 1D82  
                              ??_TMR1_CallBack 0071                               MCP3422_Read@data 0044  
                                     intlevel1 0000                                    ?_I2C_Poller 0070  
                                   _PMCON1bits 0195                        ?_PIN_MANAGER_Initialize 0070  
               __end_of_EUSART_SetErrorHandler 1DE4                            _I2C_DO_SEND_RESTART 1D6E  
         __end_of_EUSART_SetRxInterruptHandler 1DFC                   _EUSART_SetRxInterruptHandler 1DF4  
                        ??_get_ntc_temperature 0050                  ?_TMR0_DefaultInterruptHandler 0070  
EUSART_SetFramingErrorHandler@interruptHandler 0029                        __end_of_I2C_MasterClose 1D55  
                      __end_of_I2C_MasterStart 1D47                        __end_of_I2C_MasterWrite 1D8A  
                                __pstringtext1 1800                                  __pstringtext2 1820  
                                __pstringtext3 1824                                  __pstringtext4 1828  
                                __pstringtext5 182C                                  __pstringtext6 1830  
                                __pstringtext7 1834                         __Umul8_16@multiplicand 0029  
                         ?_I2C_DO_SEND_RESTART 0070                                     _OPTION_REG 0095  
                            MCP3422_Write@data 0041                                _TMR0_Initialize 1EFA  
                                ___fladd@signs 0047                        __end_of_I2C_SetCallback 10FF  
               __end_of_PIN_MANAGER_Initialize 1F6D                            calculate_crc@crcbit 0073  
                          calculate_crc@crcreg 0072                  __end_of_rd1RegCompleteHandler 1EAD  
                                 ___fladd@aexp 0048                                   ___fladd@bexp 0049  
                        __end_of_calculate_crc 1088                           __Umul8_16@multiplier 0031  
                __end_of_wr1RegCompleteHandler 1ED1                                _TMR1_Initialize 1F24  
                            __Umul8_16@product 002D  
